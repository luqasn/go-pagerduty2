// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// UpdateExtenstionReader is a Reader for the UpdateExtenstion structure.
type UpdateExtenstionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExtenstionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateExtenstionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateExtenstionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewUpdateExtenstionPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateExtenstionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateExtenstionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateExtenstionOK creates a UpdateExtenstionOK with default headers values
func NewUpdateExtenstionOK() *UpdateExtenstionOK {
	return &UpdateExtenstionOK{}
}

/*UpdateExtenstionOK handles this case with default header values.

The extension that was updated.
*/
type UpdateExtenstionOK struct {
	Payload *models.UpdateExtenstionOKBody
}

func (o *UpdateExtenstionOK) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] updateExtenstionOK  %+v", 200, o.Payload)
}

func (o *UpdateExtenstionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateExtenstionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtenstionUnauthorized creates a UpdateExtenstionUnauthorized with default headers values
func NewUpdateExtenstionUnauthorized() *UpdateExtenstionUnauthorized {
	return &UpdateExtenstionUnauthorized{}
}

/*UpdateExtenstionUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type UpdateExtenstionUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateExtenstionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] updateExtenstionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateExtenstionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtenstionPaymentRequired creates a UpdateExtenstionPaymentRequired with default headers values
func NewUpdateExtenstionPaymentRequired() *UpdateExtenstionPaymentRequired {
	return &UpdateExtenstionPaymentRequired{}
}

/*UpdateExtenstionPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type UpdateExtenstionPaymentRequired struct {
	Payload *models.Error
}

func (o *UpdateExtenstionPaymentRequired) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] updateExtenstionPaymentRequired  %+v", 402, o.Payload)
}

func (o *UpdateExtenstionPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtenstionForbidden creates a UpdateExtenstionForbidden with default headers values
func NewUpdateExtenstionForbidden() *UpdateExtenstionForbidden {
	return &UpdateExtenstionForbidden{}
}

/*UpdateExtenstionForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type UpdateExtenstionForbidden struct {
	Payload *models.Error
}

func (o *UpdateExtenstionForbidden) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] updateExtenstionForbidden  %+v", 403, o.Payload)
}

func (o *UpdateExtenstionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExtenstionNotFound creates a UpdateExtenstionNotFound with default headers values
func NewUpdateExtenstionNotFound() *UpdateExtenstionNotFound {
	return &UpdateExtenstionNotFound{}
}

/*UpdateExtenstionNotFound handles this case with default header values.

The requested resource was not found.
*/
type UpdateExtenstionNotFound struct {
	Payload *models.Error
}

func (o *UpdateExtenstionNotFound) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] updateExtenstionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateExtenstionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
