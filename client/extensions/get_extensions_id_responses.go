// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetExtensionsIDReader is a Reader for the GetExtensionsID structure.
type GetExtensionsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetExtensionsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetExtensionsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetExtensionsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetExtensionsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetExtensionsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExtensionsIDOK creates a GetExtensionsIDOK with default headers values
func NewGetExtensionsIDOK() *GetExtensionsIDOK {
	return &GetExtensionsIDOK{}
}

/*GetExtensionsIDOK handles this case with default header values.

The extension that was requested.
*/
type GetExtensionsIDOK struct {
	Payload *models.GetExtensionsIDOKBody
}

func (o *GetExtensionsIDOK) Error() string {
	return fmt.Sprintf("[GET /extensions/{id}][%d] getExtensionsIdOK  %+v", 200, o.Payload)
}

func (o *GetExtensionsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetExtensionsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsIDBadRequest creates a GetExtensionsIDBadRequest with default headers values
func NewGetExtensionsIDBadRequest() *GetExtensionsIDBadRequest {
	return &GetExtensionsIDBadRequest{}
}

/*GetExtensionsIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetExtensionsIDBadRequest struct {
	Payload *models.Error
}

func (o *GetExtensionsIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /extensions/{id}][%d] getExtensionsIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetExtensionsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsIDUnauthorized creates a GetExtensionsIDUnauthorized with default headers values
func NewGetExtensionsIDUnauthorized() *GetExtensionsIDUnauthorized {
	return &GetExtensionsIDUnauthorized{}
}

/*GetExtensionsIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetExtensionsIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetExtensionsIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extensions/{id}][%d] getExtensionsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExtensionsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsIDForbidden creates a GetExtensionsIDForbidden with default headers values
func NewGetExtensionsIDForbidden() *GetExtensionsIDForbidden {
	return &GetExtensionsIDForbidden{}
}

/*GetExtensionsIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetExtensionsIDForbidden struct {
	Payload *models.Error
}

func (o *GetExtensionsIDForbidden) Error() string {
	return fmt.Sprintf("[GET /extensions/{id}][%d] getExtensionsIdForbidden  %+v", 403, o.Payload)
}

func (o *GetExtensionsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsIDNotFound creates a GetExtensionsIDNotFound with default headers values
func NewGetExtensionsIDNotFound() *GetExtensionsIDNotFound {
	return &GetExtensionsIDNotFound{}
}

/*GetExtensionsIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetExtensionsIDNotFound struct {
	Payload *models.Error
}

func (o *GetExtensionsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /extensions/{id}][%d] getExtensionsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetExtensionsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
