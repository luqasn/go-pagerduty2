// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new extensions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for extensions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteExtensionsID deletes an extension

Delete an existing extension. Once the extension is deleted, it will not be accessible from the web UI and new incidents won't be able to be created for this extension.
*/
func (a *Client) DeleteExtensionsID(params *DeleteExtensionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteExtensionsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExtensionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteExtensionsID",
		Method:             "DELETE",
		PathPattern:        "/extensions/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteExtensionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteExtensionsIDNoContent), nil

}

/*
GetExtensions lists extensions

List existing extensions.
*/
func (a *Client) GetExtensions(params *GetExtensionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetExtensionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExtensions",
		Method:             "GET",
		PathPattern:        "/extensions",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExtensionsOK), nil

}

/*
GetExtensionsID gets an extension

Get details about an existing extension.
*/
func (a *Client) GetExtensionsID(params *GetExtensionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetExtensionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExtensionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExtensionsID",
		Method:             "GET",
		PathPattern:        "/extensions/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetExtensionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetExtensionsIDOK), nil

}

/*
PostExtensions creates an extension

Create a new extension.
*/
func (a *Client) PostExtensions(params *PostExtensionsParams, authInfo runtime.ClientAuthInfoWriter) (*PostExtensionsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostExtensionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostExtensions",
		Method:             "POST",
		PathPattern:        "/extensions",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostExtensionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostExtensionsCreated), nil

}

/*
PutExtensionsID updates an extension

Update an existing extension.
*/
func (a *Client) PutExtensionsID(params *PutExtensionsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutExtensionsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutExtensionsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutExtensionsID",
		Method:             "PUT",
		PathPattern:        "/extensions/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutExtensionsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutExtensionsIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
