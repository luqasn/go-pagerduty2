// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutExtensionsIDReader is a Reader for the PutExtensionsID structure.
type PutExtensionsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutExtensionsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutExtensionsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPutExtensionsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewPutExtensionsIDPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutExtensionsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutExtensionsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutExtensionsIDOK creates a PutExtensionsIDOK with default headers values
func NewPutExtensionsIDOK() *PutExtensionsIDOK {
	return &PutExtensionsIDOK{}
}

/*PutExtensionsIDOK handles this case with default header values.

The extension that was updated.
*/
type PutExtensionsIDOK struct {
	Payload *models.PutExtensionsIDOKBody
}

func (o *PutExtensionsIDOK) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] putExtensionsIdOK  %+v", 200, o.Payload)
}

func (o *PutExtensionsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutExtensionsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutExtensionsIDUnauthorized creates a PutExtensionsIDUnauthorized with default headers values
func NewPutExtensionsIDUnauthorized() *PutExtensionsIDUnauthorized {
	return &PutExtensionsIDUnauthorized{}
}

/*PutExtensionsIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutExtensionsIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutExtensionsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] putExtensionsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutExtensionsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutExtensionsIDPaymentRequired creates a PutExtensionsIDPaymentRequired with default headers values
func NewPutExtensionsIDPaymentRequired() *PutExtensionsIDPaymentRequired {
	return &PutExtensionsIDPaymentRequired{}
}

/*PutExtensionsIDPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type PutExtensionsIDPaymentRequired struct {
	Payload *models.Error
}

func (o *PutExtensionsIDPaymentRequired) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] putExtensionsIdPaymentRequired  %+v", 402, o.Payload)
}

func (o *PutExtensionsIDPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutExtensionsIDForbidden creates a PutExtensionsIDForbidden with default headers values
func NewPutExtensionsIDForbidden() *PutExtensionsIDForbidden {
	return &PutExtensionsIDForbidden{}
}

/*PutExtensionsIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutExtensionsIDForbidden struct {
	Payload *models.Error
}

func (o *PutExtensionsIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] putExtensionsIdForbidden  %+v", 403, o.Payload)
}

func (o *PutExtensionsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutExtensionsIDNotFound creates a PutExtensionsIDNotFound with default headers values
func NewPutExtensionsIDNotFound() *PutExtensionsIDNotFound {
	return &PutExtensionsIDNotFound{}
}

/*PutExtensionsIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutExtensionsIDNotFound struct {
	Payload *models.Error
}

func (o *PutExtensionsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /extensions/{id}][%d] putExtensionsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutExtensionsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
