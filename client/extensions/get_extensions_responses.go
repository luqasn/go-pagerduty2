// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetExtensionsReader is a Reader for the GetExtensions structure.
type GetExtensionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetExtensionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetExtensionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetExtensionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetExtensionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExtensionsOK creates a GetExtensionsOK with default headers values
func NewGetExtensionsOK() *GetExtensionsOK {
	return &GetExtensionsOK{}
}

/*GetExtensionsOK handles this case with default header values.

A paginated array of extensions.
*/
type GetExtensionsOK struct {
	Payload *models.GetExtensionsOKBody
}

func (o *GetExtensionsOK) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsOK  %+v", 200, o.Payload)
}

func (o *GetExtensionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetExtensionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsBadRequest creates a GetExtensionsBadRequest with default headers values
func NewGetExtensionsBadRequest() *GetExtensionsBadRequest {
	return &GetExtensionsBadRequest{}
}

/*GetExtensionsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetExtensionsBadRequest struct {
	Payload *models.Error
}

func (o *GetExtensionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsBadRequest  %+v", 400, o.Payload)
}

func (o *GetExtensionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsUnauthorized creates a GetExtensionsUnauthorized with default headers values
func NewGetExtensionsUnauthorized() *GetExtensionsUnauthorized {
	return &GetExtensionsUnauthorized{}
}

/*GetExtensionsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetExtensionsUnauthorized struct {
	Payload *models.Error
}

func (o *GetExtensionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExtensionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionsForbidden creates a GetExtensionsForbidden with default headers values
func NewGetExtensionsForbidden() *GetExtensionsForbidden {
	return &GetExtensionsForbidden{}
}

/*GetExtensionsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetExtensionsForbidden struct {
	Payload *models.Error
}

func (o *GetExtensionsForbidden) Error() string {
	return fmt.Sprintf("[GET /extensions][%d] getExtensionsForbidden  %+v", 403, o.Payload)
}

func (o *GetExtensionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
