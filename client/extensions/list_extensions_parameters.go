// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListExtensionsParams creates a new ListExtensionsParams object
// with the default values initialized.
func NewListExtensionsParams() *ListExtensionsParams {
	var ()
	return &ListExtensionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListExtensionsParamsWithTimeout creates a new ListExtensionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListExtensionsParamsWithTimeout(timeout time.Duration) *ListExtensionsParams {
	var ()
	return &ListExtensionsParams{

		timeout: timeout,
	}
}

// NewListExtensionsParamsWithContext creates a new ListExtensionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListExtensionsParamsWithContext(ctx context.Context) *ListExtensionsParams {
	var ()
	return &ListExtensionsParams{

		Context: ctx,
	}
}

// NewListExtensionsParamsWithHTTPClient creates a new ListExtensionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListExtensionsParamsWithHTTPClient(client *http.Client) *ListExtensionsParams {
	var ()
	return &ListExtensionsParams{
		HTTPClient: client,
	}
}

/*ListExtensionsParams contains all the parameters to send to the API endpoint
for the list extensions operation typically these are written to a http.Request
*/
type ListExtensionsParams struct {

	/*ExtensionObjectID
	  The id of the extension object you want to filter by.

	*/
	ExtensionObjectID *string
	/*ExtensionSchemaID
	  Filter the extensions by extension vendor id.

	*/
	ExtensionSchemaID *string
	/*Include
	  Array of additional details to include.

	*/
	Include []string
	/*Query
	  Filters the result, showing only the extensions whose name matches the query.

	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list extensions params
func (o *ListExtensionsParams) WithTimeout(timeout time.Duration) *ListExtensionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list extensions params
func (o *ListExtensionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list extensions params
func (o *ListExtensionsParams) WithContext(ctx context.Context) *ListExtensionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list extensions params
func (o *ListExtensionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list extensions params
func (o *ListExtensionsParams) WithHTTPClient(client *http.Client) *ListExtensionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list extensions params
func (o *ListExtensionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExtensionObjectID adds the extensionObjectID to the list extensions params
func (o *ListExtensionsParams) WithExtensionObjectID(extensionObjectID *string) *ListExtensionsParams {
	o.SetExtensionObjectID(extensionObjectID)
	return o
}

// SetExtensionObjectID adds the extensionObjectId to the list extensions params
func (o *ListExtensionsParams) SetExtensionObjectID(extensionObjectID *string) {
	o.ExtensionObjectID = extensionObjectID
}

// WithExtensionSchemaID adds the extensionSchemaID to the list extensions params
func (o *ListExtensionsParams) WithExtensionSchemaID(extensionSchemaID *string) *ListExtensionsParams {
	o.SetExtensionSchemaID(extensionSchemaID)
	return o
}

// SetExtensionSchemaID adds the extensionSchemaId to the list extensions params
func (o *ListExtensionsParams) SetExtensionSchemaID(extensionSchemaID *string) {
	o.ExtensionSchemaID = extensionSchemaID
}

// WithInclude adds the include to the list extensions params
func (o *ListExtensionsParams) WithInclude(include []string) *ListExtensionsParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the list extensions params
func (o *ListExtensionsParams) SetInclude(include []string) {
	o.Include = include
}

// WithQuery adds the query to the list extensions params
func (o *ListExtensionsParams) WithQuery(query *string) *ListExtensionsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list extensions params
func (o *ListExtensionsParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *ListExtensionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExtensionObjectID != nil {

		// query param extension_object_id
		var qrExtensionObjectID string
		if o.ExtensionObjectID != nil {
			qrExtensionObjectID = *o.ExtensionObjectID
		}
		qExtensionObjectID := qrExtensionObjectID
		if qExtensionObjectID != "" {
			if err := r.SetQueryParam("extension_object_id", qExtensionObjectID); err != nil {
				return err
			}
		}

	}

	if o.ExtensionSchemaID != nil {

		// query param extension_schema_id
		var qrExtensionSchemaID string
		if o.ExtensionSchemaID != nil {
			qrExtensionSchemaID = *o.ExtensionSchemaID
		}
		qExtensionSchemaID := qrExtensionSchemaID
		if qExtensionSchemaID != "" {
			if err := r.SetQueryParam("extension_schema_id", qExtensionSchemaID); err != nil {
				return err
			}
		}

	}

	valuesInclude := o.Include

	joinedInclude := swag.JoinByFormat(valuesInclude, "multi")
	// query array param include[]
	if err := r.SetQueryParam("include[]", joinedInclude...); err != nil {
		return err
	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
