// Code generated by go-swagger; DO NOT EDIT.

package extensions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// DeleteExtensionReader is a Reader for the DeleteExtension structure.
type DeleteExtensionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteExtensionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteExtensionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteExtensionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteExtensionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteExtensionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteExtensionNoContent creates a DeleteExtensionNoContent with default headers values
func NewDeleteExtensionNoContent() *DeleteExtensionNoContent {
	return &DeleteExtensionNoContent{}
}

/*DeleteExtensionNoContent handles this case with default header values.

The extension was deleted successfully.
*/
type DeleteExtensionNoContent struct {
}

func (o *DeleteExtensionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /extensions/{id}][%d] deleteExtensionNoContent ", 204)
}

func (o *DeleteExtensionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteExtensionUnauthorized creates a DeleteExtensionUnauthorized with default headers values
func NewDeleteExtensionUnauthorized() *DeleteExtensionUnauthorized {
	return &DeleteExtensionUnauthorized{}
}

/*DeleteExtensionUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type DeleteExtensionUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteExtensionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /extensions/{id}][%d] deleteExtensionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteExtensionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExtensionForbidden creates a DeleteExtensionForbidden with default headers values
func NewDeleteExtensionForbidden() *DeleteExtensionForbidden {
	return &DeleteExtensionForbidden{}
}

/*DeleteExtensionForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type DeleteExtensionForbidden struct {
	Payload *models.Error
}

func (o *DeleteExtensionForbidden) Error() string {
	return fmt.Sprintf("[DELETE /extensions/{id}][%d] deleteExtensionForbidden  %+v", 403, o.Payload)
}

func (o *DeleteExtensionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteExtensionNotFound creates a DeleteExtensionNotFound with default headers values
func NewDeleteExtensionNotFound() *DeleteExtensionNotFound {
	return &DeleteExtensionNotFound{}
}

/*DeleteExtensionNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteExtensionNotFound struct {
	Payload *models.Error
}

func (o *DeleteExtensionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /extensions/{id}][%d] deleteExtensionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteExtensionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
