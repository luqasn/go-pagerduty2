// Code generated by go-swagger; DO NOT EDIT.

package vendors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListVendorsReader is a Reader for the ListVendors structure.
type ListVendorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListVendorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListVendorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListVendorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListVendorsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListVendorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListVendorsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListVendorsOK creates a ListVendorsOK with default headers values
func NewListVendorsOK() *ListVendorsOK {
	return &ListVendorsOK{}
}

/*ListVendorsOK handles this case with default header values.

A paginated array of vendors.
*/
type ListVendorsOK struct {
	Payload *models.ListVendorsOKBody
}

func (o *ListVendorsOK) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] listVendorsOK  %+v", 200, o.Payload)
}

func (o *ListVendorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListVendorsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVendorsBadRequest creates a ListVendorsBadRequest with default headers values
func NewListVendorsBadRequest() *ListVendorsBadRequest {
	return &ListVendorsBadRequest{}
}

/*ListVendorsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListVendorsBadRequest struct {
	Payload *models.Error
}

func (o *ListVendorsBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] listVendorsBadRequest  %+v", 400, o.Payload)
}

func (o *ListVendorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVendorsUnauthorized creates a ListVendorsUnauthorized with default headers values
func NewListVendorsUnauthorized() *ListVendorsUnauthorized {
	return &ListVendorsUnauthorized{}
}

/*ListVendorsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListVendorsUnauthorized struct {
	Payload *models.Error
}

func (o *ListVendorsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] listVendorsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListVendorsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVendorsForbidden creates a ListVendorsForbidden with default headers values
func NewListVendorsForbidden() *ListVendorsForbidden {
	return &ListVendorsForbidden{}
}

/*ListVendorsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListVendorsForbidden struct {
	Payload *models.Error
}

func (o *ListVendorsForbidden) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] listVendorsForbidden  %+v", 403, o.Payload)
}

func (o *ListVendorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVendorsTooManyRequests creates a ListVendorsTooManyRequests with default headers values
func NewListVendorsTooManyRequests() *ListVendorsTooManyRequests {
	return &ListVendorsTooManyRequests{}
}

/*ListVendorsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListVendorsTooManyRequests struct {
	Payload *models.Error
}

func (o *ListVendorsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] listVendorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListVendorsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
