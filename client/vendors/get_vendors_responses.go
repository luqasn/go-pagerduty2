// Code generated by go-swagger; DO NOT EDIT.

package vendors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetVendorsReader is a Reader for the GetVendors structure.
type GetVendorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVendorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVendorsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetVendorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetVendorsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetVendorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetVendorsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVendorsOK creates a GetVendorsOK with default headers values
func NewGetVendorsOK() *GetVendorsOK {
	return &GetVendorsOK{}
}

/*GetVendorsOK handles this case with default header values.

A paginated array of vendors.
*/
type GetVendorsOK struct {
	Payload *models.GetVendorsOKBody
}

func (o *GetVendorsOK) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] getVendorsOK  %+v", 200, o.Payload)
}

func (o *GetVendorsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetVendorsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsBadRequest creates a GetVendorsBadRequest with default headers values
func NewGetVendorsBadRequest() *GetVendorsBadRequest {
	return &GetVendorsBadRequest{}
}

/*GetVendorsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetVendorsBadRequest struct {
	Payload *models.Error
}

func (o *GetVendorsBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] getVendorsBadRequest  %+v", 400, o.Payload)
}

func (o *GetVendorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsUnauthorized creates a GetVendorsUnauthorized with default headers values
func NewGetVendorsUnauthorized() *GetVendorsUnauthorized {
	return &GetVendorsUnauthorized{}
}

/*GetVendorsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetVendorsUnauthorized struct {
	Payload *models.Error
}

func (o *GetVendorsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] getVendorsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVendorsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsForbidden creates a GetVendorsForbidden with default headers values
func NewGetVendorsForbidden() *GetVendorsForbidden {
	return &GetVendorsForbidden{}
}

/*GetVendorsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetVendorsForbidden struct {
	Payload *models.Error
}

func (o *GetVendorsForbidden) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] getVendorsForbidden  %+v", 403, o.Payload)
}

func (o *GetVendorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsTooManyRequests creates a GetVendorsTooManyRequests with default headers values
func NewGetVendorsTooManyRequests() *GetVendorsTooManyRequests {
	return &GetVendorsTooManyRequests{}
}

/*GetVendorsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetVendorsTooManyRequests struct {
	Payload *models.Error
}

func (o *GetVendorsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendors][%d] getVendorsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetVendorsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
