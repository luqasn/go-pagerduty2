// Code generated by go-swagger; DO NOT EDIT.

package vendors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetVendorsIDReader is a Reader for the GetVendorsID structure.
type GetVendorsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVendorsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVendorsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetVendorsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetVendorsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetVendorsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetVendorsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetVendorsIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVendorsIDOK creates a GetVendorsIDOK with default headers values
func NewGetVendorsIDOK() *GetVendorsIDOK {
	return &GetVendorsIDOK{}
}

/*GetVendorsIDOK handles this case with default header values.

The vendor requested
*/
type GetVendorsIDOK struct {
	Payload *models.GetVendorsIDOKBody
}

func (o *GetVendorsIDOK) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorsIdOK  %+v", 200, o.Payload)
}

func (o *GetVendorsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetVendorsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsIDBadRequest creates a GetVendorsIDBadRequest with default headers values
func NewGetVendorsIDBadRequest() *GetVendorsIDBadRequest {
	return &GetVendorsIDBadRequest{}
}

/*GetVendorsIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetVendorsIDBadRequest struct {
	Payload *models.Error
}

func (o *GetVendorsIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorsIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetVendorsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsIDUnauthorized creates a GetVendorsIDUnauthorized with default headers values
func NewGetVendorsIDUnauthorized() *GetVendorsIDUnauthorized {
	return &GetVendorsIDUnauthorized{}
}

/*GetVendorsIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetVendorsIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetVendorsIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVendorsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsIDForbidden creates a GetVendorsIDForbidden with default headers values
func NewGetVendorsIDForbidden() *GetVendorsIDForbidden {
	return &GetVendorsIDForbidden{}
}

/*GetVendorsIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetVendorsIDForbidden struct {
	Payload *models.Error
}

func (o *GetVendorsIDForbidden) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorsIdForbidden  %+v", 403, o.Payload)
}

func (o *GetVendorsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsIDNotFound creates a GetVendorsIDNotFound with default headers values
func NewGetVendorsIDNotFound() *GetVendorsIDNotFound {
	return &GetVendorsIDNotFound{}
}

/*GetVendorsIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetVendorsIDNotFound struct {
	Payload *models.Error
}

func (o *GetVendorsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetVendorsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorsIDTooManyRequests creates a GetVendorsIDTooManyRequests with default headers values
func NewGetVendorsIDTooManyRequests() *GetVendorsIDTooManyRequests {
	return &GetVendorsIDTooManyRequests{}
}

/*GetVendorsIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetVendorsIDTooManyRequests struct {
	Payload *models.Error
}

func (o *GetVendorsIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorsIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetVendorsIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
