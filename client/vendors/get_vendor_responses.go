// Code generated by go-swagger; DO NOT EDIT.

package vendors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetVendorReader is a Reader for the GetVendor structure.
type GetVendorReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVendorReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetVendorOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetVendorBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetVendorUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetVendorForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetVendorNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetVendorTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetVendorOK creates a GetVendorOK with default headers values
func NewGetVendorOK() *GetVendorOK {
	return &GetVendorOK{}
}

/*GetVendorOK handles this case with default header values.

The vendor requested
*/
type GetVendorOK struct {
	Payload *models.GetVendorOKBody
}

func (o *GetVendorOK) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorOK  %+v", 200, o.Payload)
}

func (o *GetVendorOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetVendorOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorBadRequest creates a GetVendorBadRequest with default headers values
func NewGetVendorBadRequest() *GetVendorBadRequest {
	return &GetVendorBadRequest{}
}

/*GetVendorBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetVendorBadRequest struct {
	Payload *models.Error
}

func (o *GetVendorBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorBadRequest  %+v", 400, o.Payload)
}

func (o *GetVendorBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorUnauthorized creates a GetVendorUnauthorized with default headers values
func NewGetVendorUnauthorized() *GetVendorUnauthorized {
	return &GetVendorUnauthorized{}
}

/*GetVendorUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetVendorUnauthorized struct {
	Payload *models.Error
}

func (o *GetVendorUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorUnauthorized  %+v", 401, o.Payload)
}

func (o *GetVendorUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorForbidden creates a GetVendorForbidden with default headers values
func NewGetVendorForbidden() *GetVendorForbidden {
	return &GetVendorForbidden{}
}

/*GetVendorForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetVendorForbidden struct {
	Payload *models.Error
}

func (o *GetVendorForbidden) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorForbidden  %+v", 403, o.Payload)
}

func (o *GetVendorForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorNotFound creates a GetVendorNotFound with default headers values
func NewGetVendorNotFound() *GetVendorNotFound {
	return &GetVendorNotFound{}
}

/*GetVendorNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetVendorNotFound struct {
	Payload *models.Error
}

func (o *GetVendorNotFound) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorNotFound  %+v", 404, o.Payload)
}

func (o *GetVendorNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVendorTooManyRequests creates a GetVendorTooManyRequests with default headers values
func NewGetVendorTooManyRequests() *GetVendorTooManyRequests {
	return &GetVendorTooManyRequests{}
}

/*GetVendorTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetVendorTooManyRequests struct {
	Payload *models.Error
}

func (o *GetVendorTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendors/{id}][%d] getVendorTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetVendorTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
