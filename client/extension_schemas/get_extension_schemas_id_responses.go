// Code generated by go-swagger; DO NOT EDIT.

package extension_schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetExtensionSchemasIDReader is a Reader for the GetExtensionSchemasID structure.
type GetExtensionSchemasIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionSchemasIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetExtensionSchemasIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetExtensionSchemasIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetExtensionSchemasIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetExtensionSchemasIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetExtensionSchemasIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetExtensionSchemasIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExtensionSchemasIDOK creates a GetExtensionSchemasIDOK with default headers values
func NewGetExtensionSchemasIDOK() *GetExtensionSchemasIDOK {
	return &GetExtensionSchemasIDOK{}
}

/*GetExtensionSchemasIDOK handles this case with default header values.

The extension vendor requested
*/
type GetExtensionSchemasIDOK struct {
	Payload *models.GetExtensionSchemasIDOKBody
}

func (o *GetExtensionSchemasIDOK) Error() string {
	return fmt.Sprintf("[GET /extension_schemas/{id}][%d] getExtensionSchemasIdOK  %+v", 200, o.Payload)
}

func (o *GetExtensionSchemasIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetExtensionSchemasIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasIDBadRequest creates a GetExtensionSchemasIDBadRequest with default headers values
func NewGetExtensionSchemasIDBadRequest() *GetExtensionSchemasIDBadRequest {
	return &GetExtensionSchemasIDBadRequest{}
}

/*GetExtensionSchemasIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetExtensionSchemasIDBadRequest struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /extension_schemas/{id}][%d] getExtensionSchemasIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetExtensionSchemasIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasIDUnauthorized creates a GetExtensionSchemasIDUnauthorized with default headers values
func NewGetExtensionSchemasIDUnauthorized() *GetExtensionSchemasIDUnauthorized {
	return &GetExtensionSchemasIDUnauthorized{}
}

/*GetExtensionSchemasIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetExtensionSchemasIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extension_schemas/{id}][%d] getExtensionSchemasIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExtensionSchemasIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasIDForbidden creates a GetExtensionSchemasIDForbidden with default headers values
func NewGetExtensionSchemasIDForbidden() *GetExtensionSchemasIDForbidden {
	return &GetExtensionSchemasIDForbidden{}
}

/*GetExtensionSchemasIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetExtensionSchemasIDForbidden struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasIDForbidden) Error() string {
	return fmt.Sprintf("[GET /extension_schemas/{id}][%d] getExtensionSchemasIdForbidden  %+v", 403, o.Payload)
}

func (o *GetExtensionSchemasIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasIDNotFound creates a GetExtensionSchemasIDNotFound with default headers values
func NewGetExtensionSchemasIDNotFound() *GetExtensionSchemasIDNotFound {
	return &GetExtensionSchemasIDNotFound{}
}

/*GetExtensionSchemasIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetExtensionSchemasIDNotFound struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasIDNotFound) Error() string {
	return fmt.Sprintf("[GET /extension_schemas/{id}][%d] getExtensionSchemasIdNotFound  %+v", 404, o.Payload)
}

func (o *GetExtensionSchemasIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasIDTooManyRequests creates a GetExtensionSchemasIDTooManyRequests with default headers values
func NewGetExtensionSchemasIDTooManyRequests() *GetExtensionSchemasIDTooManyRequests {
	return &GetExtensionSchemasIDTooManyRequests{}
}

/*GetExtensionSchemasIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetExtensionSchemasIDTooManyRequests struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /extension_schemas/{id}][%d] getExtensionSchemasIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExtensionSchemasIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
