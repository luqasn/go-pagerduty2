// Code generated by go-swagger; DO NOT EDIT.

package extension_schemas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetExtensionSchemasReader is a Reader for the GetExtensionSchemas structure.
type GetExtensionSchemasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetExtensionSchemasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetExtensionSchemasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetExtensionSchemasBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetExtensionSchemasUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetExtensionSchemasForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetExtensionSchemasTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetExtensionSchemasOK creates a GetExtensionSchemasOK with default headers values
func NewGetExtensionSchemasOK() *GetExtensionSchemasOK {
	return &GetExtensionSchemasOK{}
}

/*GetExtensionSchemasOK handles this case with default header values.

A paginated array of extension schemas.
*/
type GetExtensionSchemasOK struct {
	Payload *models.GetExtensionSchemasOKBody
}

func (o *GetExtensionSchemasOK) Error() string {
	return fmt.Sprintf("[GET /extension_schemas][%d] getExtensionSchemasOK  %+v", 200, o.Payload)
}

func (o *GetExtensionSchemasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetExtensionSchemasOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasBadRequest creates a GetExtensionSchemasBadRequest with default headers values
func NewGetExtensionSchemasBadRequest() *GetExtensionSchemasBadRequest {
	return &GetExtensionSchemasBadRequest{}
}

/*GetExtensionSchemasBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetExtensionSchemasBadRequest struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasBadRequest) Error() string {
	return fmt.Sprintf("[GET /extension_schemas][%d] getExtensionSchemasBadRequest  %+v", 400, o.Payload)
}

func (o *GetExtensionSchemasBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasUnauthorized creates a GetExtensionSchemasUnauthorized with default headers values
func NewGetExtensionSchemasUnauthorized() *GetExtensionSchemasUnauthorized {
	return &GetExtensionSchemasUnauthorized{}
}

/*GetExtensionSchemasUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetExtensionSchemasUnauthorized struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasUnauthorized) Error() string {
	return fmt.Sprintf("[GET /extension_schemas][%d] getExtensionSchemasUnauthorized  %+v", 401, o.Payload)
}

func (o *GetExtensionSchemasUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasForbidden creates a GetExtensionSchemasForbidden with default headers values
func NewGetExtensionSchemasForbidden() *GetExtensionSchemasForbidden {
	return &GetExtensionSchemasForbidden{}
}

/*GetExtensionSchemasForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetExtensionSchemasForbidden struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasForbidden) Error() string {
	return fmt.Sprintf("[GET /extension_schemas][%d] getExtensionSchemasForbidden  %+v", 403, o.Payload)
}

func (o *GetExtensionSchemasForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetExtensionSchemasTooManyRequests creates a GetExtensionSchemasTooManyRequests with default headers values
func NewGetExtensionSchemasTooManyRequests() *GetExtensionSchemasTooManyRequests {
	return &GetExtensionSchemasTooManyRequests{}
}

/*GetExtensionSchemasTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetExtensionSchemasTooManyRequests struct {
	Payload *models.Error
}

func (o *GetExtensionSchemasTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /extension_schemas][%d] getExtensionSchemasTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetExtensionSchemasTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
