// Code generated by go-swagger; DO NOT EDIT.

package escalation_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListEscalationPoliciesParams creates a new ListEscalationPoliciesParams object
// with the default values initialized.
func NewListEscalationPoliciesParams() *ListEscalationPoliciesParams {
	var (
		sortByDefault = string("name")
	)
	return &ListEscalationPoliciesParams{
		SortBy: &sortByDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListEscalationPoliciesParamsWithTimeout creates a new ListEscalationPoliciesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListEscalationPoliciesParamsWithTimeout(timeout time.Duration) *ListEscalationPoliciesParams {
	var (
		sortByDefault = string("name")
	)
	return &ListEscalationPoliciesParams{
		SortBy: &sortByDefault,

		timeout: timeout,
	}
}

// NewListEscalationPoliciesParamsWithContext creates a new ListEscalationPoliciesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListEscalationPoliciesParamsWithContext(ctx context.Context) *ListEscalationPoliciesParams {
	var (
		sortByDefault = string("name")
	)
	return &ListEscalationPoliciesParams{
		SortBy: &sortByDefault,

		Context: ctx,
	}
}

// NewListEscalationPoliciesParamsWithHTTPClient creates a new ListEscalationPoliciesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListEscalationPoliciesParamsWithHTTPClient(client *http.Client) *ListEscalationPoliciesParams {
	var (
		sortByDefault = string("name")
	)
	return &ListEscalationPoliciesParams{
		SortBy:     &sortByDefault,
		HTTPClient: client,
	}
}

/*ListEscalationPoliciesParams contains all the parameters to send to the API endpoint
for the list escalation policies operation typically these are written to a http.Request
*/
type ListEscalationPoliciesParams struct {

	/*Include
	  Array of additional details to include.

	*/
	Include []string
	/*Query
	  Filters the results, showing only the escalation policies whose names contain the query.

	*/
	Query *string
	/*SortBy
	  Used to specify the field you wish to sort the results on.

	*/
	SortBy *string
	/*TeamIds
	  An array of team IDs. Only results related to these teams will be returned. Account must have the `teams` ability to use this parameter.

	*/
	TeamIds []string
	/*UserIds
	  Filters the results, showing only escalation policies on which any of the users is a target.

	*/
	UserIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithTimeout(timeout time.Duration) *ListEscalationPoliciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithContext(ctx context.Context) *ListEscalationPoliciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithHTTPClient(client *http.Client) *ListEscalationPoliciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInclude adds the include to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithInclude(include []string) *ListEscalationPoliciesParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetInclude(include []string) {
	o.Include = include
}

// WithQuery adds the query to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithQuery(query *string) *ListEscalationPoliciesParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetQuery(query *string) {
	o.Query = query
}

// WithSortBy adds the sortBy to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithSortBy(sortBy *string) *ListEscalationPoliciesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithTeamIds adds the teamIds to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithTeamIds(teamIds []string) *ListEscalationPoliciesParams {
	o.SetTeamIds(teamIds)
	return o
}

// SetTeamIds adds the teamIds to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetTeamIds(teamIds []string) {
	o.TeamIds = teamIds
}

// WithUserIds adds the userIds to the list escalation policies params
func (o *ListEscalationPoliciesParams) WithUserIds(userIds []string) *ListEscalationPoliciesParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the list escalation policies params
func (o *ListEscalationPoliciesParams) SetUserIds(userIds []string) {
	o.UserIds = userIds
}

// WriteToRequest writes these params to a swagger request
func (o *ListEscalationPoliciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesInclude := o.Include

	joinedInclude := swag.JoinByFormat(valuesInclude, "multi")
	// query array param include[]
	if err := r.SetQueryParam("include[]", joinedInclude...); err != nil {
		return err
	}

	if o.Query != nil {

		// query param query
		var qrQuery string
		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {
			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sort_by
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sort_by", qSortBy); err != nil {
				return err
			}
		}

	}

	valuesTeamIds := o.TeamIds

	joinedTeamIds := swag.JoinByFormat(valuesTeamIds, "multi")
	// query array param team_ids[]
	if err := r.SetQueryParam("team_ids[]", joinedTeamIds...); err != nil {
		return err
	}

	valuesUserIds := o.UserIds

	joinedUserIds := swag.JoinByFormat(valuesUserIds, "multi")
	// query array param user_ids[]
	if err := r.SetQueryParam("user_ids[]", joinedUserIds...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
