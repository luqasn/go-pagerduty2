// Code generated by go-swagger; DO NOT EDIT.

package escalation_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new escalation policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for escalation policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteEscalationPoliciesID deletes an escalation policy

Deletes an existing escalation policy and rules. The escalation policy must not be in use by any services.
*/
func (a *Client) DeleteEscalationPoliciesID(params *DeleteEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEscalationPoliciesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEscalationPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEscalationPoliciesID",
		Method:             "DELETE",
		PathPattern:        "/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEscalationPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEscalationPoliciesIDNoContent), nil

}

/*
GetEscalationPolicies lists escalation policies

List all of the existing escalation policies.
*/
func (a *Client) GetEscalationPolicies(params *GetEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEscalationPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEscalationPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEscalationPolicies",
		Method:             "GET",
		PathPattern:        "/escalation_policies",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEscalationPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEscalationPoliciesOK), nil

}

/*
GetEscalationPoliciesID gets an escalation policy

Get information about an existing escalation policy and its rules.
*/
func (a *Client) GetEscalationPoliciesID(params *GetEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEscalationPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEscalationPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEscalationPoliciesID",
		Method:             "GET",
		PathPattern:        "/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEscalationPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEscalationPoliciesIDOK), nil

}

/*
PostEscalationPolicies creates an escalation policy

Creates a new escalation policy. There must be at least one existing escalation rule added to create a new escalation policy.
*/
func (a *Client) PostEscalationPolicies(params *PostEscalationPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*PostEscalationPoliciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEscalationPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEscalationPolicies",
		Method:             "POST",
		PathPattern:        "/escalation_policies",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostEscalationPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEscalationPoliciesCreated), nil

}

/*
PutEscalationPoliciesID updates an escalation policy

Updates an existing escalation policy and rules.
*/
func (a *Client) PutEscalationPoliciesID(params *PutEscalationPoliciesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutEscalationPoliciesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEscalationPoliciesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEscalationPoliciesID",
		Method:             "PUT",
		PathPattern:        "/escalation_policies/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutEscalationPoliciesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEscalationPoliciesIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
