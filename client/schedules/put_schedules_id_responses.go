// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutSchedulesIDReader is a Reader for the PutSchedulesID structure.
type PutSchedulesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSchedulesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutSchedulesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutSchedulesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutSchedulesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutSchedulesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutSchedulesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutSchedulesIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutSchedulesIDOK creates a PutSchedulesIDOK with default headers values
func NewPutSchedulesIDOK() *PutSchedulesIDOK {
	return &PutSchedulesIDOK{}
}

/*PutSchedulesIDOK handles this case with default header values.

The updated schedule.
*/
type PutSchedulesIDOK struct {
	Payload *models.PutSchedulesIDOKBody
}

func (o *PutSchedulesIDOK) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] putSchedulesIdOK  %+v", 200, o.Payload)
}

func (o *PutSchedulesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutSchedulesIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSchedulesIDBadRequest creates a PutSchedulesIDBadRequest with default headers values
func NewPutSchedulesIDBadRequest() *PutSchedulesIDBadRequest {
	return &PutSchedulesIDBadRequest{}
}

/*PutSchedulesIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutSchedulesIDBadRequest struct {
	Payload *models.Error
}

func (o *PutSchedulesIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] putSchedulesIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutSchedulesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSchedulesIDUnauthorized creates a PutSchedulesIDUnauthorized with default headers values
func NewPutSchedulesIDUnauthorized() *PutSchedulesIDUnauthorized {
	return &PutSchedulesIDUnauthorized{}
}

/*PutSchedulesIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutSchedulesIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutSchedulesIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] putSchedulesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutSchedulesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSchedulesIDForbidden creates a PutSchedulesIDForbidden with default headers values
func NewPutSchedulesIDForbidden() *PutSchedulesIDForbidden {
	return &PutSchedulesIDForbidden{}
}

/*PutSchedulesIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutSchedulesIDForbidden struct {
	Payload *models.Error
}

func (o *PutSchedulesIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] putSchedulesIdForbidden  %+v", 403, o.Payload)
}

func (o *PutSchedulesIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSchedulesIDNotFound creates a PutSchedulesIDNotFound with default headers values
func NewPutSchedulesIDNotFound() *PutSchedulesIDNotFound {
	return &PutSchedulesIDNotFound{}
}

/*PutSchedulesIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutSchedulesIDNotFound struct {
	Payload *models.Error
}

func (o *PutSchedulesIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] putSchedulesIdNotFound  %+v", 404, o.Payload)
}

func (o *PutSchedulesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSchedulesIDTooManyRequests creates a PutSchedulesIDTooManyRequests with default headers values
func NewPutSchedulesIDTooManyRequests() *PutSchedulesIDTooManyRequests {
	return &PutSchedulesIDTooManyRequests{}
}

/*PutSchedulesIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutSchedulesIDTooManyRequests struct {
	Payload *models.Error
}

func (o *PutSchedulesIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] putSchedulesIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutSchedulesIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
