// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PreviewScheduleReader is a Reader for the PreviewSchedule structure.
type PreviewScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PreviewScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPreviewScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPreviewScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPreviewScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPreviewScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPreviewScheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPreviewScheduleOK creates a PreviewScheduleOK with default headers values
func NewPreviewScheduleOK() *PreviewScheduleOK {
	return &PreviewScheduleOK{}
}

/*PreviewScheduleOK handles this case with default header values.

What the schedule will look like if posted.
*/
type PreviewScheduleOK struct {
	Payload *models.PreviewScheduleOKBody
}

func (o *PreviewScheduleOK) Error() string {
	return fmt.Sprintf("[POST /schedules/preview][%d] previewScheduleOK  %+v", 200, o.Payload)
}

func (o *PreviewScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PreviewScheduleOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreviewScheduleBadRequest creates a PreviewScheduleBadRequest with default headers values
func NewPreviewScheduleBadRequest() *PreviewScheduleBadRequest {
	return &PreviewScheduleBadRequest{}
}

/*PreviewScheduleBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PreviewScheduleBadRequest struct {
	Payload *models.Error
}

func (o *PreviewScheduleBadRequest) Error() string {
	return fmt.Sprintf("[POST /schedules/preview][%d] previewScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *PreviewScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreviewScheduleUnauthorized creates a PreviewScheduleUnauthorized with default headers values
func NewPreviewScheduleUnauthorized() *PreviewScheduleUnauthorized {
	return &PreviewScheduleUnauthorized{}
}

/*PreviewScheduleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PreviewScheduleUnauthorized struct {
	Payload *models.Error
}

func (o *PreviewScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /schedules/preview][%d] previewScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *PreviewScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreviewScheduleForbidden creates a PreviewScheduleForbidden with default headers values
func NewPreviewScheduleForbidden() *PreviewScheduleForbidden {
	return &PreviewScheduleForbidden{}
}

/*PreviewScheduleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PreviewScheduleForbidden struct {
	Payload *models.Error
}

func (o *PreviewScheduleForbidden) Error() string {
	return fmt.Sprintf("[POST /schedules/preview][%d] previewScheduleForbidden  %+v", 403, o.Payload)
}

func (o *PreviewScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPreviewScheduleTooManyRequests creates a PreviewScheduleTooManyRequests with default headers values
func NewPreviewScheduleTooManyRequests() *PreviewScheduleTooManyRequests {
	return &PreviewScheduleTooManyRequests{}
}

/*PreviewScheduleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PreviewScheduleTooManyRequests struct {
	Payload *models.Error
}

func (o *PreviewScheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /schedules/preview][%d] previewScheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *PreviewScheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
