// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListSchedulesReader is a Reader for the ListSchedules structure.
type ListSchedulesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListSchedulesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListSchedulesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListSchedulesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListSchedulesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListSchedulesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListSchedulesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListSchedulesOK creates a ListSchedulesOK with default headers values
func NewListSchedulesOK() *ListSchedulesOK {
	return &ListSchedulesOK{}
}

/*ListSchedulesOK handles this case with default header values.

A paginated array of schedule objects.
*/
type ListSchedulesOK struct {
	Payload *models.ListSchedulesOKBody
}

func (o *ListSchedulesOK) Error() string {
	return fmt.Sprintf("[GET /schedules][%d] listSchedulesOK  %+v", 200, o.Payload)
}

func (o *ListSchedulesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListSchedulesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSchedulesBadRequest creates a ListSchedulesBadRequest with default headers values
func NewListSchedulesBadRequest() *ListSchedulesBadRequest {
	return &ListSchedulesBadRequest{}
}

/*ListSchedulesBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListSchedulesBadRequest struct {
	Payload *models.Error
}

func (o *ListSchedulesBadRequest) Error() string {
	return fmt.Sprintf("[GET /schedules][%d] listSchedulesBadRequest  %+v", 400, o.Payload)
}

func (o *ListSchedulesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSchedulesUnauthorized creates a ListSchedulesUnauthorized with default headers values
func NewListSchedulesUnauthorized() *ListSchedulesUnauthorized {
	return &ListSchedulesUnauthorized{}
}

/*ListSchedulesUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListSchedulesUnauthorized struct {
	Payload *models.Error
}

func (o *ListSchedulesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /schedules][%d] listSchedulesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListSchedulesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSchedulesForbidden creates a ListSchedulesForbidden with default headers values
func NewListSchedulesForbidden() *ListSchedulesForbidden {
	return &ListSchedulesForbidden{}
}

/*ListSchedulesForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListSchedulesForbidden struct {
	Payload *models.Error
}

func (o *ListSchedulesForbidden) Error() string {
	return fmt.Sprintf("[GET /schedules][%d] listSchedulesForbidden  %+v", 403, o.Payload)
}

func (o *ListSchedulesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListSchedulesTooManyRequests creates a ListSchedulesTooManyRequests with default headers values
func NewListSchedulesTooManyRequests() *ListSchedulesTooManyRequests {
	return &ListSchedulesTooManyRequests{}
}

/*ListSchedulesTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListSchedulesTooManyRequests struct {
	Payload *models.Error
}

func (o *ListSchedulesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /schedules][%d] listSchedulesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListSchedulesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
