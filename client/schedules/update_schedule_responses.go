// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// UpdateScheduleReader is a Reader for the UpdateSchedule structure.
type UpdateScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewUpdateScheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateScheduleOK creates a UpdateScheduleOK with default headers values
func NewUpdateScheduleOK() *UpdateScheduleOK {
	return &UpdateScheduleOK{}
}

/*UpdateScheduleOK handles this case with default header values.

The updated schedule.
*/
type UpdateScheduleOK struct {
	Payload *models.UpdateScheduleOKBody
}

func (o *UpdateScheduleOK) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] updateScheduleOK  %+v", 200, o.Payload)
}

func (o *UpdateScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateScheduleOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleBadRequest creates a UpdateScheduleBadRequest with default headers values
func NewUpdateScheduleBadRequest() *UpdateScheduleBadRequest {
	return &UpdateScheduleBadRequest{}
}

/*UpdateScheduleBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type UpdateScheduleBadRequest struct {
	Payload *models.Error
}

func (o *UpdateScheduleBadRequest) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] updateScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleUnauthorized creates a UpdateScheduleUnauthorized with default headers values
func NewUpdateScheduleUnauthorized() *UpdateScheduleUnauthorized {
	return &UpdateScheduleUnauthorized{}
}

/*UpdateScheduleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type UpdateScheduleUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] updateScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleForbidden creates a UpdateScheduleForbidden with default headers values
func NewUpdateScheduleForbidden() *UpdateScheduleForbidden {
	return &UpdateScheduleForbidden{}
}

/*UpdateScheduleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type UpdateScheduleForbidden struct {
	Payload *models.Error
}

func (o *UpdateScheduleForbidden) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] updateScheduleForbidden  %+v", 403, o.Payload)
}

func (o *UpdateScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleNotFound creates a UpdateScheduleNotFound with default headers values
func NewUpdateScheduleNotFound() *UpdateScheduleNotFound {
	return &UpdateScheduleNotFound{}
}

/*UpdateScheduleNotFound handles this case with default header values.

The requested resource was not found.
*/
type UpdateScheduleNotFound struct {
	Payload *models.Error
}

func (o *UpdateScheduleNotFound) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] updateScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleTooManyRequests creates a UpdateScheduleTooManyRequests with default headers values
func NewUpdateScheduleTooManyRequests() *UpdateScheduleTooManyRequests {
	return &UpdateScheduleTooManyRequests{}
}

/*UpdateScheduleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type UpdateScheduleTooManyRequests struct {
	Payload *models.Error
}

func (o *UpdateScheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /schedules/{id}][%d] updateScheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateScheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
