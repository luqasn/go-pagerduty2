// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// CreateScheduleReader is a Reader for the CreateSchedule structure.
type CreateScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateScheduleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewCreateScheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateScheduleCreated creates a CreateScheduleCreated with default headers values
func NewCreateScheduleCreated() *CreateScheduleCreated {
	return &CreateScheduleCreated{}
}

/*CreateScheduleCreated handles this case with default header values.

The schedule object created.
*/
type CreateScheduleCreated struct {
	Payload *models.CreateScheduleCreatedBody
}

func (o *CreateScheduleCreated) Error() string {
	return fmt.Sprintf("[POST /schedules][%d] createScheduleCreated  %+v", 201, o.Payload)
}

func (o *CreateScheduleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateScheduleCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduleBadRequest creates a CreateScheduleBadRequest with default headers values
func NewCreateScheduleBadRequest() *CreateScheduleBadRequest {
	return &CreateScheduleBadRequest{}
}

/*CreateScheduleBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type CreateScheduleBadRequest struct {
	Payload *models.Error
}

func (o *CreateScheduleBadRequest) Error() string {
	return fmt.Sprintf("[POST /schedules][%d] createScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduleUnauthorized creates a CreateScheduleUnauthorized with default headers values
func NewCreateScheduleUnauthorized() *CreateScheduleUnauthorized {
	return &CreateScheduleUnauthorized{}
}

/*CreateScheduleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type CreateScheduleUnauthorized struct {
	Payload *models.Error
}

func (o *CreateScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /schedules][%d] createScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduleForbidden creates a CreateScheduleForbidden with default headers values
func NewCreateScheduleForbidden() *CreateScheduleForbidden {
	return &CreateScheduleForbidden{}
}

/*CreateScheduleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type CreateScheduleForbidden struct {
	Payload *models.Error
}

func (o *CreateScheduleForbidden) Error() string {
	return fmt.Sprintf("[POST /schedules][%d] createScheduleForbidden  %+v", 403, o.Payload)
}

func (o *CreateScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduleTooManyRequests creates a CreateScheduleTooManyRequests with default headers values
func NewCreateScheduleTooManyRequests() *CreateScheduleTooManyRequests {
	return &CreateScheduleTooManyRequests{}
}

/*CreateScheduleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type CreateScheduleTooManyRequests struct {
	Payload *models.Error
}

func (o *CreateScheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /schedules][%d] createScheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateScheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
