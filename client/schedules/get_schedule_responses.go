// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetScheduleReader is a Reader for the GetSchedule structure.
type GetScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetScheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetScheduleOK creates a GetScheduleOK with default headers values
func NewGetScheduleOK() *GetScheduleOK {
	return &GetScheduleOK{}
}

/*GetScheduleOK handles this case with default header values.

The schedule object.
*/
type GetScheduleOK struct {
	Payload *models.GetScheduleOKBody
}

func (o *GetScheduleOK) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}][%d] getScheduleOK  %+v", 200, o.Payload)
}

func (o *GetScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetScheduleOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleBadRequest creates a GetScheduleBadRequest with default headers values
func NewGetScheduleBadRequest() *GetScheduleBadRequest {
	return &GetScheduleBadRequest{}
}

/*GetScheduleBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetScheduleBadRequest struct {
	Payload *models.Error
}

func (o *GetScheduleBadRequest) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}][%d] getScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *GetScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleUnauthorized creates a GetScheduleUnauthorized with default headers values
func NewGetScheduleUnauthorized() *GetScheduleUnauthorized {
	return &GetScheduleUnauthorized{}
}

/*GetScheduleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetScheduleUnauthorized struct {
	Payload *models.Error
}

func (o *GetScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}][%d] getScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *GetScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleForbidden creates a GetScheduleForbidden with default headers values
func NewGetScheduleForbidden() *GetScheduleForbidden {
	return &GetScheduleForbidden{}
}

/*GetScheduleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetScheduleForbidden struct {
	Payload *models.Error
}

func (o *GetScheduleForbidden) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}][%d] getScheduleForbidden  %+v", 403, o.Payload)
}

func (o *GetScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleNotFound creates a GetScheduleNotFound with default headers values
func NewGetScheduleNotFound() *GetScheduleNotFound {
	return &GetScheduleNotFound{}
}

/*GetScheduleNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetScheduleNotFound struct {
	Payload *models.Error
}

func (o *GetScheduleNotFound) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}][%d] getScheduleNotFound  %+v", 404, o.Payload)
}

func (o *GetScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleTooManyRequests creates a GetScheduleTooManyRequests with default headers values
func NewGetScheduleTooManyRequests() *GetScheduleTooManyRequests {
	return &GetScheduleTooManyRequests{}
}

/*GetScheduleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetScheduleTooManyRequests struct {
	Payload *models.Error
}

func (o *GetScheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}][%d] getScheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetScheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
