// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSchedulesIDParams creates a new GetSchedulesIDParams object
// with the default values initialized.
func NewGetSchedulesIDParams() *GetSchedulesIDParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetSchedulesIDParams{
		TimeZone: &timeZoneDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSchedulesIDParamsWithTimeout creates a new GetSchedulesIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSchedulesIDParamsWithTimeout(timeout time.Duration) *GetSchedulesIDParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetSchedulesIDParams{
		TimeZone: &timeZoneDefault,

		timeout: timeout,
	}
}

// NewGetSchedulesIDParamsWithContext creates a new GetSchedulesIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSchedulesIDParamsWithContext(ctx context.Context) *GetSchedulesIDParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetSchedulesIDParams{
		TimeZone: &timeZoneDefault,

		Context: ctx,
	}
}

// NewGetSchedulesIDParamsWithHTTPClient creates a new GetSchedulesIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSchedulesIDParamsWithHTTPClient(client *http.Client) *GetSchedulesIDParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &GetSchedulesIDParams{
		TimeZone:   &timeZoneDefault,
		HTTPClient: client,
	}
}

/*GetSchedulesIDParams contains all the parameters to send to the API endpoint
for the get schedules ID operation typically these are written to a http.Request
*/
type GetSchedulesIDParams struct {

	/*ID*/
	ID string
	/*Since
	  The start of the date range over which you want to search.

	*/
	Since *strfmt.DateTime
	/*TimeZone
	  Time zone in which dates in the result will be rendered.

	*/
	TimeZone *string
	/*Until
	  The end of the date range over which you want to search.

	*/
	Until *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get schedules ID params
func (o *GetSchedulesIDParams) WithTimeout(timeout time.Duration) *GetSchedulesIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get schedules ID params
func (o *GetSchedulesIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get schedules ID params
func (o *GetSchedulesIDParams) WithContext(ctx context.Context) *GetSchedulesIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get schedules ID params
func (o *GetSchedulesIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get schedules ID params
func (o *GetSchedulesIDParams) WithHTTPClient(client *http.Client) *GetSchedulesIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get schedules ID params
func (o *GetSchedulesIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get schedules ID params
func (o *GetSchedulesIDParams) WithID(id string) *GetSchedulesIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get schedules ID params
func (o *GetSchedulesIDParams) SetID(id string) {
	o.ID = id
}

// WithSince adds the since to the get schedules ID params
func (o *GetSchedulesIDParams) WithSince(since *strfmt.DateTime) *GetSchedulesIDParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get schedules ID params
func (o *GetSchedulesIDParams) SetSince(since *strfmt.DateTime) {
	o.Since = since
}

// WithTimeZone adds the timeZone to the get schedules ID params
func (o *GetSchedulesIDParams) WithTimeZone(timeZone *string) *GetSchedulesIDParams {
	o.SetTimeZone(timeZone)
	return o
}

// SetTimeZone adds the timeZone to the get schedules ID params
func (o *GetSchedulesIDParams) SetTimeZone(timeZone *string) {
	o.TimeZone = timeZone
}

// WithUntil adds the until to the get schedules ID params
func (o *GetSchedulesIDParams) WithUntil(until *strfmt.DateTime) *GetSchedulesIDParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the get schedules ID params
func (o *GetSchedulesIDParams) SetUntil(until *strfmt.DateTime) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *GetSchedulesIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Since != nil {

		// query param since
		var qrSince strfmt.DateTime
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := qrSince.String()
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if o.TimeZone != nil {

		// query param time_zone
		var qrTimeZone string
		if o.TimeZone != nil {
			qrTimeZone = *o.TimeZone
		}
		qTimeZone := qrTimeZone
		if qTimeZone != "" {
			if err := r.SetQueryParam("time_zone", qTimeZone); err != nil {
				return err
			}
		}

	}

	if o.Until != nil {

		// query param until
		var qrUntil strfmt.DateTime
		if o.Until != nil {
			qrUntil = *o.Until
		}
		qUntil := qrUntil.String()
		if qUntil != "" {
			if err := r.SetQueryParam("until", qUntil); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
