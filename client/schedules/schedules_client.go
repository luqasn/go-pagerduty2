// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new schedules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for schedules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSchedulesID deletes a schedule

Delete an on-call schedule.
*/
func (a *Client) DeleteSchedulesID(params *DeleteSchedulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSchedulesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSchedulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSchedulesID",
		Method:             "DELETE",
		PathPattern:        "/schedules/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSchedulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSchedulesIDNoContent), nil

}

/*
DeleteSchedulesIDOverridesOverrideID deletes an override

Remove an override. You cannot remove a past override. If the override start time is before the current time, but the end time is after the current time, the override will be truncated to the current time. If the override is truncated, the status code will be 200 OK, as opposed to a 204 No Content for a successful delete.
*/
func (a *Client) DeleteSchedulesIDOverridesOverrideID(params *DeleteSchedulesIDOverridesOverrideIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSchedulesIDOverridesOverrideIDOK, *DeleteSchedulesIDOverridesOverrideIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSchedulesIDOverridesOverrideIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSchedulesIDOverridesOverrideID",
		Method:             "DELETE",
		PathPattern:        "/schedules/{id}/overrides/{override_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSchedulesIDOverridesOverrideIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteSchedulesIDOverridesOverrideIDOK:
		return value, nil, nil
	case *DeleteSchedulesIDOverridesOverrideIDNoContent:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
GetSchedules lists schedules

List the on-call schedules.
*/
func (a *Client) GetSchedules(params *GetSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSchedules",
		Method:             "GET",
		PathPattern:        "/schedules",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchedulesOK), nil

}

/*
GetSchedulesID gets a schedule

Show detailed information about a schedule, including entries for each layer and sub-schedule.
*/
func (a *Client) GetSchedulesID(params *GetSchedulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSchedulesID",
		Method:             "GET",
		PathPattern:        "/schedules/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchedulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchedulesIDOK), nil

}

/*
GetSchedulesIDOverrides lists overrides

List overrides for a given time range.
*/
func (a *Client) GetSchedulesIDOverrides(params *GetSchedulesIDOverridesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulesIDOverridesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulesIDOverridesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSchedulesIDOverrides",
		Method:             "GET",
		PathPattern:        "/schedules/{id}/overrides",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchedulesIDOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchedulesIDOverridesOK), nil

}

/*
GetSchedulesIDUsers lists users on call

List all of the users on call in a given schedule for a given time range.
*/
func (a *Client) GetSchedulesIDUsers(params *GetSchedulesIDUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchedulesIDUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchedulesIDUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSchedulesIDUsers",
		Method:             "GET",
		PathPattern:        "/schedules/{id}/users",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchedulesIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSchedulesIDUsersOK), nil

}

/*
PostSchedules creates a schedule

Create a new on-call schedule.
*/
func (a *Client) PostSchedules(params *PostSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*PostSchedulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSchedules",
		Method:             "POST",
		PathPattern:        "/schedules",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSchedulesCreated), nil

}

/*
PostSchedulesIDOverrides creates an override

Create an override for a specific user covering the specified time range. If you create an override on top of an existing one, the last created override will have priority.
*/
func (a *Client) PostSchedulesIDOverrides(params *PostSchedulesIDOverridesParams, authInfo runtime.ClientAuthInfoWriter) (*PostSchedulesIDOverridesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSchedulesIDOverridesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSchedulesIDOverrides",
		Method:             "POST",
		PathPattern:        "/schedules/{id}/overrides",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSchedulesIDOverridesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSchedulesIDOverridesCreated), nil

}

/*
PostSchedulesPreview previews a schedule

Preview what an on-call schedule would look like without saving it.
*/
func (a *Client) PostSchedulesPreview(params *PostSchedulesPreviewParams, authInfo runtime.ClientAuthInfoWriter) (*PostSchedulesPreviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSchedulesPreviewParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSchedulesPreview",
		Method:             "POST",
		PathPattern:        "/schedules/preview",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSchedulesPreviewReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSchedulesPreviewOK), nil

}

/*
PutSchedulesID updates a schedule

Update an existing on-call schedule.
*/
func (a *Client) PutSchedulesID(params *PutSchedulesIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSchedulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSchedulesIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSchedulesID",
		Method:             "PUT",
		PathPattern:        "/schedules/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSchedulesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSchedulesIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
