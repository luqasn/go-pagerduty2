// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListOverridesParams creates a new ListOverridesParams object
// with the default values initialized.
func NewListOverridesParams() *ListOverridesParams {
	var ()
	return &ListOverridesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListOverridesParamsWithTimeout creates a new ListOverridesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListOverridesParamsWithTimeout(timeout time.Duration) *ListOverridesParams {
	var ()
	return &ListOverridesParams{

		timeout: timeout,
	}
}

// NewListOverridesParamsWithContext creates a new ListOverridesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListOverridesParamsWithContext(ctx context.Context) *ListOverridesParams {
	var ()
	return &ListOverridesParams{

		Context: ctx,
	}
}

// NewListOverridesParamsWithHTTPClient creates a new ListOverridesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListOverridesParamsWithHTTPClient(client *http.Client) *ListOverridesParams {
	var ()
	return &ListOverridesParams{
		HTTPClient: client,
	}
}

/*ListOverridesParams contains all the parameters to send to the API endpoint
for the list overrides operation typically these are written to a http.Request
*/
type ListOverridesParams struct {

	/*Editable
	  When this parameter is present, only editable overrides will be returned. The result will only include the id of the override if this parameter is present. Only future overrides are editable.

	*/
	Editable *bool
	/*ID*/
	ID string
	/*Overflow
	  Any on-call schedule entries that pass the date range bounds will be truncated at the bounds, unless the parameter overflow=true is passed. This parameter defaults to false.

	*/
	Overflow *bool
	/*Since
	  The start of the date range over which you want to search.

	*/
	Since strfmt.DateTime
	/*Until
	  The end of the date range over which you want to search.

	*/
	Until strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list overrides params
func (o *ListOverridesParams) WithTimeout(timeout time.Duration) *ListOverridesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list overrides params
func (o *ListOverridesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list overrides params
func (o *ListOverridesParams) WithContext(ctx context.Context) *ListOverridesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list overrides params
func (o *ListOverridesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list overrides params
func (o *ListOverridesParams) WithHTTPClient(client *http.Client) *ListOverridesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list overrides params
func (o *ListOverridesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEditable adds the editable to the list overrides params
func (o *ListOverridesParams) WithEditable(editable *bool) *ListOverridesParams {
	o.SetEditable(editable)
	return o
}

// SetEditable adds the editable to the list overrides params
func (o *ListOverridesParams) SetEditable(editable *bool) {
	o.Editable = editable
}

// WithID adds the id to the list overrides params
func (o *ListOverridesParams) WithID(id string) *ListOverridesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the list overrides params
func (o *ListOverridesParams) SetID(id string) {
	o.ID = id
}

// WithOverflow adds the overflow to the list overrides params
func (o *ListOverridesParams) WithOverflow(overflow *bool) *ListOverridesParams {
	o.SetOverflow(overflow)
	return o
}

// SetOverflow adds the overflow to the list overrides params
func (o *ListOverridesParams) SetOverflow(overflow *bool) {
	o.Overflow = overflow
}

// WithSince adds the since to the list overrides params
func (o *ListOverridesParams) WithSince(since strfmt.DateTime) *ListOverridesParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the list overrides params
func (o *ListOverridesParams) SetSince(since strfmt.DateTime) {
	o.Since = since
}

// WithUntil adds the until to the list overrides params
func (o *ListOverridesParams) WithUntil(until strfmt.DateTime) *ListOverridesParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the list overrides params
func (o *ListOverridesParams) SetUntil(until strfmt.DateTime) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *ListOverridesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Editable != nil {

		// query param editable
		var qrEditable bool
		if o.Editable != nil {
			qrEditable = *o.Editable
		}
		qEditable := swag.FormatBool(qrEditable)
		if qEditable != "" {
			if err := r.SetQueryParam("editable", qEditable); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Overflow != nil {

		// query param overflow
		var qrOverflow bool
		if o.Overflow != nil {
			qrOverflow = *o.Overflow
		}
		qOverflow := swag.FormatBool(qrOverflow)
		if qOverflow != "" {
			if err := r.SetQueryParam("overflow", qOverflow); err != nil {
				return err
			}
		}

	}

	// query param since
	qrSince := o.Since
	qSince := qrSince.String()
	if qSince != "" {
		if err := r.SetQueryParam("since", qSince); err != nil {
			return err
		}
	}

	// query param until
	qrUntil := o.Until
	qUntil := qrUntil.String()
	if qUntil != "" {
		if err := r.SetQueryParam("until", qUntil); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
