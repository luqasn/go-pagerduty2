// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListOnCallsForScheduleReader is a Reader for the ListOnCallsForSchedule structure.
type ListOnCallsForScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOnCallsForScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListOnCallsForScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListOnCallsForScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListOnCallsForScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListOnCallsForScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListOnCallsForScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListOnCallsForScheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListOnCallsForScheduleOK creates a ListOnCallsForScheduleOK with default headers values
func NewListOnCallsForScheduleOK() *ListOnCallsForScheduleOK {
	return &ListOnCallsForScheduleOK{}
}

/*ListOnCallsForScheduleOK handles this case with default header values.

The users on the given schedule.
*/
type ListOnCallsForScheduleOK struct {
	Payload *models.ListOnCallsForScheduleOKBody
}

func (o *ListOnCallsForScheduleOK) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}/users][%d] listOnCallsForScheduleOK  %+v", 200, o.Payload)
}

func (o *ListOnCallsForScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListOnCallsForScheduleOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOnCallsForScheduleBadRequest creates a ListOnCallsForScheduleBadRequest with default headers values
func NewListOnCallsForScheduleBadRequest() *ListOnCallsForScheduleBadRequest {
	return &ListOnCallsForScheduleBadRequest{}
}

/*ListOnCallsForScheduleBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListOnCallsForScheduleBadRequest struct {
	Payload *models.Error
}

func (o *ListOnCallsForScheduleBadRequest) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}/users][%d] listOnCallsForScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *ListOnCallsForScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOnCallsForScheduleUnauthorized creates a ListOnCallsForScheduleUnauthorized with default headers values
func NewListOnCallsForScheduleUnauthorized() *ListOnCallsForScheduleUnauthorized {
	return &ListOnCallsForScheduleUnauthorized{}
}

/*ListOnCallsForScheduleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListOnCallsForScheduleUnauthorized struct {
	Payload *models.Error
}

func (o *ListOnCallsForScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}/users][%d] listOnCallsForScheduleUnauthorized  %+v", 401, o.Payload)
}

func (o *ListOnCallsForScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOnCallsForScheduleForbidden creates a ListOnCallsForScheduleForbidden with default headers values
func NewListOnCallsForScheduleForbidden() *ListOnCallsForScheduleForbidden {
	return &ListOnCallsForScheduleForbidden{}
}

/*ListOnCallsForScheduleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListOnCallsForScheduleForbidden struct {
	Payload *models.Error
}

func (o *ListOnCallsForScheduleForbidden) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}/users][%d] listOnCallsForScheduleForbidden  %+v", 403, o.Payload)
}

func (o *ListOnCallsForScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOnCallsForScheduleNotFound creates a ListOnCallsForScheduleNotFound with default headers values
func NewListOnCallsForScheduleNotFound() *ListOnCallsForScheduleNotFound {
	return &ListOnCallsForScheduleNotFound{}
}

/*ListOnCallsForScheduleNotFound handles this case with default header values.

The requested resource was not found.
*/
type ListOnCallsForScheduleNotFound struct {
	Payload *models.Error
}

func (o *ListOnCallsForScheduleNotFound) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}/users][%d] listOnCallsForScheduleNotFound  %+v", 404, o.Payload)
}

func (o *ListOnCallsForScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOnCallsForScheduleTooManyRequests creates a ListOnCallsForScheduleTooManyRequests with default headers values
func NewListOnCallsForScheduleTooManyRequests() *ListOnCallsForScheduleTooManyRequests {
	return &ListOnCallsForScheduleTooManyRequests{}
}

/*ListOnCallsForScheduleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListOnCallsForScheduleTooManyRequests struct {
	Payload *models.Error
}

func (o *ListOnCallsForScheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /schedules/{id}/users][%d] listOnCallsForScheduleTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListOnCallsForScheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
