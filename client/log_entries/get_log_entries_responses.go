// Code generated by go-swagger; DO NOT EDIT.

package log_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetLogEntriesReader is a Reader for the GetLogEntries structure.
type GetLogEntriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLogEntriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetLogEntriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetLogEntriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetLogEntriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetLogEntriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetLogEntriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetLogEntriesOK creates a GetLogEntriesOK with default headers values
func NewGetLogEntriesOK() *GetLogEntriesOK {
	return &GetLogEntriesOK{}
}

/*GetLogEntriesOK handles this case with default header values.

A paginated array of log entries.
*/
type GetLogEntriesOK struct {
	Payload *models.GetLogEntriesOKBody
}

func (o *GetLogEntriesOK) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] getLogEntriesOK  %+v", 200, o.Payload)
}

func (o *GetLogEntriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetLogEntriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogEntriesBadRequest creates a GetLogEntriesBadRequest with default headers values
func NewGetLogEntriesBadRequest() *GetLogEntriesBadRequest {
	return &GetLogEntriesBadRequest{}
}

/*GetLogEntriesBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetLogEntriesBadRequest struct {
	Payload *models.Error
}

func (o *GetLogEntriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] getLogEntriesBadRequest  %+v", 400, o.Payload)
}

func (o *GetLogEntriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogEntriesUnauthorized creates a GetLogEntriesUnauthorized with default headers values
func NewGetLogEntriesUnauthorized() *GetLogEntriesUnauthorized {
	return &GetLogEntriesUnauthorized{}
}

/*GetLogEntriesUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetLogEntriesUnauthorized struct {
	Payload *models.Error
}

func (o *GetLogEntriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] getLogEntriesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLogEntriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogEntriesForbidden creates a GetLogEntriesForbidden with default headers values
func NewGetLogEntriesForbidden() *GetLogEntriesForbidden {
	return &GetLogEntriesForbidden{}
}

/*GetLogEntriesForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetLogEntriesForbidden struct {
	Payload *models.Error
}

func (o *GetLogEntriesForbidden) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] getLogEntriesForbidden  %+v", 403, o.Payload)
}

func (o *GetLogEntriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLogEntriesTooManyRequests creates a GetLogEntriesTooManyRequests with default headers values
func NewGetLogEntriesTooManyRequests() *GetLogEntriesTooManyRequests {
	return &GetLogEntriesTooManyRequests{}
}

/*GetLogEntriesTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetLogEntriesTooManyRequests struct {
	Payload *models.Error
}

func (o *GetLogEntriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] getLogEntriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetLogEntriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
