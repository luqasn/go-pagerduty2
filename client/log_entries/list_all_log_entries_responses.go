// Code generated by go-swagger; DO NOT EDIT.

package log_entries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListAllLogEntriesReader is a Reader for the ListAllLogEntries structure.
type ListAllLogEntriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAllLogEntriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListAllLogEntriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListAllLogEntriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListAllLogEntriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListAllLogEntriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListAllLogEntriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListAllLogEntriesOK creates a ListAllLogEntriesOK with default headers values
func NewListAllLogEntriesOK() *ListAllLogEntriesOK {
	return &ListAllLogEntriesOK{}
}

/*ListAllLogEntriesOK handles this case with default header values.

A paginated array of log entries.
*/
type ListAllLogEntriesOK struct {
	Payload *models.ListAllLogEntriesOKBody
}

func (o *ListAllLogEntriesOK) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] listAllLogEntriesOK  %+v", 200, o.Payload)
}

func (o *ListAllLogEntriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListAllLogEntriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllLogEntriesBadRequest creates a ListAllLogEntriesBadRequest with default headers values
func NewListAllLogEntriesBadRequest() *ListAllLogEntriesBadRequest {
	return &ListAllLogEntriesBadRequest{}
}

/*ListAllLogEntriesBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListAllLogEntriesBadRequest struct {
	Payload *models.Error
}

func (o *ListAllLogEntriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] listAllLogEntriesBadRequest  %+v", 400, o.Payload)
}

func (o *ListAllLogEntriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllLogEntriesUnauthorized creates a ListAllLogEntriesUnauthorized with default headers values
func NewListAllLogEntriesUnauthorized() *ListAllLogEntriesUnauthorized {
	return &ListAllLogEntriesUnauthorized{}
}

/*ListAllLogEntriesUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListAllLogEntriesUnauthorized struct {
	Payload *models.Error
}

func (o *ListAllLogEntriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] listAllLogEntriesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAllLogEntriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllLogEntriesForbidden creates a ListAllLogEntriesForbidden with default headers values
func NewListAllLogEntriesForbidden() *ListAllLogEntriesForbidden {
	return &ListAllLogEntriesForbidden{}
}

/*ListAllLogEntriesForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListAllLogEntriesForbidden struct {
	Payload *models.Error
}

func (o *ListAllLogEntriesForbidden) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] listAllLogEntriesForbidden  %+v", 403, o.Payload)
}

func (o *ListAllLogEntriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllLogEntriesTooManyRequests creates a ListAllLogEntriesTooManyRequests with default headers values
func NewListAllLogEntriesTooManyRequests() *ListAllLogEntriesTooManyRequests {
	return &ListAllLogEntriesTooManyRequests{}
}

/*ListAllLogEntriesTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListAllLogEntriesTooManyRequests struct {
	Payload *models.Error
}

func (o *ListAllLogEntriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /log_entries][%d] listAllLogEntriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListAllLogEntriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
