// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetIntegrationReader is a Reader for the GetIntegration structure.
type GetIntegrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntegrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIntegrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetIntegrationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetIntegrationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIntegrationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetIntegrationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIntegrationOK creates a GetIntegrationOK with default headers values
func NewGetIntegrationOK() *GetIntegrationOK {
	return &GetIntegrationOK{}
}

/*GetIntegrationOK handles this case with default header values.

The integration that was requested.
*/
type GetIntegrationOK struct {
	Payload *models.GetIntegrationOKBody
}

func (o *GetIntegrationOK) Error() string {
	return fmt.Sprintf("[GET /services/{id}/integrations/{integration_id}][%d] getIntegrationOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetIntegrationOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationUnauthorized creates a GetIntegrationUnauthorized with default headers values
func NewGetIntegrationUnauthorized() *GetIntegrationUnauthorized {
	return &GetIntegrationUnauthorized{}
}

/*GetIntegrationUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetIntegrationUnauthorized struct {
	Payload *models.Error
}

func (o *GetIntegrationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /services/{id}/integrations/{integration_id}][%d] getIntegrationUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIntegrationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationForbidden creates a GetIntegrationForbidden with default headers values
func NewGetIntegrationForbidden() *GetIntegrationForbidden {
	return &GetIntegrationForbidden{}
}

/*GetIntegrationForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetIntegrationForbidden struct {
	Payload *models.Error
}

func (o *GetIntegrationForbidden) Error() string {
	return fmt.Sprintf("[GET /services/{id}/integrations/{integration_id}][%d] getIntegrationForbidden  %+v", 403, o.Payload)
}

func (o *GetIntegrationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationNotFound creates a GetIntegrationNotFound with default headers values
func NewGetIntegrationNotFound() *GetIntegrationNotFound {
	return &GetIntegrationNotFound{}
}

/*GetIntegrationNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetIntegrationNotFound struct {
	Payload *models.Error
}

func (o *GetIntegrationNotFound) Error() string {
	return fmt.Sprintf("[GET /services/{id}/integrations/{integration_id}][%d] getIntegrationNotFound  %+v", 404, o.Payload)
}

func (o *GetIntegrationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationTooManyRequests creates a GetIntegrationTooManyRequests with default headers values
func NewGetIntegrationTooManyRequests() *GetIntegrationTooManyRequests {
	return &GetIntegrationTooManyRequests{}
}

/*GetIntegrationTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetIntegrationTooManyRequests struct {
	Payload *models.Error
}

func (o *GetIntegrationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /services/{id}/integrations/{integration_id}][%d] getIntegrationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIntegrationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
