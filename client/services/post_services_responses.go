// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PostServicesReader is a Reader for the PostServices structure.
type PostServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostServicesCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewPostServicesPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostServicesCreated creates a PostServicesCreated with default headers values
func NewPostServicesCreated() *PostServicesCreated {
	return &PostServicesCreated{}
}

/*PostServicesCreated handles this case with default header values.

The service that was created
*/
type PostServicesCreated struct {
	Payload *models.PostServicesCreatedBody
}

func (o *PostServicesCreated) Error() string {
	return fmt.Sprintf("[POST /services][%d] postServicesCreated  %+v", 201, o.Payload)
}

func (o *PostServicesCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostServicesCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServicesBadRequest creates a PostServicesBadRequest with default headers values
func NewPostServicesBadRequest() *PostServicesBadRequest {
	return &PostServicesBadRequest{}
}

/*PostServicesBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PostServicesBadRequest struct {
	Payload *models.Error
}

func (o *PostServicesBadRequest) Error() string {
	return fmt.Sprintf("[POST /services][%d] postServicesBadRequest  %+v", 400, o.Payload)
}

func (o *PostServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServicesUnauthorized creates a PostServicesUnauthorized with default headers values
func NewPostServicesUnauthorized() *PostServicesUnauthorized {
	return &PostServicesUnauthorized{}
}

/*PostServicesUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PostServicesUnauthorized struct {
	Payload *models.Error
}

func (o *PostServicesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /services][%d] postServicesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServicesPaymentRequired creates a PostServicesPaymentRequired with default headers values
func NewPostServicesPaymentRequired() *PostServicesPaymentRequired {
	return &PostServicesPaymentRequired{}
}

/*PostServicesPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type PostServicesPaymentRequired struct {
	Payload *models.Error
}

func (o *PostServicesPaymentRequired) Error() string {
	return fmt.Sprintf("[POST /services][%d] postServicesPaymentRequired  %+v", 402, o.Payload)
}

func (o *PostServicesPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostServicesForbidden creates a PostServicesForbidden with default headers values
func NewPostServicesForbidden() *PostServicesForbidden {
	return &PostServicesForbidden{}
}

/*PostServicesForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PostServicesForbidden struct {
	Payload *models.Error
}

func (o *PostServicesForbidden) Error() string {
	return fmt.Sprintf("[POST /services][%d] postServicesForbidden  %+v", 403, o.Payload)
}

func (o *PostServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
