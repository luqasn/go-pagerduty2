// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetServicesIDReader is a Reader for the GetServicesID structure.
type GetServicesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServicesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetServicesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetServicesIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetServicesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetServicesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetServicesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetServicesIDOK creates a GetServicesIDOK with default headers values
func NewGetServicesIDOK() *GetServicesIDOK {
	return &GetServicesIDOK{}
}

/*GetServicesIDOK handles this case with default header values.

The service requested.
*/
type GetServicesIDOK struct {
	Payload *models.GetServicesIDOKBody
}

func (o *GetServicesIDOK) Error() string {
	return fmt.Sprintf("[GET /services/{id}][%d] getServicesIdOK  %+v", 200, o.Payload)
}

func (o *GetServicesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetServicesIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesIDBadRequest creates a GetServicesIDBadRequest with default headers values
func NewGetServicesIDBadRequest() *GetServicesIDBadRequest {
	return &GetServicesIDBadRequest{}
}

/*GetServicesIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetServicesIDBadRequest struct {
	Payload *models.Error
}

func (o *GetServicesIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /services/{id}][%d] getServicesIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetServicesIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesIDUnauthorized creates a GetServicesIDUnauthorized with default headers values
func NewGetServicesIDUnauthorized() *GetServicesIDUnauthorized {
	return &GetServicesIDUnauthorized{}
}

/*GetServicesIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetServicesIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetServicesIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /services/{id}][%d] getServicesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetServicesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesIDForbidden creates a GetServicesIDForbidden with default headers values
func NewGetServicesIDForbidden() *GetServicesIDForbidden {
	return &GetServicesIDForbidden{}
}

/*GetServicesIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetServicesIDForbidden struct {
	Payload *models.Error
}

func (o *GetServicesIDForbidden) Error() string {
	return fmt.Sprintf("[GET /services/{id}][%d] getServicesIdForbidden  %+v", 403, o.Payload)
}

func (o *GetServicesIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServicesIDNotFound creates a GetServicesIDNotFound with default headers values
func NewGetServicesIDNotFound() *GetServicesIDNotFound {
	return &GetServicesIDNotFound{}
}

/*GetServicesIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetServicesIDNotFound struct {
	Payload *models.Error
}

func (o *GetServicesIDNotFound) Error() string {
	return fmt.Sprintf("[GET /services/{id}][%d] getServicesIdNotFound  %+v", 404, o.Payload)
}

func (o *GetServicesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
