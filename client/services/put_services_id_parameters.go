// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// NewPutServicesIDParams creates a new PutServicesIDParams object
// with the default values initialized.
func NewPutServicesIDParams() *PutServicesIDParams {
	var ()
	return &PutServicesIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutServicesIDParamsWithTimeout creates a new PutServicesIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutServicesIDParamsWithTimeout(timeout time.Duration) *PutServicesIDParams {
	var ()
	return &PutServicesIDParams{

		timeout: timeout,
	}
}

// NewPutServicesIDParamsWithContext creates a new PutServicesIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutServicesIDParamsWithContext(ctx context.Context) *PutServicesIDParams {
	var ()
	return &PutServicesIDParams{

		Context: ctx,
	}
}

// NewPutServicesIDParamsWithHTTPClient creates a new PutServicesIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutServicesIDParamsWithHTTPClient(client *http.Client) *PutServicesIDParams {
	var ()
	return &PutServicesIDParams{
		HTTPClient: client,
	}
}

/*PutServicesIDParams contains all the parameters to send to the API endpoint
for the put services ID operation typically these are written to a http.Request
*/
type PutServicesIDParams struct {

	/*ID*/
	ID string
	/*Service
	  The service to be updated.

	*/
	Service *models.PutServicesIDParamsBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put services ID params
func (o *PutServicesIDParams) WithTimeout(timeout time.Duration) *PutServicesIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put services ID params
func (o *PutServicesIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put services ID params
func (o *PutServicesIDParams) WithContext(ctx context.Context) *PutServicesIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put services ID params
func (o *PutServicesIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put services ID params
func (o *PutServicesIDParams) WithHTTPClient(client *http.Client) *PutServicesIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put services ID params
func (o *PutServicesIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the put services ID params
func (o *PutServicesIDParams) WithID(id string) *PutServicesIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put services ID params
func (o *PutServicesIDParams) SetID(id string) {
	o.ID = id
}

// WithService adds the service to the put services ID params
func (o *PutServicesIDParams) WithService(service *models.PutServicesIDParamsBody) *PutServicesIDParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the put services ID params
func (o *PutServicesIDParams) SetService(service *models.PutServicesIDParamsBody) {
	o.Service = service
}

// WriteToRequest writes these params to a swagger request
func (o *PutServicesIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Service != nil {
		if err := r.SetBodyParam(o.Service); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
