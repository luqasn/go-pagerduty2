// Code generated by go-swagger; DO NOT EDIT.

package services

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutServicesIDReader is a Reader for the PutServicesID structure.
type PutServicesIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutServicesIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutServicesIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPutServicesIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewPutServicesIDPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutServicesIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutServicesIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutServicesIDOK creates a PutServicesIDOK with default headers values
func NewPutServicesIDOK() *PutServicesIDOK {
	return &PutServicesIDOK{}
}

/*PutServicesIDOK handles this case with default header values.

The service that was updated.
*/
type PutServicesIDOK struct {
	Payload *models.PutServicesIDOKBody
}

func (o *PutServicesIDOK) Error() string {
	return fmt.Sprintf("[PUT /services/{id}][%d] putServicesIdOK  %+v", 200, o.Payload)
}

func (o *PutServicesIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutServicesIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServicesIDUnauthorized creates a PutServicesIDUnauthorized with default headers values
func NewPutServicesIDUnauthorized() *PutServicesIDUnauthorized {
	return &PutServicesIDUnauthorized{}
}

/*PutServicesIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutServicesIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutServicesIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /services/{id}][%d] putServicesIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutServicesIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServicesIDPaymentRequired creates a PutServicesIDPaymentRequired with default headers values
func NewPutServicesIDPaymentRequired() *PutServicesIDPaymentRequired {
	return &PutServicesIDPaymentRequired{}
}

/*PutServicesIDPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type PutServicesIDPaymentRequired struct {
	Payload *models.Error
}

func (o *PutServicesIDPaymentRequired) Error() string {
	return fmt.Sprintf("[PUT /services/{id}][%d] putServicesIdPaymentRequired  %+v", 402, o.Payload)
}

func (o *PutServicesIDPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServicesIDForbidden creates a PutServicesIDForbidden with default headers values
func NewPutServicesIDForbidden() *PutServicesIDForbidden {
	return &PutServicesIDForbidden{}
}

/*PutServicesIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutServicesIDForbidden struct {
	Payload *models.Error
}

func (o *PutServicesIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /services/{id}][%d] putServicesIdForbidden  %+v", 403, o.Payload)
}

func (o *PutServicesIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutServicesIDNotFound creates a PutServicesIDNotFound with default headers values
func NewPutServicesIDNotFound() *PutServicesIDNotFound {
	return &PutServicesIDNotFound{}
}

/*PutServicesIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutServicesIDNotFound struct {
	Payload *models.Error
}

func (o *PutServicesIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/{id}][%d] putServicesIdNotFound  %+v", 404, o.Payload)
}

func (o *PutServicesIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
