// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// UpdateTeamReader is a Reader for the UpdateTeam structure.
type UpdateTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateTeamUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewUpdateTeamPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewUpdateTeamTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTeamOK creates a UpdateTeamOK with default headers values
func NewUpdateTeamOK() *UpdateTeamOK {
	return &UpdateTeamOK{}
}

/*UpdateTeamOK handles this case with default header values.

The team that was updated.
*/
type UpdateTeamOK struct {
	Payload *models.UpdateTeamOKBody
}

func (o *UpdateTeamOK) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}][%d] updateTeamOK  %+v", 200, o.Payload)
}

func (o *UpdateTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateTeamOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamUnauthorized creates a UpdateTeamUnauthorized with default headers values
func NewUpdateTeamUnauthorized() *UpdateTeamUnauthorized {
	return &UpdateTeamUnauthorized{}
}

/*UpdateTeamUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type UpdateTeamUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateTeamUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}][%d] updateTeamUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateTeamUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamPaymentRequired creates a UpdateTeamPaymentRequired with default headers values
func NewUpdateTeamPaymentRequired() *UpdateTeamPaymentRequired {
	return &UpdateTeamPaymentRequired{}
}

/*UpdateTeamPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type UpdateTeamPaymentRequired struct {
	Payload *models.Error
}

func (o *UpdateTeamPaymentRequired) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}][%d] updateTeamPaymentRequired  %+v", 402, o.Payload)
}

func (o *UpdateTeamPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamForbidden creates a UpdateTeamForbidden with default headers values
func NewUpdateTeamForbidden() *UpdateTeamForbidden {
	return &UpdateTeamForbidden{}
}

/*UpdateTeamForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type UpdateTeamForbidden struct {
	Payload *models.Error
}

func (o *UpdateTeamForbidden) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}][%d] updateTeamForbidden  %+v", 403, o.Payload)
}

func (o *UpdateTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamNotFound creates a UpdateTeamNotFound with default headers values
func NewUpdateTeamNotFound() *UpdateTeamNotFound {
	return &UpdateTeamNotFound{}
}

/*UpdateTeamNotFound handles this case with default header values.

The requested resource was not found.
*/
type UpdateTeamNotFound struct {
	Payload *models.Error
}

func (o *UpdateTeamNotFound) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}][%d] updateTeamNotFound  %+v", 404, o.Payload)
}

func (o *UpdateTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamTooManyRequests creates a UpdateTeamTooManyRequests with default headers values
func NewUpdateTeamTooManyRequests() *UpdateTeamTooManyRequests {
	return &UpdateTeamTooManyRequests{}
}

/*UpdateTeamTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type UpdateTeamTooManyRequests struct {
	Payload *models.Error
}

func (o *UpdateTeamTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}][%d] updateTeamTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateTeamTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
