// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutTeamsIDUsersUserIDReader is a Reader for the PutTeamsIDUsersUserID structure.
type PutTeamsIDUsersUserIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutTeamsIDUsersUserIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewPutTeamsIDUsersUserIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutTeamsIDUsersUserIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutTeamsIDUsersUserIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewPutTeamsIDUsersUserIDPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutTeamsIDUsersUserIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutTeamsIDUsersUserIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutTeamsIDUsersUserIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutTeamsIDUsersUserIDNoContent creates a PutTeamsIDUsersUserIDNoContent with default headers values
func NewPutTeamsIDUsersUserIDNoContent() *PutTeamsIDUsersUserIDNoContent {
	return &PutTeamsIDUsersUserIDNoContent{}
}

/*PutTeamsIDUsersUserIDNoContent handles this case with default header values.

The user was added to the team.
*/
type PutTeamsIDUsersUserIDNoContent struct {
}

func (o *PutTeamsIDUsersUserIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] putTeamsIdUsersUserIdNoContent ", 204)
}

func (o *PutTeamsIDUsersUserIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutTeamsIDUsersUserIDBadRequest creates a PutTeamsIDUsersUserIDBadRequest with default headers values
func NewPutTeamsIDUsersUserIDBadRequest() *PutTeamsIDUsersUserIDBadRequest {
	return &PutTeamsIDUsersUserIDBadRequest{}
}

/*PutTeamsIDUsersUserIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutTeamsIDUsersUserIDBadRequest struct {
	Payload *models.Error
}

func (o *PutTeamsIDUsersUserIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] putTeamsIdUsersUserIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutTeamsIDUsersUserIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsIDUsersUserIDUnauthorized creates a PutTeamsIDUsersUserIDUnauthorized with default headers values
func NewPutTeamsIDUsersUserIDUnauthorized() *PutTeamsIDUsersUserIDUnauthorized {
	return &PutTeamsIDUsersUserIDUnauthorized{}
}

/*PutTeamsIDUsersUserIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutTeamsIDUsersUserIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutTeamsIDUsersUserIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] putTeamsIdUsersUserIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutTeamsIDUsersUserIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsIDUsersUserIDPaymentRequired creates a PutTeamsIDUsersUserIDPaymentRequired with default headers values
func NewPutTeamsIDUsersUserIDPaymentRequired() *PutTeamsIDUsersUserIDPaymentRequired {
	return &PutTeamsIDUsersUserIDPaymentRequired{}
}

/*PutTeamsIDUsersUserIDPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type PutTeamsIDUsersUserIDPaymentRequired struct {
	Payload *models.Error
}

func (o *PutTeamsIDUsersUserIDPaymentRequired) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] putTeamsIdUsersUserIdPaymentRequired  %+v", 402, o.Payload)
}

func (o *PutTeamsIDUsersUserIDPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsIDUsersUserIDForbidden creates a PutTeamsIDUsersUserIDForbidden with default headers values
func NewPutTeamsIDUsersUserIDForbidden() *PutTeamsIDUsersUserIDForbidden {
	return &PutTeamsIDUsersUserIDForbidden{}
}

/*PutTeamsIDUsersUserIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutTeamsIDUsersUserIDForbidden struct {
	Payload *models.Error
}

func (o *PutTeamsIDUsersUserIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] putTeamsIdUsersUserIdForbidden  %+v", 403, o.Payload)
}

func (o *PutTeamsIDUsersUserIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsIDUsersUserIDNotFound creates a PutTeamsIDUsersUserIDNotFound with default headers values
func NewPutTeamsIDUsersUserIDNotFound() *PutTeamsIDUsersUserIDNotFound {
	return &PutTeamsIDUsersUserIDNotFound{}
}

/*PutTeamsIDUsersUserIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutTeamsIDUsersUserIDNotFound struct {
	Payload *models.Error
}

func (o *PutTeamsIDUsersUserIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] putTeamsIdUsersUserIdNotFound  %+v", 404, o.Payload)
}

func (o *PutTeamsIDUsersUserIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutTeamsIDUsersUserIDTooManyRequests creates a PutTeamsIDUsersUserIDTooManyRequests with default headers values
func NewPutTeamsIDUsersUserIDTooManyRequests() *PutTeamsIDUsersUserIDTooManyRequests {
	return &PutTeamsIDUsersUserIDTooManyRequests{}
}

/*PutTeamsIDUsersUserIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutTeamsIDUsersUserIDTooManyRequests struct {
	Payload *models.Error
}

func (o *PutTeamsIDUsersUserIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] putTeamsIdUsersUserIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutTeamsIDUsersUserIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
