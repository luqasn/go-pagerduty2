// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// NewUpdateTeamParams creates a new UpdateTeamParams object
// with the default values initialized.
func NewUpdateTeamParams() *UpdateTeamParams {
	var ()
	return &UpdateTeamParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateTeamParamsWithTimeout creates a new UpdateTeamParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateTeamParamsWithTimeout(timeout time.Duration) *UpdateTeamParams {
	var ()
	return &UpdateTeamParams{

		timeout: timeout,
	}
}

// NewUpdateTeamParamsWithContext creates a new UpdateTeamParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateTeamParamsWithContext(ctx context.Context) *UpdateTeamParams {
	var ()
	return &UpdateTeamParams{

		Context: ctx,
	}
}

// NewUpdateTeamParamsWithHTTPClient creates a new UpdateTeamParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateTeamParamsWithHTTPClient(client *http.Client) *UpdateTeamParams {
	var ()
	return &UpdateTeamParams{
		HTTPClient: client,
	}
}

/*UpdateTeamParams contains all the parameters to send to the API endpoint
for the update team operation typically these are written to a http.Request
*/
type UpdateTeamParams struct {

	/*ID*/
	ID string
	/*Team
	  The team to be updated.

	*/
	Team *models.UpdateTeamParamsBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update team params
func (o *UpdateTeamParams) WithTimeout(timeout time.Duration) *UpdateTeamParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update team params
func (o *UpdateTeamParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update team params
func (o *UpdateTeamParams) WithContext(ctx context.Context) *UpdateTeamParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update team params
func (o *UpdateTeamParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update team params
func (o *UpdateTeamParams) WithHTTPClient(client *http.Client) *UpdateTeamParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update team params
func (o *UpdateTeamParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the update team params
func (o *UpdateTeamParams) WithID(id string) *UpdateTeamParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update team params
func (o *UpdateTeamParams) SetID(id string) {
	o.ID = id
}

// WithTeam adds the team to the update team params
func (o *UpdateTeamParams) WithTeam(team *models.UpdateTeamParamsBody) *UpdateTeamParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the update team params
func (o *UpdateTeamParams) SetTeam(team *models.UpdateTeamParamsBody) {
	o.Team = team
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateTeamParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Team != nil {
		if err := r.SetBodyParam(o.Team); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
