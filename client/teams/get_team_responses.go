// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetTeamReader is a Reader for the GetTeam structure.
type GetTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTeamBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTeamUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewGetTeamPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetTeamTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTeamOK creates a GetTeamOK with default headers values
func NewGetTeamOK() *GetTeamOK {
	return &GetTeamOK{}
}

/*GetTeamOK handles this case with default header values.

The team requested.
*/
type GetTeamOK struct {
	Payload *models.GetTeamOKBody
}

func (o *GetTeamOK) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamOK  %+v", 200, o.Payload)
}

func (o *GetTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetTeamOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamBadRequest creates a GetTeamBadRequest with default headers values
func NewGetTeamBadRequest() *GetTeamBadRequest {
	return &GetTeamBadRequest{}
}

/*GetTeamBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetTeamBadRequest struct {
	Payload *models.Error
}

func (o *GetTeamBadRequest) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamBadRequest  %+v", 400, o.Payload)
}

func (o *GetTeamBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamUnauthorized creates a GetTeamUnauthorized with default headers values
func NewGetTeamUnauthorized() *GetTeamUnauthorized {
	return &GetTeamUnauthorized{}
}

/*GetTeamUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetTeamUnauthorized struct {
	Payload *models.Error
}

func (o *GetTeamUnauthorized) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTeamUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamPaymentRequired creates a GetTeamPaymentRequired with default headers values
func NewGetTeamPaymentRequired() *GetTeamPaymentRequired {
	return &GetTeamPaymentRequired{}
}

/*GetTeamPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type GetTeamPaymentRequired struct {
	Payload *models.Error
}

func (o *GetTeamPaymentRequired) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamPaymentRequired  %+v", 402, o.Payload)
}

func (o *GetTeamPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamForbidden creates a GetTeamForbidden with default headers values
func NewGetTeamForbidden() *GetTeamForbidden {
	return &GetTeamForbidden{}
}

/*GetTeamForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetTeamForbidden struct {
	Payload *models.Error
}

func (o *GetTeamForbidden) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamNotFound creates a GetTeamNotFound with default headers values
func NewGetTeamNotFound() *GetTeamNotFound {
	return &GetTeamNotFound{}
}

/*GetTeamNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetTeamNotFound struct {
	Payload *models.Error
}

func (o *GetTeamNotFound) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamTooManyRequests creates a GetTeamTooManyRequests with default headers values
func NewGetTeamTooManyRequests() *GetTeamTooManyRequests {
	return &GetTeamTooManyRequests{}
}

/*GetTeamTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetTeamTooManyRequests struct {
	Payload *models.Error
}

func (o *GetTeamTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTeamTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
