// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new teams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTeamsID deletes a team

Remove an existing team.
*/
func (a *Client) DeleteTeamsID(params *DeleteTeamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamsID",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamsIDNoContent), nil

}

/*
DeleteTeamsIDEscalationPoliciesEscalationPolicyID removes an escalation policy from a team

Remove an escalation policy from a team.
*/
func (a *Client) DeleteTeamsIDEscalationPoliciesEscalationPolicyID(params *DeleteTeamsIDEscalationPoliciesEscalationPolicyIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamsIDEscalationPoliciesEscalationPolicyIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamsIDEscalationPoliciesEscalationPolicyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamsIDEscalationPoliciesEscalationPolicyID",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}/escalation_policies/{escalation_policy_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamsIDEscalationPoliciesEscalationPolicyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamsIDEscalationPoliciesEscalationPolicyIDNoContent), nil

}

/*
DeleteTeamsIDUsersUserID removes a user from a team

Remove a user from a team.
*/
func (a *Client) DeleteTeamsIDUsersUserID(params *DeleteTeamsIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamsIDUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamsIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTeamsIDUsersUserID",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamsIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamsIDUsersUserIDNoContent), nil

}

/*
GetTeams lists teams

List teams of your PagerDuty account, optionally filtered by a search query.
*/
func (a *Client) GetTeams(params *GetTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeams",
		Method:             "GET",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamsOK), nil

}

/*
GetTeamsID gets a team

Get details about an existing team.
*/
func (a *Client) GetTeamsID(params *GetTeamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTeamsID",
		Method:             "GET",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamsIDOK), nil

}

/*
PostTeams creates a team

Create a new team.
*/
func (a *Client) PostTeams(params *PostTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*PostTeamsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTeams",
		Method:             "POST",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTeamsCreated), nil

}

/*
PutTeamsID updates a team

Update an existing team.
*/
func (a *Client) PutTeamsID(params *PutTeamsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTeamsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTeamsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTeamsID",
		Method:             "PUT",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTeamsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTeamsIDOK), nil

}

/*
PutTeamsIDEscalationPoliciesEscalationPolicyID adds an escalation policy to a team

Add an escalation policy to a team.
*/
func (a *Client) PutTeamsIDEscalationPoliciesEscalationPolicyID(params *PutTeamsIDEscalationPoliciesEscalationPolicyIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTeamsIDEscalationPoliciesEscalationPolicyIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTeamsIDEscalationPoliciesEscalationPolicyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTeamsIDEscalationPoliciesEscalationPolicyID",
		Method:             "PUT",
		PathPattern:        "/teams/{id}/escalation_policies/{escalation_policy_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTeamsIDEscalationPoliciesEscalationPolicyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTeamsIDEscalationPoliciesEscalationPolicyIDNoContent), nil

}

/*
PutTeamsIDUsersUserID adds a user to a team

Add a user to a team. Attempting to add a user with the `read_only_user` role will return a 400 error.
*/
func (a *Client) PutTeamsIDUsersUserID(params *PutTeamsIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTeamsIDUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTeamsIDUsersUserIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTeamsIDUsersUserID",
		Method:             "PUT",
		PathPattern:        "/teams/{id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTeamsIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTeamsIDUsersUserIDNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
