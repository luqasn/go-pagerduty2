// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new teams API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddEscalationPolicy adds an escalation policy to a team

Add an escalation policy to a team.
*/
func (a *Client) AddEscalationPolicy(params *AddEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*AddEscalationPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEscalationPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addEscalationPolicy",
		Method:             "PUT",
		PathPattern:        "/teams/{id}/escalation_policies/{escalation_policy_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddEscalationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddEscalationPolicyNoContent), nil

}

/*
AddUser adds a user to a team

Add a user to a team. Attempting to add a user with the `read_only_user` role will return a 400 error.
*/
func (a *Client) AddUser(params *AddUserParams, authInfo runtime.ClientAuthInfoWriter) (*AddUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addUser",
		Method:             "PUT",
		PathPattern:        "/teams/{id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddUserNoContent), nil

}

/*
CreateTeam creates a team

Create a new team.
*/
func (a *Client) CreateTeam(params *CreateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*CreateTeamCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createTeam",
		Method:             "POST",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateTeamCreated), nil

}

/*
DeleteTeam deletes a team

Remove an existing team.
*/
func (a *Client) DeleteTeam(params *DeleteTeamParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTeam",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTeamNoContent), nil

}

/*
GetTeam gets a team

Get details about an existing team.
*/
func (a *Client) GetTeam(params *GetTeamParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeam",
		Method:             "GET",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTeamOK), nil

}

/*
ListTeams lists teams

List teams of your PagerDuty account, optionally filtered by a search query.
*/
func (a *Client) ListTeams(params *ListTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ListTeamsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTeams",
		Method:             "GET",
		PathPattern:        "/teams",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTeamsOK), nil

}

/*
RemoveEscalationPolicy removes an escalation policy from a team

Remove an escalation policy from a team.
*/
func (a *Client) RemoveEscalationPolicy(params *RemoveEscalationPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveEscalationPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveEscalationPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeEscalationPolicy",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}/escalation_policies/{escalation_policy_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveEscalationPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveEscalationPolicyNoContent), nil

}

/*
RemoveUser removes a user from a team

Remove a user from a team.
*/
func (a *Client) RemoveUser(params *RemoveUserParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeUser",
		Method:             "DELETE",
		PathPattern:        "/teams/{id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveUserNoContent), nil

}

/*
UpdateTeam updates a team

Update an existing team.
*/
func (a *Client) UpdateTeam(params *UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateTeamOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTeam",
		Method:             "PUT",
		PathPattern:        "/teams/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTeamOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
