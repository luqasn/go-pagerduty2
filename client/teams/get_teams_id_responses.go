// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetTeamsIDReader is a Reader for the GetTeamsID structure.
type GetTeamsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTeamsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetTeamsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetTeamsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetTeamsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewGetTeamsIDPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetTeamsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetTeamsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetTeamsIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetTeamsIDOK creates a GetTeamsIDOK with default headers values
func NewGetTeamsIDOK() *GetTeamsIDOK {
	return &GetTeamsIDOK{}
}

/*GetTeamsIDOK handles this case with default header values.

The team requested.
*/
type GetTeamsIDOK struct {
	Payload *models.GetTeamsIDOKBody
}

func (o *GetTeamsIDOK) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamsIdOK  %+v", 200, o.Payload)
}

func (o *GetTeamsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetTeamsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsIDBadRequest creates a GetTeamsIDBadRequest with default headers values
func NewGetTeamsIDBadRequest() *GetTeamsIDBadRequest {
	return &GetTeamsIDBadRequest{}
}

/*GetTeamsIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetTeamsIDBadRequest struct {
	Payload *models.Error
}

func (o *GetTeamsIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamsIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetTeamsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsIDUnauthorized creates a GetTeamsIDUnauthorized with default headers values
func NewGetTeamsIDUnauthorized() *GetTeamsIDUnauthorized {
	return &GetTeamsIDUnauthorized{}
}

/*GetTeamsIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetTeamsIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetTeamsIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTeamsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsIDPaymentRequired creates a GetTeamsIDPaymentRequired with default headers values
func NewGetTeamsIDPaymentRequired() *GetTeamsIDPaymentRequired {
	return &GetTeamsIDPaymentRequired{}
}

/*GetTeamsIDPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type GetTeamsIDPaymentRequired struct {
	Payload *models.Error
}

func (o *GetTeamsIDPaymentRequired) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamsIdPaymentRequired  %+v", 402, o.Payload)
}

func (o *GetTeamsIDPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsIDForbidden creates a GetTeamsIDForbidden with default headers values
func NewGetTeamsIDForbidden() *GetTeamsIDForbidden {
	return &GetTeamsIDForbidden{}
}

/*GetTeamsIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetTeamsIDForbidden struct {
	Payload *models.Error
}

func (o *GetTeamsIDForbidden) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamsIdForbidden  %+v", 403, o.Payload)
}

func (o *GetTeamsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsIDNotFound creates a GetTeamsIDNotFound with default headers values
func NewGetTeamsIDNotFound() *GetTeamsIDNotFound {
	return &GetTeamsIDNotFound{}
}

/*GetTeamsIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetTeamsIDNotFound struct {
	Payload *models.Error
}

func (o *GetTeamsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetTeamsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTeamsIDTooManyRequests creates a GetTeamsIDTooManyRequests with default headers values
func NewGetTeamsIDTooManyRequests() *GetTeamsIDTooManyRequests {
	return &GetTeamsIDTooManyRequests{}
}

/*GetTeamsIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetTeamsIDTooManyRequests struct {
	Payload *models.Error
}

func (o *GetTeamsIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /teams/{id}][%d] getTeamsIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTeamsIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
