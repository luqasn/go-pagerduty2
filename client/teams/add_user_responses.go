// Code generated by go-swagger; DO NOT EDIT.

package teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// AddUserReader is a Reader for the AddUser structure.
type AddUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewAddUserNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAddUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAddUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewAddUserPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewAddUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAddUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewAddUserTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewAddUserNoContent creates a AddUserNoContent with default headers values
func NewAddUserNoContent() *AddUserNoContent {
	return &AddUserNoContent{}
}

/*AddUserNoContent handles this case with default header values.

The user was added to the team.
*/
type AddUserNoContent struct {
}

func (o *AddUserNoContent) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] addUserNoContent ", 204)
}

func (o *AddUserNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddUserBadRequest creates a AddUserBadRequest with default headers values
func NewAddUserBadRequest() *AddUserBadRequest {
	return &AddUserBadRequest{}
}

/*AddUserBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type AddUserBadRequest struct {
	Payload *models.Error
}

func (o *AddUserBadRequest) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] addUserBadRequest  %+v", 400, o.Payload)
}

func (o *AddUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserUnauthorized creates a AddUserUnauthorized with default headers values
func NewAddUserUnauthorized() *AddUserUnauthorized {
	return &AddUserUnauthorized{}
}

/*AddUserUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type AddUserUnauthorized struct {
	Payload *models.Error
}

func (o *AddUserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] addUserUnauthorized  %+v", 401, o.Payload)
}

func (o *AddUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserPaymentRequired creates a AddUserPaymentRequired with default headers values
func NewAddUserPaymentRequired() *AddUserPaymentRequired {
	return &AddUserPaymentRequired{}
}

/*AddUserPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type AddUserPaymentRequired struct {
	Payload *models.Error
}

func (o *AddUserPaymentRequired) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] addUserPaymentRequired  %+v", 402, o.Payload)
}

func (o *AddUserPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserForbidden creates a AddUserForbidden with default headers values
func NewAddUserForbidden() *AddUserForbidden {
	return &AddUserForbidden{}
}

/*AddUserForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type AddUserForbidden struct {
	Payload *models.Error
}

func (o *AddUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] addUserForbidden  %+v", 403, o.Payload)
}

func (o *AddUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserNotFound creates a AddUserNotFound with default headers values
func NewAddUserNotFound() *AddUserNotFound {
	return &AddUserNotFound{}
}

/*AddUserNotFound handles this case with default header values.

The requested resource was not found.
*/
type AddUserNotFound struct {
	Payload *models.Error
}

func (o *AddUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] addUserNotFound  %+v", 404, o.Payload)
}

func (o *AddUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddUserTooManyRequests creates a AddUserTooManyRequests with default headers values
func NewAddUserTooManyRequests() *AddUserTooManyRequests {
	return &AddUserTooManyRequests{}
}

/*AddUserTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type AddUserTooManyRequests struct {
	Payload *models.Error
}

func (o *AddUserTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /teams/{id}/users/{user_id}][%d] addUserTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddUserTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
