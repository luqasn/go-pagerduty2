// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListNotificationsParams creates a new ListNotificationsParams object
// with the default values initialized.
func NewListNotificationsParams() *ListNotificationsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &ListNotificationsParams{
		TimeZone: &timeZoneDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListNotificationsParamsWithTimeout creates a new ListNotificationsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListNotificationsParamsWithTimeout(timeout time.Duration) *ListNotificationsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &ListNotificationsParams{
		TimeZone: &timeZoneDefault,

		timeout: timeout,
	}
}

// NewListNotificationsParamsWithContext creates a new ListNotificationsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListNotificationsParamsWithContext(ctx context.Context) *ListNotificationsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &ListNotificationsParams{
		TimeZone: &timeZoneDefault,

		Context: ctx,
	}
}

// NewListNotificationsParamsWithHTTPClient creates a new ListNotificationsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListNotificationsParamsWithHTTPClient(client *http.Client) *ListNotificationsParams {
	var (
		timeZoneDefault = string("UTC")
	)
	return &ListNotificationsParams{
		TimeZone:   &timeZoneDefault,
		HTTPClient: client,
	}
}

/*ListNotificationsParams contains all the parameters to send to the API endpoint
for the list notifications operation typically these are written to a http.Request
*/
type ListNotificationsParams struct {

	/*Filter
	  Return notification of this type only.

	*/
	Filter *string
	/*Include
	  Array of additional details to include.

	*/
	Include []string
	/*Since
	  The start of the date range over which you want to search. The time element is optional.

	*/
	Since strfmt.DateTime
	/*TimeZone
	  Time zone in which dates in the result will be rendered.

	*/
	TimeZone *string
	/*Until
	  The end of the date range over which you want to search. This should be in the same format as since. The size of the date range must be less than 3 months.

	*/
	Until strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list notifications params
func (o *ListNotificationsParams) WithTimeout(timeout time.Duration) *ListNotificationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list notifications params
func (o *ListNotificationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list notifications params
func (o *ListNotificationsParams) WithContext(ctx context.Context) *ListNotificationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list notifications params
func (o *ListNotificationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list notifications params
func (o *ListNotificationsParams) WithHTTPClient(client *http.Client) *ListNotificationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list notifications params
func (o *ListNotificationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the list notifications params
func (o *ListNotificationsParams) WithFilter(filter *string) *ListNotificationsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list notifications params
func (o *ListNotificationsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithInclude adds the include to the list notifications params
func (o *ListNotificationsParams) WithInclude(include []string) *ListNotificationsParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the list notifications params
func (o *ListNotificationsParams) SetInclude(include []string) {
	o.Include = include
}

// WithSince adds the since to the list notifications params
func (o *ListNotificationsParams) WithSince(since strfmt.DateTime) *ListNotificationsParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the list notifications params
func (o *ListNotificationsParams) SetSince(since strfmt.DateTime) {
	o.Since = since
}

// WithTimeZone adds the timeZone to the list notifications params
func (o *ListNotificationsParams) WithTimeZone(timeZone *string) *ListNotificationsParams {
	o.SetTimeZone(timeZone)
	return o
}

// SetTimeZone adds the timeZone to the list notifications params
func (o *ListNotificationsParams) SetTimeZone(timeZone *string) {
	o.TimeZone = timeZone
}

// WithUntil adds the until to the list notifications params
func (o *ListNotificationsParams) WithUntil(until strfmt.DateTime) *ListNotificationsParams {
	o.SetUntil(until)
	return o
}

// SetUntil adds the until to the list notifications params
func (o *ListNotificationsParams) SetUntil(until strfmt.DateTime) {
	o.Until = until
}

// WriteToRequest writes these params to a swagger request
func (o *ListNotificationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	valuesInclude := o.Include

	joinedInclude := swag.JoinByFormat(valuesInclude, "multi")
	// query array param include[]
	if err := r.SetQueryParam("include[]", joinedInclude...); err != nil {
		return err
	}

	// query param since
	qrSince := o.Since
	qSince := qrSince.String()
	if qSince != "" {
		if err := r.SetQueryParam("since", qSince); err != nil {
			return err
		}
	}

	if o.TimeZone != nil {

		// query param time_zone
		var qrTimeZone string
		if o.TimeZone != nil {
			qrTimeZone = *o.TimeZone
		}
		qTimeZone := qrTimeZone
		if qTimeZone != "" {
			if err := r.SetQueryParam("time_zone", qTimeZone); err != nil {
				return err
			}
		}

	}

	// query param until
	qrUntil := o.Until
	qUntil := qrUntil.String()
	if qUntil != "" {
		if err := r.SetQueryParam("until", qUntil); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
