// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListNotificationsReader is a Reader for the ListNotifications structure.
type ListNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListNotificationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListNotificationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListNotificationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListNotificationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListNotificationsOK creates a ListNotificationsOK with default headers values
func NewListNotificationsOK() *ListNotificationsOK {
	return &ListNotificationsOK{}
}

/*ListNotificationsOK handles this case with default header values.

A paginated array of notifications.
*/
type ListNotificationsOK struct {
	Payload *models.ListNotificationsOKBody
}

func (o *ListNotificationsOK) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsOK  %+v", 200, o.Payload)
}

func (o *ListNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListNotificationsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsBadRequest creates a ListNotificationsBadRequest with default headers values
func NewListNotificationsBadRequest() *ListNotificationsBadRequest {
	return &ListNotificationsBadRequest{}
}

/*ListNotificationsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListNotificationsBadRequest struct {
	Payload *models.Error
}

func (o *ListNotificationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *ListNotificationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsUnauthorized creates a ListNotificationsUnauthorized with default headers values
func NewListNotificationsUnauthorized() *ListNotificationsUnauthorized {
	return &ListNotificationsUnauthorized{}
}

/*ListNotificationsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListNotificationsUnauthorized struct {
	Payload *models.Error
}

func (o *ListNotificationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListNotificationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsForbidden creates a ListNotificationsForbidden with default headers values
func NewListNotificationsForbidden() *ListNotificationsForbidden {
	return &ListNotificationsForbidden{}
}

/*ListNotificationsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListNotificationsForbidden struct {
	Payload *models.Error
}

func (o *ListNotificationsForbidden) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsForbidden  %+v", 403, o.Payload)
}

func (o *ListNotificationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListNotificationsTooManyRequests creates a ListNotificationsTooManyRequests with default headers values
func NewListNotificationsTooManyRequests() *ListNotificationsTooManyRequests {
	return &ListNotificationsTooManyRequests{}
}

/*ListNotificationsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListNotificationsTooManyRequests struct {
	Payload *models.Error
}

func (o *ListNotificationsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] listNotificationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListNotificationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
