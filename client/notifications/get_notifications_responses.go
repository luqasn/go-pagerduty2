// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetNotificationsReader is a Reader for the GetNotifications structure.
type GetNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNotificationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetNotificationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetNotificationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetNotificationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNotificationsOK creates a GetNotificationsOK with default headers values
func NewGetNotificationsOK() *GetNotificationsOK {
	return &GetNotificationsOK{}
}

/*GetNotificationsOK handles this case with default header values.

A paginated array of notifications.
*/
type GetNotificationsOK struct {
	Payload *models.GetNotificationsOKBody
}

func (o *GetNotificationsOK) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] getNotificationsOK  %+v", 200, o.Payload)
}

func (o *GetNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetNotificationsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsBadRequest creates a GetNotificationsBadRequest with default headers values
func NewGetNotificationsBadRequest() *GetNotificationsBadRequest {
	return &GetNotificationsBadRequest{}
}

/*GetNotificationsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetNotificationsBadRequest struct {
	Payload *models.Error
}

func (o *GetNotificationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] getNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetNotificationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsUnauthorized creates a GetNotificationsUnauthorized with default headers values
func NewGetNotificationsUnauthorized() *GetNotificationsUnauthorized {
	return &GetNotificationsUnauthorized{}
}

/*GetNotificationsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetNotificationsUnauthorized struct {
	Payload *models.Error
}

func (o *GetNotificationsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] getNotificationsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetNotificationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsForbidden creates a GetNotificationsForbidden with default headers values
func NewGetNotificationsForbidden() *GetNotificationsForbidden {
	return &GetNotificationsForbidden{}
}

/*GetNotificationsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetNotificationsForbidden struct {
	Payload *models.Error
}

func (o *GetNotificationsForbidden) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] getNotificationsForbidden  %+v", 403, o.Payload)
}

func (o *GetNotificationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsTooManyRequests creates a GetNotificationsTooManyRequests with default headers values
func NewGetNotificationsTooManyRequests() *GetNotificationsTooManyRequests {
	return &GetNotificationsTooManyRequests{}
}

/*GetNotificationsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetNotificationsTooManyRequests struct {
	Payload *models.Error
}

func (o *GetNotificationsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /notifications][%d] getNotificationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetNotificationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
