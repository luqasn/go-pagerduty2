// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAddonsParams creates a new GetAddonsParams object
// with the default values initialized.
func NewGetAddonsParams() *GetAddonsParams {
	var ()
	return &GetAddonsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAddonsParamsWithTimeout creates a new GetAddonsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAddonsParamsWithTimeout(timeout time.Duration) *GetAddonsParams {
	var ()
	return &GetAddonsParams{

		timeout: timeout,
	}
}

// NewGetAddonsParamsWithContext creates a new GetAddonsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAddonsParamsWithContext(ctx context.Context) *GetAddonsParams {
	var ()
	return &GetAddonsParams{

		Context: ctx,
	}
}

// NewGetAddonsParamsWithHTTPClient creates a new GetAddonsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAddonsParamsWithHTTPClient(client *http.Client) *GetAddonsParams {
	var ()
	return &GetAddonsParams{
		HTTPClient: client,
	}
}

/*GetAddonsParams contains all the parameters to send to the API endpoint
for the get addons operation typically these are written to a http.Request
*/
type GetAddonsParams struct {

	/*Filter
	  Filters the results, showing only add-ons of the given type

	*/
	Filter *string
	/*Include
	  Array of additional details to include.

	*/
	Include []string
	/*ServiceIds
	  Filters the results, showing only add-ons for the given services

	*/
	ServiceIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get addons params
func (o *GetAddonsParams) WithTimeout(timeout time.Duration) *GetAddonsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get addons params
func (o *GetAddonsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get addons params
func (o *GetAddonsParams) WithContext(ctx context.Context) *GetAddonsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get addons params
func (o *GetAddonsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get addons params
func (o *GetAddonsParams) WithHTTPClient(client *http.Client) *GetAddonsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get addons params
func (o *GetAddonsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the get addons params
func (o *GetAddonsParams) WithFilter(filter *string) *GetAddonsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get addons params
func (o *GetAddonsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithInclude adds the include to the get addons params
func (o *GetAddonsParams) WithInclude(include []string) *GetAddonsParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the get addons params
func (o *GetAddonsParams) SetInclude(include []string) {
	o.Include = include
}

// WithServiceIds adds the serviceIds to the get addons params
func (o *GetAddonsParams) WithServiceIds(serviceIds []string) *GetAddonsParams {
	o.SetServiceIds(serviceIds)
	return o
}

// SetServiceIds adds the serviceIds to the get addons params
func (o *GetAddonsParams) SetServiceIds(serviceIds []string) {
	o.ServiceIds = serviceIds
}

// WriteToRequest writes these params to a swagger request
func (o *GetAddonsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	valuesInclude := o.Include

	joinedInclude := swag.JoinByFormat(valuesInclude, "multi")
	// query array param include[]
	if err := r.SetQueryParam("include[]", joinedInclude...); err != nil {
		return err
	}

	valuesServiceIds := o.ServiceIds

	joinedServiceIds := swag.JoinByFormat(valuesServiceIds, "multi")
	// query array param service_ids[]
	if err := r.SetQueryParam("service_ids[]", joinedServiceIds...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
