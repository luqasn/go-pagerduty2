// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutAddonsIDReader is a Reader for the PutAddonsID structure.
type PutAddonsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAddonsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutAddonsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutAddonsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutAddonsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutAddonsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutAddonsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutAddonsIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutAddonsIDOK creates a PutAddonsIDOK with default headers values
func NewPutAddonsIDOK() *PutAddonsIDOK {
	return &PutAddonsIDOK{}
}

/*PutAddonsIDOK handles this case with default header values.

The add-on that was updated.
*/
type PutAddonsIDOK struct {
	Payload *models.PutAddonsIDOKBody
}

func (o *PutAddonsIDOK) Error() string {
	return fmt.Sprintf("[PUT /addons/{id}][%d] putAddonsIdOK  %+v", 200, o.Payload)
}

func (o *PutAddonsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutAddonsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAddonsIDBadRequest creates a PutAddonsIDBadRequest with default headers values
func NewPutAddonsIDBadRequest() *PutAddonsIDBadRequest {
	return &PutAddonsIDBadRequest{}
}

/*PutAddonsIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutAddonsIDBadRequest struct {
	Payload *models.Error
}

func (o *PutAddonsIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /addons/{id}][%d] putAddonsIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutAddonsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAddonsIDUnauthorized creates a PutAddonsIDUnauthorized with default headers values
func NewPutAddonsIDUnauthorized() *PutAddonsIDUnauthorized {
	return &PutAddonsIDUnauthorized{}
}

/*PutAddonsIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutAddonsIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutAddonsIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /addons/{id}][%d] putAddonsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutAddonsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAddonsIDForbidden creates a PutAddonsIDForbidden with default headers values
func NewPutAddonsIDForbidden() *PutAddonsIDForbidden {
	return &PutAddonsIDForbidden{}
}

/*PutAddonsIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutAddonsIDForbidden struct {
	Payload *models.Error
}

func (o *PutAddonsIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /addons/{id}][%d] putAddonsIdForbidden  %+v", 403, o.Payload)
}

func (o *PutAddonsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAddonsIDNotFound creates a PutAddonsIDNotFound with default headers values
func NewPutAddonsIDNotFound() *PutAddonsIDNotFound {
	return &PutAddonsIDNotFound{}
}

/*PutAddonsIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutAddonsIDNotFound struct {
	Payload *models.Error
}

func (o *PutAddonsIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /addons/{id}][%d] putAddonsIdNotFound  %+v", 404, o.Payload)
}

func (o *PutAddonsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutAddonsIDTooManyRequests creates a PutAddonsIDTooManyRequests with default headers values
func NewPutAddonsIDTooManyRequests() *PutAddonsIDTooManyRequests {
	return &PutAddonsIDTooManyRequests{}
}

/*PutAddonsIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutAddonsIDTooManyRequests struct {
	Payload *models.Error
}

func (o *PutAddonsIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /addons/{id}][%d] putAddonsIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutAddonsIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
