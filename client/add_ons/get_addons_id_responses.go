// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetAddonsIDReader is a Reader for the GetAddonsID structure.
type GetAddonsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAddonsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAddonsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAddonsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAddonsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetAddonsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAddonsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetAddonsIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAddonsIDOK creates a GetAddonsIDOK with default headers values
func NewGetAddonsIDOK() *GetAddonsIDOK {
	return &GetAddonsIDOK{}
}

/*GetAddonsIDOK handles this case with default header values.

The requested add-on.
*/
type GetAddonsIDOK struct {
	Payload *models.GetAddonsIDOKBody
}

func (o *GetAddonsIDOK) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonsIdOK  %+v", 200, o.Payload)
}

func (o *GetAddonsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetAddonsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsIDBadRequest creates a GetAddonsIDBadRequest with default headers values
func NewGetAddonsIDBadRequest() *GetAddonsIDBadRequest {
	return &GetAddonsIDBadRequest{}
}

/*GetAddonsIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetAddonsIDBadRequest struct {
	Payload *models.Error
}

func (o *GetAddonsIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonsIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetAddonsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsIDUnauthorized creates a GetAddonsIDUnauthorized with default headers values
func NewGetAddonsIDUnauthorized() *GetAddonsIDUnauthorized {
	return &GetAddonsIDUnauthorized{}
}

/*GetAddonsIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetAddonsIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetAddonsIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAddonsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsIDForbidden creates a GetAddonsIDForbidden with default headers values
func NewGetAddonsIDForbidden() *GetAddonsIDForbidden {
	return &GetAddonsIDForbidden{}
}

/*GetAddonsIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetAddonsIDForbidden struct {
	Payload *models.Error
}

func (o *GetAddonsIDForbidden) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonsIdForbidden  %+v", 403, o.Payload)
}

func (o *GetAddonsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsIDNotFound creates a GetAddonsIDNotFound with default headers values
func NewGetAddonsIDNotFound() *GetAddonsIDNotFound {
	return &GetAddonsIDNotFound{}
}

/*GetAddonsIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetAddonsIDNotFound struct {
	Payload *models.Error
}

func (o *GetAddonsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetAddonsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsIDTooManyRequests creates a GetAddonsIDTooManyRequests with default headers values
func NewGetAddonsIDTooManyRequests() *GetAddonsIDTooManyRequests {
	return &GetAddonsIDTooManyRequests{}
}

/*GetAddonsIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetAddonsIDTooManyRequests struct {
	Payload *models.Error
}

func (o *GetAddonsIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonsIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAddonsIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
