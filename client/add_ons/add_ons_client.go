// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new add ons API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for add ons API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAddonsID deletes an add on

Remove an existing add-on.
*/
func (a *Client) DeleteAddonsID(params *DeleteAddonsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAddonsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAddonsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAddonsID",
		Method:             "DELETE",
		PathPattern:        "/addons/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAddonsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAddonsIDNoContent), nil

}

/*
GetAddon gets an add on

Get details about an existing add-on.
*/
func (a *Client) GetAddon(params *GetAddonParams, authInfo runtime.ClientAuthInfoWriter) (*GetAddonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAddonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAddon",
		Method:             "GET",
		PathPattern:        "/addons/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAddonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAddonOK), nil

}

/*
InstallAddon installs an add on

Install an add-on for your account.
*/
func (a *Client) InstallAddon(params *InstallAddonParams, authInfo runtime.ClientAuthInfoWriter) (*InstallAddonCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallAddonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "installAddon",
		Method:             "POST",
		PathPattern:        "/addons",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &InstallAddonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InstallAddonCreated), nil

}

/*
ListAddons lists installed add ons

List all of the add-ons installed on your account.
*/
func (a *Client) ListAddons(params *ListAddonsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAddonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAddonsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAddons",
		Method:             "GET",
		PathPattern:        "/addons",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAddonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAddonsOK), nil

}

/*
UpdateAddon updates an add on

Update an existing add-on.
*/
func (a *Client) UpdateAddon(params *UpdateAddonParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAddonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAddonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAddon",
		Method:             "PUT",
		PathPattern:        "/addons/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAddonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAddonOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
