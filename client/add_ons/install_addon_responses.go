// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// InstallAddonReader is a Reader for the InstallAddon structure.
type InstallAddonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstallAddonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewInstallAddonCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewInstallAddonBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewInstallAddonUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewInstallAddonForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewInstallAddonTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewInstallAddonCreated creates a InstallAddonCreated with default headers values
func NewInstallAddonCreated() *InstallAddonCreated {
	return &InstallAddonCreated{}
}

/*InstallAddonCreated handles this case with default header values.

The add-on that was installed.
*/
type InstallAddonCreated struct {
	Payload *models.InstallAddonCreatedBody
}

func (o *InstallAddonCreated) Error() string {
	return fmt.Sprintf("[POST /addons][%d] installAddonCreated  %+v", 201, o.Payload)
}

func (o *InstallAddonCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.InstallAddonCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallAddonBadRequest creates a InstallAddonBadRequest with default headers values
func NewInstallAddonBadRequest() *InstallAddonBadRequest {
	return &InstallAddonBadRequest{}
}

/*InstallAddonBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type InstallAddonBadRequest struct {
	Payload *models.Error
}

func (o *InstallAddonBadRequest) Error() string {
	return fmt.Sprintf("[POST /addons][%d] installAddonBadRequest  %+v", 400, o.Payload)
}

func (o *InstallAddonBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallAddonUnauthorized creates a InstallAddonUnauthorized with default headers values
func NewInstallAddonUnauthorized() *InstallAddonUnauthorized {
	return &InstallAddonUnauthorized{}
}

/*InstallAddonUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type InstallAddonUnauthorized struct {
	Payload *models.Error
}

func (o *InstallAddonUnauthorized) Error() string {
	return fmt.Sprintf("[POST /addons][%d] installAddonUnauthorized  %+v", 401, o.Payload)
}

func (o *InstallAddonUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallAddonForbidden creates a InstallAddonForbidden with default headers values
func NewInstallAddonForbidden() *InstallAddonForbidden {
	return &InstallAddonForbidden{}
}

/*InstallAddonForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type InstallAddonForbidden struct {
	Payload *models.Error
}

func (o *InstallAddonForbidden) Error() string {
	return fmt.Sprintf("[POST /addons][%d] installAddonForbidden  %+v", 403, o.Payload)
}

func (o *InstallAddonForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstallAddonTooManyRequests creates a InstallAddonTooManyRequests with default headers values
func NewInstallAddonTooManyRequests() *InstallAddonTooManyRequests {
	return &InstallAddonTooManyRequests{}
}

/*InstallAddonTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type InstallAddonTooManyRequests struct {
	Payload *models.Error
}

func (o *InstallAddonTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /addons][%d] installAddonTooManyRequests  %+v", 429, o.Payload)
}

func (o *InstallAddonTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
