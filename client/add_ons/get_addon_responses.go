// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetAddonReader is a Reader for the GetAddon structure.
type GetAddonReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAddonReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAddonOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAddonBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAddonUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetAddonForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetAddonNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetAddonTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAddonOK creates a GetAddonOK with default headers values
func NewGetAddonOK() *GetAddonOK {
	return &GetAddonOK{}
}

/*GetAddonOK handles this case with default header values.

The requested add-on.
*/
type GetAddonOK struct {
	Payload *models.GetAddonOKBody
}

func (o *GetAddonOK) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonOK  %+v", 200, o.Payload)
}

func (o *GetAddonOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetAddonOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonBadRequest creates a GetAddonBadRequest with default headers values
func NewGetAddonBadRequest() *GetAddonBadRequest {
	return &GetAddonBadRequest{}
}

/*GetAddonBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetAddonBadRequest struct {
	Payload *models.Error
}

func (o *GetAddonBadRequest) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonBadRequest  %+v", 400, o.Payload)
}

func (o *GetAddonBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonUnauthorized creates a GetAddonUnauthorized with default headers values
func NewGetAddonUnauthorized() *GetAddonUnauthorized {
	return &GetAddonUnauthorized{}
}

/*GetAddonUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetAddonUnauthorized struct {
	Payload *models.Error
}

func (o *GetAddonUnauthorized) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAddonUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonForbidden creates a GetAddonForbidden with default headers values
func NewGetAddonForbidden() *GetAddonForbidden {
	return &GetAddonForbidden{}
}

/*GetAddonForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetAddonForbidden struct {
	Payload *models.Error
}

func (o *GetAddonForbidden) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonForbidden  %+v", 403, o.Payload)
}

func (o *GetAddonForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonNotFound creates a GetAddonNotFound with default headers values
func NewGetAddonNotFound() *GetAddonNotFound {
	return &GetAddonNotFound{}
}

/*GetAddonNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetAddonNotFound struct {
	Payload *models.Error
}

func (o *GetAddonNotFound) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonNotFound  %+v", 404, o.Payload)
}

func (o *GetAddonNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonTooManyRequests creates a GetAddonTooManyRequests with default headers values
func NewGetAddonTooManyRequests() *GetAddonTooManyRequests {
	return &GetAddonTooManyRequests{}
}

/*GetAddonTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetAddonTooManyRequests struct {
	Payload *models.Error
}

func (o *GetAddonTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /addons/{id}][%d] getAddonTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAddonTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
