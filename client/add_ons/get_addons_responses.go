// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetAddonsReader is a Reader for the GetAddons structure.
type GetAddonsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAddonsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetAddonsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetAddonsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetAddonsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetAddonsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetAddonsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetAddonsOK creates a GetAddonsOK with default headers values
func NewGetAddonsOK() *GetAddonsOK {
	return &GetAddonsOK{}
}

/*GetAddonsOK handles this case with default header values.

A paginated array of installed add-ons.
*/
type GetAddonsOK struct {
	Payload *models.GetAddonsOKBody
}

func (o *GetAddonsOK) Error() string {
	return fmt.Sprintf("[GET /addons][%d] getAddonsOK  %+v", 200, o.Payload)
}

func (o *GetAddonsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetAddonsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsBadRequest creates a GetAddonsBadRequest with default headers values
func NewGetAddonsBadRequest() *GetAddonsBadRequest {
	return &GetAddonsBadRequest{}
}

/*GetAddonsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetAddonsBadRequest struct {
	Payload *models.Error
}

func (o *GetAddonsBadRequest) Error() string {
	return fmt.Sprintf("[GET /addons][%d] getAddonsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAddonsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsUnauthorized creates a GetAddonsUnauthorized with default headers values
func NewGetAddonsUnauthorized() *GetAddonsUnauthorized {
	return &GetAddonsUnauthorized{}
}

/*GetAddonsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetAddonsUnauthorized struct {
	Payload *models.Error
}

func (o *GetAddonsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /addons][%d] getAddonsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAddonsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsForbidden creates a GetAddonsForbidden with default headers values
func NewGetAddonsForbidden() *GetAddonsForbidden {
	return &GetAddonsForbidden{}
}

/*GetAddonsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetAddonsForbidden struct {
	Payload *models.Error
}

func (o *GetAddonsForbidden) Error() string {
	return fmt.Sprintf("[GET /addons][%d] getAddonsForbidden  %+v", 403, o.Payload)
}

func (o *GetAddonsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAddonsTooManyRequests creates a GetAddonsTooManyRequests with default headers values
func NewGetAddonsTooManyRequests() *GetAddonsTooManyRequests {
	return &GetAddonsTooManyRequests{}
}

/*GetAddonsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetAddonsTooManyRequests struct {
	Payload *models.Error
}

func (o *GetAddonsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /addons][%d] getAddonsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAddonsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
