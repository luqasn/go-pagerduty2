// Code generated by go-swagger; DO NOT EDIT.

package add_ons

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListAddonsReader is a Reader for the ListAddons structure.
type ListAddonsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAddonsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListAddonsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListAddonsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListAddonsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListAddonsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListAddonsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListAddonsOK creates a ListAddonsOK with default headers values
func NewListAddonsOK() *ListAddonsOK {
	return &ListAddonsOK{}
}

/*ListAddonsOK handles this case with default header values.

A paginated array of installed add-ons.
*/
type ListAddonsOK struct {
	Payload *models.ListAddonsOKBody
}

func (o *ListAddonsOK) Error() string {
	return fmt.Sprintf("[GET /addons][%d] listAddonsOK  %+v", 200, o.Payload)
}

func (o *ListAddonsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListAddonsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddonsBadRequest creates a ListAddonsBadRequest with default headers values
func NewListAddonsBadRequest() *ListAddonsBadRequest {
	return &ListAddonsBadRequest{}
}

/*ListAddonsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListAddonsBadRequest struct {
	Payload *models.Error
}

func (o *ListAddonsBadRequest) Error() string {
	return fmt.Sprintf("[GET /addons][%d] listAddonsBadRequest  %+v", 400, o.Payload)
}

func (o *ListAddonsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddonsUnauthorized creates a ListAddonsUnauthorized with default headers values
func NewListAddonsUnauthorized() *ListAddonsUnauthorized {
	return &ListAddonsUnauthorized{}
}

/*ListAddonsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListAddonsUnauthorized struct {
	Payload *models.Error
}

func (o *ListAddonsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /addons][%d] listAddonsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAddonsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddonsForbidden creates a ListAddonsForbidden with default headers values
func NewListAddonsForbidden() *ListAddonsForbidden {
	return &ListAddonsForbidden{}
}

/*ListAddonsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListAddonsForbidden struct {
	Payload *models.Error
}

func (o *ListAddonsForbidden) Error() string {
	return fmt.Sprintf("[GET /addons][%d] listAddonsForbidden  %+v", 403, o.Payload)
}

func (o *ListAddonsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAddonsTooManyRequests creates a ListAddonsTooManyRequests with default headers values
func NewListAddonsTooManyRequests() *ListAddonsTooManyRequests {
	return &ListAddonsTooManyRequests{}
}

/*ListAddonsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListAddonsTooManyRequests struct {
	Payload *models.Error
}

func (o *ListAddonsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /addons][%d] listAddonsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListAddonsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
