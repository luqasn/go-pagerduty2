// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutIncidentsIDAlertsReader is a Reader for the PutIncidentsIDAlerts structure.
type PutIncidentsIDAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutIncidentsIDAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutIncidentsIDAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutIncidentsIDAlertsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutIncidentsIDAlertsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutIncidentsIDAlertsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutIncidentsIDAlertsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutIncidentsIDAlertsOK creates a PutIncidentsIDAlertsOK with default headers values
func NewPutIncidentsIDAlertsOK() *PutIncidentsIDAlertsOK {
	return &PutIncidentsIDAlertsOK{}
}

/*PutIncidentsIDAlertsOK handles this case with default header values.

All of the updates succeeded.
*/
type PutIncidentsIDAlertsOK struct {
	Payload *models.PutIncidentsIDAlertsOKBody
}

func (o *PutIncidentsIDAlertsOK) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts][%d] putIncidentsIdAlertsOK  %+v", 200, o.Payload)
}

func (o *PutIncidentsIDAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutIncidentsIDAlertsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsBadRequest creates a PutIncidentsIDAlertsBadRequest with default headers values
func NewPutIncidentsIDAlertsBadRequest() *PutIncidentsIDAlertsBadRequest {
	return &PutIncidentsIDAlertsBadRequest{}
}

/*PutIncidentsIDAlertsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutIncidentsIDAlertsBadRequest struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts][%d] putIncidentsIdAlertsBadRequest  %+v", 400, o.Payload)
}

func (o *PutIncidentsIDAlertsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsUnauthorized creates a PutIncidentsIDAlertsUnauthorized with default headers values
func NewPutIncidentsIDAlertsUnauthorized() *PutIncidentsIDAlertsUnauthorized {
	return &PutIncidentsIDAlertsUnauthorized{}
}

/*PutIncidentsIDAlertsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutIncidentsIDAlertsUnauthorized struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts][%d] putIncidentsIdAlertsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutIncidentsIDAlertsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsForbidden creates a PutIncidentsIDAlertsForbidden with default headers values
func NewPutIncidentsIDAlertsForbidden() *PutIncidentsIDAlertsForbidden {
	return &PutIncidentsIDAlertsForbidden{}
}

/*PutIncidentsIDAlertsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutIncidentsIDAlertsForbidden struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts][%d] putIncidentsIdAlertsForbidden  %+v", 403, o.Payload)
}

func (o *PutIncidentsIDAlertsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsTooManyRequests creates a PutIncidentsIDAlertsTooManyRequests with default headers values
func NewPutIncidentsIDAlertsTooManyRequests() *PutIncidentsIDAlertsTooManyRequests {
	return &PutIncidentsIDAlertsTooManyRequests{}
}

/*PutIncidentsIDAlertsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutIncidentsIDAlertsTooManyRequests struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts][%d] putIncidentsIdAlertsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutIncidentsIDAlertsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
