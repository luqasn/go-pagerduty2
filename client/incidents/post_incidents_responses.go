// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PostIncidentsReader is a Reader for the PostIncidents structure.
type PostIncidentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostIncidentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostIncidentsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostIncidentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostIncidentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostIncidentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPostIncidentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostIncidentsCreated creates a PostIncidentsCreated with default headers values
func NewPostIncidentsCreated() *PostIncidentsCreated {
	return &PostIncidentsCreated{}
}

/*PostIncidentsCreated handles this case with default header values.

The incident object created.
*/
type PostIncidentsCreated struct {
	Payload *models.PostIncidentsCreatedBody
}

func (o *PostIncidentsCreated) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] postIncidentsCreated  %+v", 201, o.Payload)
}

func (o *PostIncidentsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostIncidentsCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsBadRequest creates a PostIncidentsBadRequest with default headers values
func NewPostIncidentsBadRequest() *PostIncidentsBadRequest {
	return &PostIncidentsBadRequest{}
}

/*PostIncidentsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PostIncidentsBadRequest struct {
	Payload *models.Error
}

func (o *PostIncidentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] postIncidentsBadRequest  %+v", 400, o.Payload)
}

func (o *PostIncidentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsUnauthorized creates a PostIncidentsUnauthorized with default headers values
func NewPostIncidentsUnauthorized() *PostIncidentsUnauthorized {
	return &PostIncidentsUnauthorized{}
}

/*PostIncidentsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PostIncidentsUnauthorized struct {
	Payload *models.Error
}

func (o *PostIncidentsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] postIncidentsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostIncidentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsForbidden creates a PostIncidentsForbidden with default headers values
func NewPostIncidentsForbidden() *PostIncidentsForbidden {
	return &PostIncidentsForbidden{}
}

/*PostIncidentsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PostIncidentsForbidden struct {
	Payload *models.Error
}

func (o *PostIncidentsForbidden) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] postIncidentsForbidden  %+v", 403, o.Payload)
}

func (o *PostIncidentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsTooManyRequests creates a PostIncidentsTooManyRequests with default headers values
func NewPostIncidentsTooManyRequests() *PostIncidentsTooManyRequests {
	return &PostIncidentsTooManyRequests{}
}

/*PostIncidentsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PostIncidentsTooManyRequests struct {
	Payload *models.Error
}

func (o *PostIncidentsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] postIncidentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostIncidentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
