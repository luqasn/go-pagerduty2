// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PostIncidentsIDSnoozeReader is a Reader for the PostIncidentsIDSnooze structure.
type PostIncidentsIDSnoozeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostIncidentsIDSnoozeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewPostIncidentsIDSnoozeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostIncidentsIDSnoozeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostIncidentsIDSnoozeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostIncidentsIDSnoozeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostIncidentsIDSnoozeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPostIncidentsIDSnoozeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostIncidentsIDSnoozeCreated creates a PostIncidentsIDSnoozeCreated with default headers values
func NewPostIncidentsIDSnoozeCreated() *PostIncidentsIDSnoozeCreated {
	return &PostIncidentsIDSnoozeCreated{}
}

/*PostIncidentsIDSnoozeCreated handles this case with default header values.

The incident that was successfully snoozed.
*/
type PostIncidentsIDSnoozeCreated struct {
	Payload *models.PostIncidentsIDSnoozeCreatedBody
}

func (o *PostIncidentsIDSnoozeCreated) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] postIncidentsIdSnoozeCreated  %+v", 201, o.Payload)
}

func (o *PostIncidentsIDSnoozeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostIncidentsIDSnoozeCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDSnoozeBadRequest creates a PostIncidentsIDSnoozeBadRequest with default headers values
func NewPostIncidentsIDSnoozeBadRequest() *PostIncidentsIDSnoozeBadRequest {
	return &PostIncidentsIDSnoozeBadRequest{}
}

/*PostIncidentsIDSnoozeBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PostIncidentsIDSnoozeBadRequest struct {
	Payload *models.Error
}

func (o *PostIncidentsIDSnoozeBadRequest) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] postIncidentsIdSnoozeBadRequest  %+v", 400, o.Payload)
}

func (o *PostIncidentsIDSnoozeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDSnoozeUnauthorized creates a PostIncidentsIDSnoozeUnauthorized with default headers values
func NewPostIncidentsIDSnoozeUnauthorized() *PostIncidentsIDSnoozeUnauthorized {
	return &PostIncidentsIDSnoozeUnauthorized{}
}

/*PostIncidentsIDSnoozeUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PostIncidentsIDSnoozeUnauthorized struct {
	Payload *models.Error
}

func (o *PostIncidentsIDSnoozeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] postIncidentsIdSnoozeUnauthorized  %+v", 401, o.Payload)
}

func (o *PostIncidentsIDSnoozeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDSnoozeForbidden creates a PostIncidentsIDSnoozeForbidden with default headers values
func NewPostIncidentsIDSnoozeForbidden() *PostIncidentsIDSnoozeForbidden {
	return &PostIncidentsIDSnoozeForbidden{}
}

/*PostIncidentsIDSnoozeForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PostIncidentsIDSnoozeForbidden struct {
	Payload *models.Error
}

func (o *PostIncidentsIDSnoozeForbidden) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] postIncidentsIdSnoozeForbidden  %+v", 403, o.Payload)
}

func (o *PostIncidentsIDSnoozeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDSnoozeNotFound creates a PostIncidentsIDSnoozeNotFound with default headers values
func NewPostIncidentsIDSnoozeNotFound() *PostIncidentsIDSnoozeNotFound {
	return &PostIncidentsIDSnoozeNotFound{}
}

/*PostIncidentsIDSnoozeNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostIncidentsIDSnoozeNotFound struct {
	Payload *models.Error
}

func (o *PostIncidentsIDSnoozeNotFound) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] postIncidentsIdSnoozeNotFound  %+v", 404, o.Payload)
}

func (o *PostIncidentsIDSnoozeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDSnoozeTooManyRequests creates a PostIncidentsIDSnoozeTooManyRequests with default headers values
func NewPostIncidentsIDSnoozeTooManyRequests() *PostIncidentsIDSnoozeTooManyRequests {
	return &PostIncidentsIDSnoozeTooManyRequests{}
}

/*PostIncidentsIDSnoozeTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PostIncidentsIDSnoozeTooManyRequests struct {
	Payload *models.Error
}

func (o *PostIncidentsIDSnoozeTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] postIncidentsIdSnoozeTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostIncidentsIDSnoozeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
