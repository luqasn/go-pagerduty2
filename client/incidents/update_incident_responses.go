// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// UpdateIncidentReader is a Reader for the UpdateIncident structure.
type UpdateIncidentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateIncidentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateIncidentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateIncidentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateIncidentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateIncidentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewUpdateIncidentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateIncidentOK creates a UpdateIncidentOK with default headers values
func NewUpdateIncidentOK() *UpdateIncidentOK {
	return &UpdateIncidentOK{}
}

/*UpdateIncidentOK handles this case with default header values.

The incident was updated.
*/
type UpdateIncidentOK struct {
	Payload *models.UpdateIncidentOKBody
}

func (o *UpdateIncidentOK) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}][%d] updateIncidentOK  %+v", 200, o.Payload)
}

func (o *UpdateIncidentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateIncidentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIncidentUnauthorized creates a UpdateIncidentUnauthorized with default headers values
func NewUpdateIncidentUnauthorized() *UpdateIncidentUnauthorized {
	return &UpdateIncidentUnauthorized{}
}

/*UpdateIncidentUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type UpdateIncidentUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateIncidentUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}][%d] updateIncidentUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateIncidentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIncidentForbidden creates a UpdateIncidentForbidden with default headers values
func NewUpdateIncidentForbidden() *UpdateIncidentForbidden {
	return &UpdateIncidentForbidden{}
}

/*UpdateIncidentForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type UpdateIncidentForbidden struct {
	Payload *models.Error
}

func (o *UpdateIncidentForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}][%d] updateIncidentForbidden  %+v", 403, o.Payload)
}

func (o *UpdateIncidentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIncidentNotFound creates a UpdateIncidentNotFound with default headers values
func NewUpdateIncidentNotFound() *UpdateIncidentNotFound {
	return &UpdateIncidentNotFound{}
}

/*UpdateIncidentNotFound handles this case with default header values.

The requested resource was not found.
*/
type UpdateIncidentNotFound struct {
	Payload *models.Error
}

func (o *UpdateIncidentNotFound) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}][%d] updateIncidentNotFound  %+v", 404, o.Payload)
}

func (o *UpdateIncidentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateIncidentTooManyRequests creates a UpdateIncidentTooManyRequests with default headers values
func NewUpdateIncidentTooManyRequests() *UpdateIncidentTooManyRequests {
	return &UpdateIncidentTooManyRequests{}
}

/*UpdateIncidentTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type UpdateIncidentTooManyRequests struct {
	Payload *models.Error
}

func (o *UpdateIncidentTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}][%d] updateIncidentTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateIncidentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
