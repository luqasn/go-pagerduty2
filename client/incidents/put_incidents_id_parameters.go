// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// NewPutIncidentsIDParams creates a new PutIncidentsIDParams object
// with the default values initialized.
func NewPutIncidentsIDParams() *PutIncidentsIDParams {
	var ()
	return &PutIncidentsIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutIncidentsIDParamsWithTimeout creates a new PutIncidentsIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutIncidentsIDParamsWithTimeout(timeout time.Duration) *PutIncidentsIDParams {
	var ()
	return &PutIncidentsIDParams{

		timeout: timeout,
	}
}

// NewPutIncidentsIDParamsWithContext creates a new PutIncidentsIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutIncidentsIDParamsWithContext(ctx context.Context) *PutIncidentsIDParams {
	var ()
	return &PutIncidentsIDParams{

		Context: ctx,
	}
}

// NewPutIncidentsIDParamsWithHTTPClient creates a new PutIncidentsIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutIncidentsIDParamsWithHTTPClient(client *http.Client) *PutIncidentsIDParams {
	var ()
	return &PutIncidentsIDParams{
		HTTPClient: client,
	}
}

/*PutIncidentsIDParams contains all the parameters to send to the API endpoint
for the put incidents ID operation typically these are written to a http.Request
*/
type PutIncidentsIDParams struct {

	/*From
	  The email address of the user making the request.

	*/
	From strfmt.Email
	/*ID
	  The id of the incident to update.

	*/
	ID string
	/*Payload*/
	Payload *models.PutIncidentsIDParamsBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put incidents ID params
func (o *PutIncidentsIDParams) WithTimeout(timeout time.Duration) *PutIncidentsIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put incidents ID params
func (o *PutIncidentsIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put incidents ID params
func (o *PutIncidentsIDParams) WithContext(ctx context.Context) *PutIncidentsIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put incidents ID params
func (o *PutIncidentsIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put incidents ID params
func (o *PutIncidentsIDParams) WithHTTPClient(client *http.Client) *PutIncidentsIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put incidents ID params
func (o *PutIncidentsIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the put incidents ID params
func (o *PutIncidentsIDParams) WithFrom(from strfmt.Email) *PutIncidentsIDParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the put incidents ID params
func (o *PutIncidentsIDParams) SetFrom(from strfmt.Email) {
	o.From = from
}

// WithID adds the id to the put incidents ID params
func (o *PutIncidentsIDParams) WithID(id string) *PutIncidentsIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put incidents ID params
func (o *PutIncidentsIDParams) SetID(id string) {
	o.ID = id
}

// WithPayload adds the payload to the put incidents ID params
func (o *PutIncidentsIDParams) WithPayload(payload *models.PutIncidentsIDParamsBody) *PutIncidentsIDParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the put incidents ID params
func (o *PutIncidentsIDParams) SetPayload(payload *models.PutIncidentsIDParamsBody) {
	o.Payload = payload
}

// WriteToRequest writes these params to a swagger request
func (o *PutIncidentsIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param From
	if err := r.SetHeaderParam("From", o.From.String()); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.Payload != nil {
		if err := r.SetBodyParam(o.Payload); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
