// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListLogEntriesReader is a Reader for the ListLogEntries structure.
type ListLogEntriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListLogEntriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListLogEntriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListLogEntriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListLogEntriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListLogEntriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListLogEntriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListLogEntriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListLogEntriesOK creates a ListLogEntriesOK with default headers values
func NewListLogEntriesOK() *ListLogEntriesOK {
	return &ListLogEntriesOK{}
}

/*ListLogEntriesOK handles this case with default header values.

A paginated array of the incident's log entries.
*/
type ListLogEntriesOK struct {
	Payload *models.ListLogEntriesOKBody
}

func (o *ListLogEntriesOK) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/log_entries][%d] listLogEntriesOK  %+v", 200, o.Payload)
}

func (o *ListLogEntriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListLogEntriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogEntriesBadRequest creates a ListLogEntriesBadRequest with default headers values
func NewListLogEntriesBadRequest() *ListLogEntriesBadRequest {
	return &ListLogEntriesBadRequest{}
}

/*ListLogEntriesBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListLogEntriesBadRequest struct {
	Payload *models.Error
}

func (o *ListLogEntriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/log_entries][%d] listLogEntriesBadRequest  %+v", 400, o.Payload)
}

func (o *ListLogEntriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogEntriesUnauthorized creates a ListLogEntriesUnauthorized with default headers values
func NewListLogEntriesUnauthorized() *ListLogEntriesUnauthorized {
	return &ListLogEntriesUnauthorized{}
}

/*ListLogEntriesUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListLogEntriesUnauthorized struct {
	Payload *models.Error
}

func (o *ListLogEntriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/log_entries][%d] listLogEntriesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListLogEntriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogEntriesForbidden creates a ListLogEntriesForbidden with default headers values
func NewListLogEntriesForbidden() *ListLogEntriesForbidden {
	return &ListLogEntriesForbidden{}
}

/*ListLogEntriesForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListLogEntriesForbidden struct {
	Payload *models.Error
}

func (o *ListLogEntriesForbidden) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/log_entries][%d] listLogEntriesForbidden  %+v", 403, o.Payload)
}

func (o *ListLogEntriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogEntriesNotFound creates a ListLogEntriesNotFound with default headers values
func NewListLogEntriesNotFound() *ListLogEntriesNotFound {
	return &ListLogEntriesNotFound{}
}

/*ListLogEntriesNotFound handles this case with default header values.

The requested resource was not found.
*/
type ListLogEntriesNotFound struct {
	Payload *models.Error
}

func (o *ListLogEntriesNotFound) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/log_entries][%d] listLogEntriesNotFound  %+v", 404, o.Payload)
}

func (o *ListLogEntriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListLogEntriesTooManyRequests creates a ListLogEntriesTooManyRequests with default headers values
func NewListLogEntriesTooManyRequests() *ListLogEntriesTooManyRequests {
	return &ListLogEntriesTooManyRequests{}
}

/*ListLogEntriesTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListLogEntriesTooManyRequests struct {
	Payload *models.Error
}

func (o *ListLogEntriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/log_entries][%d] listLogEntriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListLogEntriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
