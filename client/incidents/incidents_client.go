// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new incidents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for incidents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateIncident creates an incident

Create an incident synchronously without a corresponding event from a monitoring service.
*/
func (a *Client) CreateIncident(params *CreateIncidentParams, authInfo runtime.ClientAuthInfoWriter) (*CreateIncidentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIncidentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createIncident",
		Method:             "POST",
		PathPattern:        "/incidents",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateIncidentCreated), nil

}

/*
CreateNote creates a note on an incident

Create a new note for the specified incident.
*/
func (a *Client) CreateNote(params *CreateNoteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNote",
		Method:             "POST",
		PathPattern:        "/incidents/{id}/notes",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNoteOK), nil

}

/*
GetAlert gets an alert

Show detailed information about an alert. Accepts an alert id.
*/
func (a *Client) GetAlert(params *GetAlertParams, authInfo runtime.ClientAuthInfoWriter) (*GetAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAlert",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/alerts/{alert_id}/",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAlertOK), nil

}

/*
GetIncident gets an incident

Show detailed information about an incident. Accepts either an incident id, or an incident number.
*/
func (a *Client) GetIncident(params *GetIncidentParams, authInfo runtime.ClientAuthInfoWriter) (*GetIncidentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIncident",
		Method:             "GET",
		PathPattern:        "/incidents/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncidentOK), nil

}

/*
ListAlerts lists alerts for an incident

List alerts for the specified incident.
*/
func (a *Client) ListAlerts(params *ListAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAlerts",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/alerts",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAlertsOK), nil

}

/*
ListIncidents lists incidents

List existing incidents.
*/
func (a *Client) ListIncidents(params *ListIncidentsParams, authInfo runtime.ClientAuthInfoWriter) (*ListIncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listIncidents",
		Method:             "GET",
		PathPattern:        "/incidents",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListIncidentsOK), nil

}

/*
ListLogEntries lists log entries for an incident

List log entries for the specified incident.
*/
func (a *Client) ListLogEntries(params *ListLogEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*ListLogEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLogEntries",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/log_entries",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLogEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLogEntriesOK), nil

}

/*
ListNotes lists notes for an incident

List existing notes for the specified incident.
*/
func (a *Client) ListNotes(params *ListNotesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNotes",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/notes",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNotesOK), nil

}

/*
ManageAlerts manages alerts

Resolve multiple alerts or associate them with different incidents.
*/
func (a *Client) ManageAlerts(params *ManageAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*ManageAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManageAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "manageAlerts",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}/alerts",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManageAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ManageAlertsOK), nil

}

/*
ManageIncidents manages incidents

Acknowledge, resolve, escalate or reassign one or more incidents.
*/
func (a *Client) ManageIncidents(params *ManageIncidentsParams, authInfo runtime.ClientAuthInfoWriter) (*ManageIncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewManageIncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "manageIncidents",
		Method:             "PUT",
		PathPattern:        "/incidents",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ManageIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ManageIncidentsOK), nil

}

/*
MergeIncidents merges incidents

Merge a list of source incidents into this incident.
*/
func (a *Client) MergeIncidents(params *MergeIncidentsParams, authInfo runtime.ClientAuthInfoWriter) (*MergeIncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMergeIncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "mergeIncidents",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}/merge",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MergeIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*MergeIncidentsOK), nil

}

/*
SnoozeIncident snoozes an incident

Snooze an incident.
*/
func (a *Client) SnoozeIncident(params *SnoozeIncidentParams, authInfo runtime.ClientAuthInfoWriter) (*SnoozeIncidentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnoozeIncidentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "snoozeIncident",
		Method:             "POST",
		PathPattern:        "/incidents/{id}/snooze",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SnoozeIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SnoozeIncidentCreated), nil

}

/*
UpdateAlert updates an alert

Resolve an alert or associate an alert with a new parent incident.
*/
func (a *Client) UpdateAlert(params *UpdateAlertParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAlert",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}/alerts/{alert_id}/",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAlertOK), nil

}

/*
UpdateIncident updates an incident

Acknowledge, resolve, escalate or reassign an incident.
*/
func (a *Client) UpdateIncident(params *UpdateIncidentParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateIncidentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIncidentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIncident",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateIncidentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateIncidentOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
