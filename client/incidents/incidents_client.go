// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new incidents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for incidents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetIncidents lists incidents

List existing incidents.
*/
func (a *Client) GetIncidents(params *GetIncidentsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIncidents",
		Method:             "GET",
		PathPattern:        "/incidents",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncidentsOK), nil

}

/*
GetIncidentsID gets an incident

Show detailed information about an incident. Accepts either an incident id, or an incident number.
*/
func (a *Client) GetIncidentsID(params *GetIncidentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIncidentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIncidentsID",
		Method:             "GET",
		PathPattern:        "/incidents/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncidentsIDOK), nil

}

/*
GetIncidentsIDAlerts lists alerts for an incident

List alerts for the specified incident.
*/
func (a *Client) GetIncidentsIDAlerts(params *GetIncidentsIDAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*GetIncidentsIDAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentsIDAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIncidentsIDAlerts",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/alerts",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentsIDAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncidentsIDAlertsOK), nil

}

/*
GetIncidentsIDAlertsAlertID gets an alert

Show detailed information about an alert. Accepts an alert id.
*/
func (a *Client) GetIncidentsIDAlertsAlertID(params *GetIncidentsIDAlertsAlertIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetIncidentsIDAlertsAlertIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentsIDAlertsAlertIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIncidentsIDAlertsAlertID",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/alerts/{alert_id}/",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentsIDAlertsAlertIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncidentsIDAlertsAlertIDOK), nil

}

/*
GetIncidentsIDLogEntries lists log entries for an incident

List log entries for the specified incident.
*/
func (a *Client) GetIncidentsIDLogEntries(params *GetIncidentsIDLogEntriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIncidentsIDLogEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentsIDLogEntriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIncidentsIDLogEntries",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/log_entries",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentsIDLogEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncidentsIDLogEntriesOK), nil

}

/*
GetIncidentsIDNotes lists notes for an incident

List existing notes for the specified incident.
*/
func (a *Client) GetIncidentsIDNotes(params *GetIncidentsIDNotesParams, authInfo runtime.ClientAuthInfoWriter) (*GetIncidentsIDNotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIncidentsIDNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetIncidentsIDNotes",
		Method:             "GET",
		PathPattern:        "/incidents/{id}/notes",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetIncidentsIDNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIncidentsIDNotesOK), nil

}

/*
PostIncidents creates an incident

Create an incident synchronously without a corresponding event from a monitoring service.
*/
func (a *Client) PostIncidents(params *PostIncidentsParams, authInfo runtime.ClientAuthInfoWriter) (*PostIncidentsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIncidents",
		Method:             "POST",
		PathPattern:        "/incidents",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIncidentsCreated), nil

}

/*
PostIncidentsIDNotes creates a note on an incident

Create a new note for the specified incident.
*/
func (a *Client) PostIncidentsIDNotes(params *PostIncidentsIDNotesParams, authInfo runtime.ClientAuthInfoWriter) (*PostIncidentsIDNotesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIncidentsIDNotesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIncidentsIDNotes",
		Method:             "POST",
		PathPattern:        "/incidents/{id}/notes",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIncidentsIDNotesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIncidentsIDNotesOK), nil

}

/*
PostIncidentsIDSnooze snoozes an incident

Snooze an incident.
*/
func (a *Client) PostIncidentsIDSnooze(params *PostIncidentsIDSnoozeParams, authInfo runtime.ClientAuthInfoWriter) (*PostIncidentsIDSnoozeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostIncidentsIDSnoozeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostIncidentsIDSnooze",
		Method:             "POST",
		PathPattern:        "/incidents/{id}/snooze",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostIncidentsIDSnoozeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostIncidentsIDSnoozeCreated), nil

}

/*
PutIncidents manages incidents

Acknowledge, resolve, escalate or reassign one or more incidents.
*/
func (a *Client) PutIncidents(params *PutIncidentsParams, authInfo runtime.ClientAuthInfoWriter) (*PutIncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIncidents",
		Method:             "PUT",
		PathPattern:        "/incidents",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIncidentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIncidentsOK), nil

}

/*
PutIncidentsID updates an incident

Acknowledge, resolve, escalate or reassign an incident.
*/
func (a *Client) PutIncidentsID(params *PutIncidentsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIncidentsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIncidentsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIncidentsID",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIncidentsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIncidentsIDOK), nil

}

/*
PutIncidentsIDAlerts manages alerts

Resolve multiple alerts or associate them with different incidents.
*/
func (a *Client) PutIncidentsIDAlerts(params *PutIncidentsIDAlertsParams, authInfo runtime.ClientAuthInfoWriter) (*PutIncidentsIDAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIncidentsIDAlertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIncidentsIDAlerts",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}/alerts",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIncidentsIDAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIncidentsIDAlertsOK), nil

}

/*
PutIncidentsIDAlertsAlertID updates an alert

Resolve an alert or associate an alert with a new parent incident.
*/
func (a *Client) PutIncidentsIDAlertsAlertID(params *PutIncidentsIDAlertsAlertIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutIncidentsIDAlertsAlertIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIncidentsIDAlertsAlertIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIncidentsIDAlertsAlertID",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}/alerts/{alert_id}/",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIncidentsIDAlertsAlertIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIncidentsIDAlertsAlertIDOK), nil

}

/*
PutIncidentsIDMerge merges incidents

Merge a list of source incidents into this incident.
*/
func (a *Client) PutIncidentsIDMerge(params *PutIncidentsIDMergeParams, authInfo runtime.ClientAuthInfoWriter) (*PutIncidentsIDMergeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutIncidentsIDMergeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutIncidentsIDMerge",
		Method:             "PUT",
		PathPattern:        "/incidents/{id}/merge",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutIncidentsIDMergeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutIncidentsIDMergeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
