// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// UpdateAlertReader is a Reader for the UpdateAlert structure.
type UpdateAlertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAlertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateAlertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateAlertUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateAlertForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateAlertNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewUpdateAlertTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateAlertOK creates a UpdateAlertOK with default headers values
func NewUpdateAlertOK() *UpdateAlertOK {
	return &UpdateAlertOK{}
}

/*UpdateAlertOK handles this case with default header values.

The alert that was updated.
*/
type UpdateAlertOK struct {
	Payload *models.UpdateAlertOKBody
}

func (o *UpdateAlertOK) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] updateAlertOK  %+v", 200, o.Payload)
}

func (o *UpdateAlertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateAlertOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertUnauthorized creates a UpdateAlertUnauthorized with default headers values
func NewUpdateAlertUnauthorized() *UpdateAlertUnauthorized {
	return &UpdateAlertUnauthorized{}
}

/*UpdateAlertUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type UpdateAlertUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateAlertUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] updateAlertUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateAlertUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertForbidden creates a UpdateAlertForbidden with default headers values
func NewUpdateAlertForbidden() *UpdateAlertForbidden {
	return &UpdateAlertForbidden{}
}

/*UpdateAlertForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type UpdateAlertForbidden struct {
	Payload *models.Error
}

func (o *UpdateAlertForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] updateAlertForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAlertForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertNotFound creates a UpdateAlertNotFound with default headers values
func NewUpdateAlertNotFound() *UpdateAlertNotFound {
	return &UpdateAlertNotFound{}
}

/*UpdateAlertNotFound handles this case with default header values.

The requested resource was not found.
*/
type UpdateAlertNotFound struct {
	Payload *models.Error
}

func (o *UpdateAlertNotFound) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] updateAlertNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAlertNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAlertTooManyRequests creates a UpdateAlertTooManyRequests with default headers values
func NewUpdateAlertTooManyRequests() *UpdateAlertTooManyRequests {
	return &UpdateAlertTooManyRequests{}
}

/*UpdateAlertTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type UpdateAlertTooManyRequests struct {
	Payload *models.Error
}

func (o *UpdateAlertTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] updateAlertTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateAlertTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
