// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetIncidentsIDAlertsAlertIDReader is a Reader for the GetIncidentsIDAlertsAlertID structure.
type GetIncidentsIDAlertsAlertIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIncidentsIDAlertsAlertIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIncidentsIDAlertsAlertIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetIncidentsIDAlertsAlertIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetIncidentsIDAlertsAlertIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetIncidentsIDAlertsAlertIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIncidentsIDAlertsAlertIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetIncidentsIDAlertsAlertIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIncidentsIDAlertsAlertIDOK creates a GetIncidentsIDAlertsAlertIDOK with default headers values
func NewGetIncidentsIDAlertsAlertIDOK() *GetIncidentsIDAlertsAlertIDOK {
	return &GetIncidentsIDAlertsAlertIDOK{}
}

/*GetIncidentsIDAlertsAlertIDOK handles this case with default header values.

The alert requested.
*/
type GetIncidentsIDAlertsAlertIDOK struct {
	Payload *models.GetIncidentsIDAlertsAlertIDOKBody
}

func (o *GetIncidentsIDAlertsAlertIDOK) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts/{alert_id}/][%d] getIncidentsIdAlertsAlertIdOK  %+v", 200, o.Payload)
}

func (o *GetIncidentsIDAlertsAlertIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetIncidentsIDAlertsAlertIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDAlertsAlertIDBadRequest creates a GetIncidentsIDAlertsAlertIDBadRequest with default headers values
func NewGetIncidentsIDAlertsAlertIDBadRequest() *GetIncidentsIDAlertsAlertIDBadRequest {
	return &GetIncidentsIDAlertsAlertIDBadRequest{}
}

/*GetIncidentsIDAlertsAlertIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetIncidentsIDAlertsAlertIDBadRequest struct {
	Payload *models.Error
}

func (o *GetIncidentsIDAlertsAlertIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts/{alert_id}/][%d] getIncidentsIdAlertsAlertIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetIncidentsIDAlertsAlertIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDAlertsAlertIDUnauthorized creates a GetIncidentsIDAlertsAlertIDUnauthorized with default headers values
func NewGetIncidentsIDAlertsAlertIDUnauthorized() *GetIncidentsIDAlertsAlertIDUnauthorized {
	return &GetIncidentsIDAlertsAlertIDUnauthorized{}
}

/*GetIncidentsIDAlertsAlertIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetIncidentsIDAlertsAlertIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetIncidentsIDAlertsAlertIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts/{alert_id}/][%d] getIncidentsIdAlertsAlertIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIncidentsIDAlertsAlertIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDAlertsAlertIDForbidden creates a GetIncidentsIDAlertsAlertIDForbidden with default headers values
func NewGetIncidentsIDAlertsAlertIDForbidden() *GetIncidentsIDAlertsAlertIDForbidden {
	return &GetIncidentsIDAlertsAlertIDForbidden{}
}

/*GetIncidentsIDAlertsAlertIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetIncidentsIDAlertsAlertIDForbidden struct {
	Payload *models.Error
}

func (o *GetIncidentsIDAlertsAlertIDForbidden) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts/{alert_id}/][%d] getIncidentsIdAlertsAlertIdForbidden  %+v", 403, o.Payload)
}

func (o *GetIncidentsIDAlertsAlertIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDAlertsAlertIDNotFound creates a GetIncidentsIDAlertsAlertIDNotFound with default headers values
func NewGetIncidentsIDAlertsAlertIDNotFound() *GetIncidentsIDAlertsAlertIDNotFound {
	return &GetIncidentsIDAlertsAlertIDNotFound{}
}

/*GetIncidentsIDAlertsAlertIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetIncidentsIDAlertsAlertIDNotFound struct {
	Payload *models.Error
}

func (o *GetIncidentsIDAlertsAlertIDNotFound) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts/{alert_id}/][%d] getIncidentsIdAlertsAlertIdNotFound  %+v", 404, o.Payload)
}

func (o *GetIncidentsIDAlertsAlertIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDAlertsAlertIDTooManyRequests creates a GetIncidentsIDAlertsAlertIDTooManyRequests with default headers values
func NewGetIncidentsIDAlertsAlertIDTooManyRequests() *GetIncidentsIDAlertsAlertIDTooManyRequests {
	return &GetIncidentsIDAlertsAlertIDTooManyRequests{}
}

/*GetIncidentsIDAlertsAlertIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetIncidentsIDAlertsAlertIDTooManyRequests struct {
	Payload *models.Error
}

func (o *GetIncidentsIDAlertsAlertIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts/{alert_id}/][%d] getIncidentsIdAlertsAlertIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIncidentsIDAlertsAlertIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
