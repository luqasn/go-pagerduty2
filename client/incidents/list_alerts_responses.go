// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ListAlertsReader is a Reader for the ListAlerts structure.
type ListAlertsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAlertsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListAlertsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListAlertsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListAlertsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewListAlertsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewListAlertsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListAlertsOK creates a ListAlertsOK with default headers values
func NewListAlertsOK() *ListAlertsOK {
	return &ListAlertsOK{}
}

/*ListAlertsOK handles this case with default header values.

A paginated array of the incident's alerts.
*/
type ListAlertsOK struct {
	Payload *models.ListAlertsOKBody
}

func (o *ListAlertsOK) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts][%d] listAlertsOK  %+v", 200, o.Payload)
}

func (o *ListAlertsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ListAlertsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertsBadRequest creates a ListAlertsBadRequest with default headers values
func NewListAlertsBadRequest() *ListAlertsBadRequest {
	return &ListAlertsBadRequest{}
}

/*ListAlertsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ListAlertsBadRequest struct {
	Payload *models.Error
}

func (o *ListAlertsBadRequest) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts][%d] listAlertsBadRequest  %+v", 400, o.Payload)
}

func (o *ListAlertsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertsUnauthorized creates a ListAlertsUnauthorized with default headers values
func NewListAlertsUnauthorized() *ListAlertsUnauthorized {
	return &ListAlertsUnauthorized{}
}

/*ListAlertsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ListAlertsUnauthorized struct {
	Payload *models.Error
}

func (o *ListAlertsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts][%d] listAlertsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAlertsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertsForbidden creates a ListAlertsForbidden with default headers values
func NewListAlertsForbidden() *ListAlertsForbidden {
	return &ListAlertsForbidden{}
}

/*ListAlertsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ListAlertsForbidden struct {
	Payload *models.Error
}

func (o *ListAlertsForbidden) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts][%d] listAlertsForbidden  %+v", 403, o.Payload)
}

func (o *ListAlertsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAlertsTooManyRequests creates a ListAlertsTooManyRequests with default headers values
func NewListAlertsTooManyRequests() *ListAlertsTooManyRequests {
	return &ListAlertsTooManyRequests{}
}

/*ListAlertsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ListAlertsTooManyRequests struct {
	Payload *models.Error
}

func (o *ListAlertsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/alerts][%d] listAlertsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListAlertsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
