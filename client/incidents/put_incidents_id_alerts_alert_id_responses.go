// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutIncidentsIDAlertsAlertIDReader is a Reader for the PutIncidentsIDAlertsAlertID structure.
type PutIncidentsIDAlertsAlertIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutIncidentsIDAlertsAlertIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutIncidentsIDAlertsAlertIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewPutIncidentsIDAlertsAlertIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutIncidentsIDAlertsAlertIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutIncidentsIDAlertsAlertIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutIncidentsIDAlertsAlertIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutIncidentsIDAlertsAlertIDOK creates a PutIncidentsIDAlertsAlertIDOK with default headers values
func NewPutIncidentsIDAlertsAlertIDOK() *PutIncidentsIDAlertsAlertIDOK {
	return &PutIncidentsIDAlertsAlertIDOK{}
}

/*PutIncidentsIDAlertsAlertIDOK handles this case with default header values.

The alert that was updated.
*/
type PutIncidentsIDAlertsAlertIDOK struct {
	Payload *models.PutIncidentsIDAlertsAlertIDOKBody
}

func (o *PutIncidentsIDAlertsAlertIDOK) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] putIncidentsIdAlertsAlertIdOK  %+v", 200, o.Payload)
}

func (o *PutIncidentsIDAlertsAlertIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutIncidentsIDAlertsAlertIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsAlertIDUnauthorized creates a PutIncidentsIDAlertsAlertIDUnauthorized with default headers values
func NewPutIncidentsIDAlertsAlertIDUnauthorized() *PutIncidentsIDAlertsAlertIDUnauthorized {
	return &PutIncidentsIDAlertsAlertIDUnauthorized{}
}

/*PutIncidentsIDAlertsAlertIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutIncidentsIDAlertsAlertIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsAlertIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] putIncidentsIdAlertsAlertIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutIncidentsIDAlertsAlertIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsAlertIDForbidden creates a PutIncidentsIDAlertsAlertIDForbidden with default headers values
func NewPutIncidentsIDAlertsAlertIDForbidden() *PutIncidentsIDAlertsAlertIDForbidden {
	return &PutIncidentsIDAlertsAlertIDForbidden{}
}

/*PutIncidentsIDAlertsAlertIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutIncidentsIDAlertsAlertIDForbidden struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsAlertIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] putIncidentsIdAlertsAlertIdForbidden  %+v", 403, o.Payload)
}

func (o *PutIncidentsIDAlertsAlertIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsAlertIDNotFound creates a PutIncidentsIDAlertsAlertIDNotFound with default headers values
func NewPutIncidentsIDAlertsAlertIDNotFound() *PutIncidentsIDAlertsAlertIDNotFound {
	return &PutIncidentsIDAlertsAlertIDNotFound{}
}

/*PutIncidentsIDAlertsAlertIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutIncidentsIDAlertsAlertIDNotFound struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsAlertIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] putIncidentsIdAlertsAlertIdNotFound  %+v", 404, o.Payload)
}

func (o *PutIncidentsIDAlertsAlertIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDAlertsAlertIDTooManyRequests creates a PutIncidentsIDAlertsAlertIDTooManyRequests with default headers values
func NewPutIncidentsIDAlertsAlertIDTooManyRequests() *PutIncidentsIDAlertsAlertIDTooManyRequests {
	return &PutIncidentsIDAlertsAlertIDTooManyRequests{}
}

/*PutIncidentsIDAlertsAlertIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutIncidentsIDAlertsAlertIDTooManyRequests struct {
	Payload *models.Error
}

func (o *PutIncidentsIDAlertsAlertIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/alerts/{alert_id}/][%d] putIncidentsIdAlertsAlertIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutIncidentsIDAlertsAlertIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
