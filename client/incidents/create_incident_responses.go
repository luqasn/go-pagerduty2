// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// CreateIncidentReader is a Reader for the CreateIncident structure.
type CreateIncidentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateIncidentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateIncidentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateIncidentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateIncidentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateIncidentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewCreateIncidentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateIncidentCreated creates a CreateIncidentCreated with default headers values
func NewCreateIncidentCreated() *CreateIncidentCreated {
	return &CreateIncidentCreated{}
}

/*CreateIncidentCreated handles this case with default header values.

The incident object created.
*/
type CreateIncidentCreated struct {
	Payload *models.CreateIncidentCreatedBody
}

func (o *CreateIncidentCreated) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] createIncidentCreated  %+v", 201, o.Payload)
}

func (o *CreateIncidentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateIncidentCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIncidentBadRequest creates a CreateIncidentBadRequest with default headers values
func NewCreateIncidentBadRequest() *CreateIncidentBadRequest {
	return &CreateIncidentBadRequest{}
}

/*CreateIncidentBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type CreateIncidentBadRequest struct {
	Payload *models.Error
}

func (o *CreateIncidentBadRequest) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] createIncidentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateIncidentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIncidentUnauthorized creates a CreateIncidentUnauthorized with default headers values
func NewCreateIncidentUnauthorized() *CreateIncidentUnauthorized {
	return &CreateIncidentUnauthorized{}
}

/*CreateIncidentUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type CreateIncidentUnauthorized struct {
	Payload *models.Error
}

func (o *CreateIncidentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] createIncidentUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateIncidentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIncidentForbidden creates a CreateIncidentForbidden with default headers values
func NewCreateIncidentForbidden() *CreateIncidentForbidden {
	return &CreateIncidentForbidden{}
}

/*CreateIncidentForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type CreateIncidentForbidden struct {
	Payload *models.Error
}

func (o *CreateIncidentForbidden) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] createIncidentForbidden  %+v", 403, o.Payload)
}

func (o *CreateIncidentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateIncidentTooManyRequests creates a CreateIncidentTooManyRequests with default headers values
func NewCreateIncidentTooManyRequests() *CreateIncidentTooManyRequests {
	return &CreateIncidentTooManyRequests{}
}

/*CreateIncidentTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type CreateIncidentTooManyRequests struct {
	Payload *models.Error
}

func (o *CreateIncidentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /incidents][%d] createIncidentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateIncidentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
