// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetIncidentReader is a Reader for the GetIncident structure.
type GetIncidentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIncidentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIncidentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetIncidentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetIncidentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetIncidentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIncidentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetIncidentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIncidentOK creates a GetIncidentOK with default headers values
func NewGetIncidentOK() *GetIncidentOK {
	return &GetIncidentOK{}
}

/*GetIncidentOK handles this case with default header values.

The incident requested.
*/
type GetIncidentOK struct {
	Payload *models.GetIncidentOKBody
}

func (o *GetIncidentOK) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentOK  %+v", 200, o.Payload)
}

func (o *GetIncidentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetIncidentOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentBadRequest creates a GetIncidentBadRequest with default headers values
func NewGetIncidentBadRequest() *GetIncidentBadRequest {
	return &GetIncidentBadRequest{}
}

/*GetIncidentBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetIncidentBadRequest struct {
	Payload *models.Error
}

func (o *GetIncidentBadRequest) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentBadRequest  %+v", 400, o.Payload)
}

func (o *GetIncidentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentUnauthorized creates a GetIncidentUnauthorized with default headers values
func NewGetIncidentUnauthorized() *GetIncidentUnauthorized {
	return &GetIncidentUnauthorized{}
}

/*GetIncidentUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetIncidentUnauthorized struct {
	Payload *models.Error
}

func (o *GetIncidentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIncidentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentForbidden creates a GetIncidentForbidden with default headers values
func NewGetIncidentForbidden() *GetIncidentForbidden {
	return &GetIncidentForbidden{}
}

/*GetIncidentForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetIncidentForbidden struct {
	Payload *models.Error
}

func (o *GetIncidentForbidden) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentForbidden  %+v", 403, o.Payload)
}

func (o *GetIncidentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentNotFound creates a GetIncidentNotFound with default headers values
func NewGetIncidentNotFound() *GetIncidentNotFound {
	return &GetIncidentNotFound{}
}

/*GetIncidentNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetIncidentNotFound struct {
	Payload *models.Error
}

func (o *GetIncidentNotFound) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentNotFound  %+v", 404, o.Payload)
}

func (o *GetIncidentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentTooManyRequests creates a GetIncidentTooManyRequests with default headers values
func NewGetIncidentTooManyRequests() *GetIncidentTooManyRequests {
	return &GetIncidentTooManyRequests{}
}

/*GetIncidentTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetIncidentTooManyRequests struct {
	Payload *models.Error
}

func (o *GetIncidentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIncidentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
