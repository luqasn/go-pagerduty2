// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// ManageIncidentsReader is a Reader for the ManageIncidents structure.
type ManageIncidentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ManageIncidentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewManageIncidentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewManageIncidentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewManageIncidentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewManageIncidentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewManageIncidentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewManageIncidentsOK creates a ManageIncidentsOK with default headers values
func NewManageIncidentsOK() *ManageIncidentsOK {
	return &ManageIncidentsOK{}
}

/*ManageIncidentsOK handles this case with default header values.

All of the updates succeeded.
*/
type ManageIncidentsOK struct {
	Payload *models.ManageIncidentsOKBody
}

func (o *ManageIncidentsOK) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] manageIncidentsOK  %+v", 200, o.Payload)
}

func (o *ManageIncidentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ManageIncidentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManageIncidentsBadRequest creates a ManageIncidentsBadRequest with default headers values
func NewManageIncidentsBadRequest() *ManageIncidentsBadRequest {
	return &ManageIncidentsBadRequest{}
}

/*ManageIncidentsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type ManageIncidentsBadRequest struct {
	Payload *models.Error
}

func (o *ManageIncidentsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] manageIncidentsBadRequest  %+v", 400, o.Payload)
}

func (o *ManageIncidentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManageIncidentsUnauthorized creates a ManageIncidentsUnauthorized with default headers values
func NewManageIncidentsUnauthorized() *ManageIncidentsUnauthorized {
	return &ManageIncidentsUnauthorized{}
}

/*ManageIncidentsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type ManageIncidentsUnauthorized struct {
	Payload *models.Error
}

func (o *ManageIncidentsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] manageIncidentsUnauthorized  %+v", 401, o.Payload)
}

func (o *ManageIncidentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManageIncidentsForbidden creates a ManageIncidentsForbidden with default headers values
func NewManageIncidentsForbidden() *ManageIncidentsForbidden {
	return &ManageIncidentsForbidden{}
}

/*ManageIncidentsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type ManageIncidentsForbidden struct {
	Payload *models.Error
}

func (o *ManageIncidentsForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] manageIncidentsForbidden  %+v", 403, o.Payload)
}

func (o *ManageIncidentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewManageIncidentsTooManyRequests creates a ManageIncidentsTooManyRequests with default headers values
func NewManageIncidentsTooManyRequests() *ManageIncidentsTooManyRequests {
	return &ManageIncidentsTooManyRequests{}
}

/*ManageIncidentsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type ManageIncidentsTooManyRequests struct {
	Payload *models.Error
}

func (o *ManageIncidentsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] manageIncidentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ManageIncidentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
