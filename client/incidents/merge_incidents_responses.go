// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// MergeIncidentsReader is a Reader for the MergeIncidents structure.
type MergeIncidentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MergeIncidentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewMergeIncidentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewMergeIncidentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewMergeIncidentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewMergeIncidentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewMergeIncidentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewMergeIncidentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewMergeIncidentsOK creates a MergeIncidentsOK with default headers values
func NewMergeIncidentsOK() *MergeIncidentsOK {
	return &MergeIncidentsOK{}
}

/*MergeIncidentsOK handles this case with default header values.

The target incident, which now contains all the alerts from the source incident.
*/
type MergeIncidentsOK struct {
	Payload *models.MergeIncidentsOKBody
}

func (o *MergeIncidentsOK) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] mergeIncidentsOK  %+v", 200, o.Payload)
}

func (o *MergeIncidentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MergeIncidentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeIncidentsBadRequest creates a MergeIncidentsBadRequest with default headers values
func NewMergeIncidentsBadRequest() *MergeIncidentsBadRequest {
	return &MergeIncidentsBadRequest{}
}

/*MergeIncidentsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type MergeIncidentsBadRequest struct {
	Payload *models.Error
}

func (o *MergeIncidentsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] mergeIncidentsBadRequest  %+v", 400, o.Payload)
}

func (o *MergeIncidentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeIncidentsUnauthorized creates a MergeIncidentsUnauthorized with default headers values
func NewMergeIncidentsUnauthorized() *MergeIncidentsUnauthorized {
	return &MergeIncidentsUnauthorized{}
}

/*MergeIncidentsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type MergeIncidentsUnauthorized struct {
	Payload *models.Error
}

func (o *MergeIncidentsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] mergeIncidentsUnauthorized  %+v", 401, o.Payload)
}

func (o *MergeIncidentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeIncidentsForbidden creates a MergeIncidentsForbidden with default headers values
func NewMergeIncidentsForbidden() *MergeIncidentsForbidden {
	return &MergeIncidentsForbidden{}
}

/*MergeIncidentsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type MergeIncidentsForbidden struct {
	Payload *models.Error
}

func (o *MergeIncidentsForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] mergeIncidentsForbidden  %+v", 403, o.Payload)
}

func (o *MergeIncidentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeIncidentsNotFound creates a MergeIncidentsNotFound with default headers values
func NewMergeIncidentsNotFound() *MergeIncidentsNotFound {
	return &MergeIncidentsNotFound{}
}

/*MergeIncidentsNotFound handles this case with default header values.

The requested resource was not found.
*/
type MergeIncidentsNotFound struct {
	Payload *models.Error
}

func (o *MergeIncidentsNotFound) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] mergeIncidentsNotFound  %+v", 404, o.Payload)
}

func (o *MergeIncidentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMergeIncidentsTooManyRequests creates a MergeIncidentsTooManyRequests with default headers values
func NewMergeIncidentsTooManyRequests() *MergeIncidentsTooManyRequests {
	return &MergeIncidentsTooManyRequests{}
}

/*MergeIncidentsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type MergeIncidentsTooManyRequests struct {
	Payload *models.Error
}

func (o *MergeIncidentsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] mergeIncidentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *MergeIncidentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
