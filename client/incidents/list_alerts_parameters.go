// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListAlertsParams creates a new ListAlertsParams object
// with the default values initialized.
func NewListAlertsParams() *ListAlertsParams {
	var ()
	return &ListAlertsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAlertsParamsWithTimeout creates a new ListAlertsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAlertsParamsWithTimeout(timeout time.Duration) *ListAlertsParams {
	var ()
	return &ListAlertsParams{

		timeout: timeout,
	}
}

// NewListAlertsParamsWithContext creates a new ListAlertsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAlertsParamsWithContext(ctx context.Context) *ListAlertsParams {
	var ()
	return &ListAlertsParams{

		Context: ctx,
	}
}

// NewListAlertsParamsWithHTTPClient creates a new ListAlertsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAlertsParamsWithHTTPClient(client *http.Client) *ListAlertsParams {
	var ()
	return &ListAlertsParams{
		HTTPClient: client,
	}
}

/*ListAlertsParams contains all the parameters to send to the API endpoint
for the list alerts operation typically these are written to a http.Request
*/
type ListAlertsParams struct {

	/*AlertKey
	  Alert de-duplication key.

	*/
	AlertKey *string
	/*ID*/
	ID string
	/*Include
	  Array of additional details to include.

	*/
	Include []string
	/*SortBy
	  Used to specify both the field you wish to sort the results on (created_at/resolved_at), as well as the direction (asc/desc) of the results. The sort_by field and direction should be separated by a colon. A maximum of two fields can be included, separated by a comma. Sort direction defaults to ascending.

	*/
	SortBy []string
	/*Statuses
	  Return only alerts with the given statuses. (More status codes may be introduced in the future.)

	*/
	Statuses []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list alerts params
func (o *ListAlertsParams) WithTimeout(timeout time.Duration) *ListAlertsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list alerts params
func (o *ListAlertsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list alerts params
func (o *ListAlertsParams) WithContext(ctx context.Context) *ListAlertsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list alerts params
func (o *ListAlertsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list alerts params
func (o *ListAlertsParams) WithHTTPClient(client *http.Client) *ListAlertsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list alerts params
func (o *ListAlertsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAlertKey adds the alertKey to the list alerts params
func (o *ListAlertsParams) WithAlertKey(alertKey *string) *ListAlertsParams {
	o.SetAlertKey(alertKey)
	return o
}

// SetAlertKey adds the alertKey to the list alerts params
func (o *ListAlertsParams) SetAlertKey(alertKey *string) {
	o.AlertKey = alertKey
}

// WithID adds the id to the list alerts params
func (o *ListAlertsParams) WithID(id string) *ListAlertsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the list alerts params
func (o *ListAlertsParams) SetID(id string) {
	o.ID = id
}

// WithInclude adds the include to the list alerts params
func (o *ListAlertsParams) WithInclude(include []string) *ListAlertsParams {
	o.SetInclude(include)
	return o
}

// SetInclude adds the include to the list alerts params
func (o *ListAlertsParams) SetInclude(include []string) {
	o.Include = include
}

// WithSortBy adds the sortBy to the list alerts params
func (o *ListAlertsParams) WithSortBy(sortBy []string) *ListAlertsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list alerts params
func (o *ListAlertsParams) SetSortBy(sortBy []string) {
	o.SortBy = sortBy
}

// WithStatuses adds the statuses to the list alerts params
func (o *ListAlertsParams) WithStatuses(statuses []string) *ListAlertsParams {
	o.SetStatuses(statuses)
	return o
}

// SetStatuses adds the statuses to the list alerts params
func (o *ListAlertsParams) SetStatuses(statuses []string) {
	o.Statuses = statuses
}

// WriteToRequest writes these params to a swagger request
func (o *ListAlertsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AlertKey != nil {

		// query param alert_key
		var qrAlertKey string
		if o.AlertKey != nil {
			qrAlertKey = *o.AlertKey
		}
		qAlertKey := qrAlertKey
		if qAlertKey != "" {
			if err := r.SetQueryParam("alert_key", qAlertKey); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	valuesInclude := o.Include

	joinedInclude := swag.JoinByFormat(valuesInclude, "multi")
	// query array param include[]
	if err := r.SetQueryParam("include[]", joinedInclude...); err != nil {
		return err
	}

	valuesSortBy := o.SortBy

	joinedSortBy := swag.JoinByFormat(valuesSortBy, "csv")
	// query array param sort_by
	if err := r.SetQueryParam("sort_by", joinedSortBy...); err != nil {
		return err
	}

	valuesStatuses := o.Statuses

	joinedStatuses := swag.JoinByFormat(valuesStatuses, "multi")
	// query array param statuses[]
	if err := r.SetQueryParam("statuses[]", joinedStatuses...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
