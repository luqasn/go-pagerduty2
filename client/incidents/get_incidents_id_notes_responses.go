// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetIncidentsIDNotesReader is a Reader for the GetIncidentsIDNotes structure.
type GetIncidentsIDNotesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIncidentsIDNotesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIncidentsIDNotesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetIncidentsIDNotesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetIncidentsIDNotesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetIncidentsIDNotesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIncidentsIDNotesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetIncidentsIDNotesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIncidentsIDNotesOK creates a GetIncidentsIDNotesOK with default headers values
func NewGetIncidentsIDNotesOK() *GetIncidentsIDNotesOK {
	return &GetIncidentsIDNotesOK{}
}

/*GetIncidentsIDNotesOK handles this case with default header values.

An array of notes.
*/
type GetIncidentsIDNotesOK struct {
	Payload *models.GetIncidentsIDNotesOKBody
}

func (o *GetIncidentsIDNotesOK) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/notes][%d] getIncidentsIdNotesOK  %+v", 200, o.Payload)
}

func (o *GetIncidentsIDNotesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetIncidentsIDNotesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDNotesBadRequest creates a GetIncidentsIDNotesBadRequest with default headers values
func NewGetIncidentsIDNotesBadRequest() *GetIncidentsIDNotesBadRequest {
	return &GetIncidentsIDNotesBadRequest{}
}

/*GetIncidentsIDNotesBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetIncidentsIDNotesBadRequest struct {
	Payload *models.Error
}

func (o *GetIncidentsIDNotesBadRequest) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/notes][%d] getIncidentsIdNotesBadRequest  %+v", 400, o.Payload)
}

func (o *GetIncidentsIDNotesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDNotesUnauthorized creates a GetIncidentsIDNotesUnauthorized with default headers values
func NewGetIncidentsIDNotesUnauthorized() *GetIncidentsIDNotesUnauthorized {
	return &GetIncidentsIDNotesUnauthorized{}
}

/*GetIncidentsIDNotesUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetIncidentsIDNotesUnauthorized struct {
	Payload *models.Error
}

func (o *GetIncidentsIDNotesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/notes][%d] getIncidentsIdNotesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIncidentsIDNotesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDNotesForbidden creates a GetIncidentsIDNotesForbidden with default headers values
func NewGetIncidentsIDNotesForbidden() *GetIncidentsIDNotesForbidden {
	return &GetIncidentsIDNotesForbidden{}
}

/*GetIncidentsIDNotesForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetIncidentsIDNotesForbidden struct {
	Payload *models.Error
}

func (o *GetIncidentsIDNotesForbidden) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/notes][%d] getIncidentsIdNotesForbidden  %+v", 403, o.Payload)
}

func (o *GetIncidentsIDNotesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDNotesNotFound creates a GetIncidentsIDNotesNotFound with default headers values
func NewGetIncidentsIDNotesNotFound() *GetIncidentsIDNotesNotFound {
	return &GetIncidentsIDNotesNotFound{}
}

/*GetIncidentsIDNotesNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetIncidentsIDNotesNotFound struct {
	Payload *models.Error
}

func (o *GetIncidentsIDNotesNotFound) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/notes][%d] getIncidentsIdNotesNotFound  %+v", 404, o.Payload)
}

func (o *GetIncidentsIDNotesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDNotesTooManyRequests creates a GetIncidentsIDNotesTooManyRequests with default headers values
func NewGetIncidentsIDNotesTooManyRequests() *GetIncidentsIDNotesTooManyRequests {
	return &GetIncidentsIDNotesTooManyRequests{}
}

/*GetIncidentsIDNotesTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetIncidentsIDNotesTooManyRequests struct {
	Payload *models.Error
}

func (o *GetIncidentsIDNotesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}/notes][%d] getIncidentsIdNotesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIncidentsIDNotesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
