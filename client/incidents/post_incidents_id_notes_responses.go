// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PostIncidentsIDNotesReader is a Reader for the PostIncidentsIDNotes structure.
type PostIncidentsIDNotesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostIncidentsIDNotesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostIncidentsIDNotesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPostIncidentsIDNotesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPostIncidentsIDNotesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPostIncidentsIDNotesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPostIncidentsIDNotesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPostIncidentsIDNotesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPostIncidentsIDNotesOK creates a PostIncidentsIDNotesOK with default headers values
func NewPostIncidentsIDNotesOK() *PostIncidentsIDNotesOK {
	return &PostIncidentsIDNotesOK{}
}

/*PostIncidentsIDNotesOK handles this case with default header values.

The new note.
*/
type PostIncidentsIDNotesOK struct {
	Payload *models.PostIncidentsIDNotesOKBody
}

func (o *PostIncidentsIDNotesOK) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/notes][%d] postIncidentsIdNotesOK  %+v", 200, o.Payload)
}

func (o *PostIncidentsIDNotesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PostIncidentsIDNotesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDNotesBadRequest creates a PostIncidentsIDNotesBadRequest with default headers values
func NewPostIncidentsIDNotesBadRequest() *PostIncidentsIDNotesBadRequest {
	return &PostIncidentsIDNotesBadRequest{}
}

/*PostIncidentsIDNotesBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PostIncidentsIDNotesBadRequest struct {
	Payload *models.Error
}

func (o *PostIncidentsIDNotesBadRequest) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/notes][%d] postIncidentsIdNotesBadRequest  %+v", 400, o.Payload)
}

func (o *PostIncidentsIDNotesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDNotesUnauthorized creates a PostIncidentsIDNotesUnauthorized with default headers values
func NewPostIncidentsIDNotesUnauthorized() *PostIncidentsIDNotesUnauthorized {
	return &PostIncidentsIDNotesUnauthorized{}
}

/*PostIncidentsIDNotesUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PostIncidentsIDNotesUnauthorized struct {
	Payload *models.Error
}

func (o *PostIncidentsIDNotesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/notes][%d] postIncidentsIdNotesUnauthorized  %+v", 401, o.Payload)
}

func (o *PostIncidentsIDNotesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDNotesForbidden creates a PostIncidentsIDNotesForbidden with default headers values
func NewPostIncidentsIDNotesForbidden() *PostIncidentsIDNotesForbidden {
	return &PostIncidentsIDNotesForbidden{}
}

/*PostIncidentsIDNotesForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PostIncidentsIDNotesForbidden struct {
	Payload *models.Error
}

func (o *PostIncidentsIDNotesForbidden) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/notes][%d] postIncidentsIdNotesForbidden  %+v", 403, o.Payload)
}

func (o *PostIncidentsIDNotesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDNotesNotFound creates a PostIncidentsIDNotesNotFound with default headers values
func NewPostIncidentsIDNotesNotFound() *PostIncidentsIDNotesNotFound {
	return &PostIncidentsIDNotesNotFound{}
}

/*PostIncidentsIDNotesNotFound handles this case with default header values.

The requested resource was not found.
*/
type PostIncidentsIDNotesNotFound struct {
	Payload *models.Error
}

func (o *PostIncidentsIDNotesNotFound) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/notes][%d] postIncidentsIdNotesNotFound  %+v", 404, o.Payload)
}

func (o *PostIncidentsIDNotesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostIncidentsIDNotesTooManyRequests creates a PostIncidentsIDNotesTooManyRequests with default headers values
func NewPostIncidentsIDNotesTooManyRequests() *PostIncidentsIDNotesTooManyRequests {
	return &PostIncidentsIDNotesTooManyRequests{}
}

/*PostIncidentsIDNotesTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PostIncidentsIDNotesTooManyRequests struct {
	Payload *models.Error
}

func (o *PostIncidentsIDNotesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/notes][%d] postIncidentsIdNotesTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostIncidentsIDNotesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
