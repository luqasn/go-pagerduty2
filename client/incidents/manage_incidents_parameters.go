// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// NewManageIncidentsParams creates a new ManageIncidentsParams object
// with the default values initialized.
func NewManageIncidentsParams() *ManageIncidentsParams {
	var ()
	return &ManageIncidentsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewManageIncidentsParamsWithTimeout creates a new ManageIncidentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewManageIncidentsParamsWithTimeout(timeout time.Duration) *ManageIncidentsParams {
	var ()
	return &ManageIncidentsParams{

		timeout: timeout,
	}
}

// NewManageIncidentsParamsWithContext creates a new ManageIncidentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewManageIncidentsParamsWithContext(ctx context.Context) *ManageIncidentsParams {
	var ()
	return &ManageIncidentsParams{

		Context: ctx,
	}
}

// NewManageIncidentsParamsWithHTTPClient creates a new ManageIncidentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewManageIncidentsParamsWithHTTPClient(client *http.Client) *ManageIncidentsParams {
	var ()
	return &ManageIncidentsParams{
		HTTPClient: client,
	}
}

/*ManageIncidentsParams contains all the parameters to send to the API endpoint
for the manage incidents operation typically these are written to a http.Request
*/
type ManageIncidentsParams struct {

	/*From
	  The email address of the user making the request.

	*/
	From strfmt.Email
	/*Payload*/
	Payload *models.ManageIncidentsParamsBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the manage incidents params
func (o *ManageIncidentsParams) WithTimeout(timeout time.Duration) *ManageIncidentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the manage incidents params
func (o *ManageIncidentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the manage incidents params
func (o *ManageIncidentsParams) WithContext(ctx context.Context) *ManageIncidentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the manage incidents params
func (o *ManageIncidentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the manage incidents params
func (o *ManageIncidentsParams) WithHTTPClient(client *http.Client) *ManageIncidentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the manage incidents params
func (o *ManageIncidentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the manage incidents params
func (o *ManageIncidentsParams) WithFrom(from strfmt.Email) *ManageIncidentsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the manage incidents params
func (o *ManageIncidentsParams) SetFrom(from strfmt.Email) {
	o.From = from
}

// WithPayload adds the payload to the manage incidents params
func (o *ManageIncidentsParams) WithPayload(payload *models.ManageIncidentsParamsBody) *ManageIncidentsParams {
	o.SetPayload(payload)
	return o
}

// SetPayload adds the payload to the manage incidents params
func (o *ManageIncidentsParams) SetPayload(payload *models.ManageIncidentsParamsBody) {
	o.Payload = payload
}

// WriteToRequest writes these params to a swagger request
func (o *ManageIncidentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param From
	if err := r.SetHeaderParam("From", o.From.String()); err != nil {
		return err
	}

	if o.Payload != nil {
		if err := r.SetBodyParam(o.Payload); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
