// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutIncidentsIDMergeReader is a Reader for the PutIncidentsIDMerge structure.
type PutIncidentsIDMergeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutIncidentsIDMergeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutIncidentsIDMergeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutIncidentsIDMergeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutIncidentsIDMergeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutIncidentsIDMergeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutIncidentsIDMergeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutIncidentsIDMergeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutIncidentsIDMergeOK creates a PutIncidentsIDMergeOK with default headers values
func NewPutIncidentsIDMergeOK() *PutIncidentsIDMergeOK {
	return &PutIncidentsIDMergeOK{}
}

/*PutIncidentsIDMergeOK handles this case with default header values.

The target incident, which now contains all the alerts from the source incident.
*/
type PutIncidentsIDMergeOK struct {
	Payload *models.PutIncidentsIDMergeOKBody
}

func (o *PutIncidentsIDMergeOK) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] putIncidentsIdMergeOK  %+v", 200, o.Payload)
}

func (o *PutIncidentsIDMergeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutIncidentsIDMergeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDMergeBadRequest creates a PutIncidentsIDMergeBadRequest with default headers values
func NewPutIncidentsIDMergeBadRequest() *PutIncidentsIDMergeBadRequest {
	return &PutIncidentsIDMergeBadRequest{}
}

/*PutIncidentsIDMergeBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutIncidentsIDMergeBadRequest struct {
	Payload *models.Error
}

func (o *PutIncidentsIDMergeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] putIncidentsIdMergeBadRequest  %+v", 400, o.Payload)
}

func (o *PutIncidentsIDMergeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDMergeUnauthorized creates a PutIncidentsIDMergeUnauthorized with default headers values
func NewPutIncidentsIDMergeUnauthorized() *PutIncidentsIDMergeUnauthorized {
	return &PutIncidentsIDMergeUnauthorized{}
}

/*PutIncidentsIDMergeUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutIncidentsIDMergeUnauthorized struct {
	Payload *models.Error
}

func (o *PutIncidentsIDMergeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] putIncidentsIdMergeUnauthorized  %+v", 401, o.Payload)
}

func (o *PutIncidentsIDMergeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDMergeForbidden creates a PutIncidentsIDMergeForbidden with default headers values
func NewPutIncidentsIDMergeForbidden() *PutIncidentsIDMergeForbidden {
	return &PutIncidentsIDMergeForbidden{}
}

/*PutIncidentsIDMergeForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutIncidentsIDMergeForbidden struct {
	Payload *models.Error
}

func (o *PutIncidentsIDMergeForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] putIncidentsIdMergeForbidden  %+v", 403, o.Payload)
}

func (o *PutIncidentsIDMergeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDMergeNotFound creates a PutIncidentsIDMergeNotFound with default headers values
func NewPutIncidentsIDMergeNotFound() *PutIncidentsIDMergeNotFound {
	return &PutIncidentsIDMergeNotFound{}
}

/*PutIncidentsIDMergeNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutIncidentsIDMergeNotFound struct {
	Payload *models.Error
}

func (o *PutIncidentsIDMergeNotFound) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] putIncidentsIdMergeNotFound  %+v", 404, o.Payload)
}

func (o *PutIncidentsIDMergeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsIDMergeTooManyRequests creates a PutIncidentsIDMergeTooManyRequests with default headers values
func NewPutIncidentsIDMergeTooManyRequests() *PutIncidentsIDMergeTooManyRequests {
	return &PutIncidentsIDMergeTooManyRequests{}
}

/*PutIncidentsIDMergeTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutIncidentsIDMergeTooManyRequests struct {
	Payload *models.Error
}

func (o *PutIncidentsIDMergeTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents/{id}/merge][%d] putIncidentsIdMergeTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutIncidentsIDMergeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
