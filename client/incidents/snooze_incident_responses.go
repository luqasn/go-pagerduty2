// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// SnoozeIncidentReader is a Reader for the SnoozeIncident structure.
type SnoozeIncidentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SnoozeIncidentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewSnoozeIncidentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSnoozeIncidentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewSnoozeIncidentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewSnoozeIncidentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSnoozeIncidentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewSnoozeIncidentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSnoozeIncidentCreated creates a SnoozeIncidentCreated with default headers values
func NewSnoozeIncidentCreated() *SnoozeIncidentCreated {
	return &SnoozeIncidentCreated{}
}

/*SnoozeIncidentCreated handles this case with default header values.

The incident that was successfully snoozed.
*/
type SnoozeIncidentCreated struct {
	Payload *models.SnoozeIncidentCreatedBody
}

func (o *SnoozeIncidentCreated) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] snoozeIncidentCreated  %+v", 201, o.Payload)
}

func (o *SnoozeIncidentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SnoozeIncidentCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnoozeIncidentBadRequest creates a SnoozeIncidentBadRequest with default headers values
func NewSnoozeIncidentBadRequest() *SnoozeIncidentBadRequest {
	return &SnoozeIncidentBadRequest{}
}

/*SnoozeIncidentBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type SnoozeIncidentBadRequest struct {
	Payload *models.Error
}

func (o *SnoozeIncidentBadRequest) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] snoozeIncidentBadRequest  %+v", 400, o.Payload)
}

func (o *SnoozeIncidentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnoozeIncidentUnauthorized creates a SnoozeIncidentUnauthorized with default headers values
func NewSnoozeIncidentUnauthorized() *SnoozeIncidentUnauthorized {
	return &SnoozeIncidentUnauthorized{}
}

/*SnoozeIncidentUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type SnoozeIncidentUnauthorized struct {
	Payload *models.Error
}

func (o *SnoozeIncidentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] snoozeIncidentUnauthorized  %+v", 401, o.Payload)
}

func (o *SnoozeIncidentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnoozeIncidentForbidden creates a SnoozeIncidentForbidden with default headers values
func NewSnoozeIncidentForbidden() *SnoozeIncidentForbidden {
	return &SnoozeIncidentForbidden{}
}

/*SnoozeIncidentForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type SnoozeIncidentForbidden struct {
	Payload *models.Error
}

func (o *SnoozeIncidentForbidden) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] snoozeIncidentForbidden  %+v", 403, o.Payload)
}

func (o *SnoozeIncidentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnoozeIncidentNotFound creates a SnoozeIncidentNotFound with default headers values
func NewSnoozeIncidentNotFound() *SnoozeIncidentNotFound {
	return &SnoozeIncidentNotFound{}
}

/*SnoozeIncidentNotFound handles this case with default header values.

The requested resource was not found.
*/
type SnoozeIncidentNotFound struct {
	Payload *models.Error
}

func (o *SnoozeIncidentNotFound) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] snoozeIncidentNotFound  %+v", 404, o.Payload)
}

func (o *SnoozeIncidentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSnoozeIncidentTooManyRequests creates a SnoozeIncidentTooManyRequests with default headers values
func NewSnoozeIncidentTooManyRequests() *SnoozeIncidentTooManyRequests {
	return &SnoozeIncidentTooManyRequests{}
}

/*SnoozeIncidentTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type SnoozeIncidentTooManyRequests struct {
	Payload *models.Error
}

func (o *SnoozeIncidentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /incidents/{id}/snooze][%d] snoozeIncidentTooManyRequests  %+v", 429, o.Payload)
}

func (o *SnoozeIncidentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
