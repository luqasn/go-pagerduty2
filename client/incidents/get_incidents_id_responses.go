// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetIncidentsIDReader is a Reader for the GetIncidentsID structure.
type GetIncidentsIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIncidentsIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetIncidentsIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetIncidentsIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetIncidentsIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetIncidentsIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetIncidentsIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetIncidentsIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetIncidentsIDOK creates a GetIncidentsIDOK with default headers values
func NewGetIncidentsIDOK() *GetIncidentsIDOK {
	return &GetIncidentsIDOK{}
}

/*GetIncidentsIDOK handles this case with default header values.

The incident requested.
*/
type GetIncidentsIDOK struct {
	Payload *models.GetIncidentsIDOKBody
}

func (o *GetIncidentsIDOK) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentsIdOK  %+v", 200, o.Payload)
}

func (o *GetIncidentsIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetIncidentsIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDBadRequest creates a GetIncidentsIDBadRequest with default headers values
func NewGetIncidentsIDBadRequest() *GetIncidentsIDBadRequest {
	return &GetIncidentsIDBadRequest{}
}

/*GetIncidentsIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetIncidentsIDBadRequest struct {
	Payload *models.Error
}

func (o *GetIncidentsIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentsIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetIncidentsIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDUnauthorized creates a GetIncidentsIDUnauthorized with default headers values
func NewGetIncidentsIDUnauthorized() *GetIncidentsIDUnauthorized {
	return &GetIncidentsIDUnauthorized{}
}

/*GetIncidentsIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetIncidentsIDUnauthorized struct {
	Payload *models.Error
}

func (o *GetIncidentsIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentsIdUnauthorized  %+v", 401, o.Payload)
}

func (o *GetIncidentsIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDForbidden creates a GetIncidentsIDForbidden with default headers values
func NewGetIncidentsIDForbidden() *GetIncidentsIDForbidden {
	return &GetIncidentsIDForbidden{}
}

/*GetIncidentsIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetIncidentsIDForbidden struct {
	Payload *models.Error
}

func (o *GetIncidentsIDForbidden) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentsIdForbidden  %+v", 403, o.Payload)
}

func (o *GetIncidentsIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDNotFound creates a GetIncidentsIDNotFound with default headers values
func NewGetIncidentsIDNotFound() *GetIncidentsIDNotFound {
	return &GetIncidentsIDNotFound{}
}

/*GetIncidentsIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetIncidentsIDNotFound struct {
	Payload *models.Error
}

func (o *GetIncidentsIDNotFound) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentsIdNotFound  %+v", 404, o.Payload)
}

func (o *GetIncidentsIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIncidentsIDTooManyRequests creates a GetIncidentsIDTooManyRequests with default headers values
func NewGetIncidentsIDTooManyRequests() *GetIncidentsIDTooManyRequests {
	return &GetIncidentsIDTooManyRequests{}
}

/*GetIncidentsIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetIncidentsIDTooManyRequests struct {
	Payload *models.Error
}

func (o *GetIncidentsIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /incidents/{id}][%d] getIncidentsIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetIncidentsIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
