// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutIncidentsReader is a Reader for the PutIncidents structure.
type PutIncidentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutIncidentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutIncidentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutIncidentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutIncidentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutIncidentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutIncidentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutIncidentsOK creates a PutIncidentsOK with default headers values
func NewPutIncidentsOK() *PutIncidentsOK {
	return &PutIncidentsOK{}
}

/*PutIncidentsOK handles this case with default header values.

All of the updates succeeded.
*/
type PutIncidentsOK struct {
	Payload *models.PutIncidentsOKBody
}

func (o *PutIncidentsOK) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] putIncidentsOK  %+v", 200, o.Payload)
}

func (o *PutIncidentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutIncidentsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsBadRequest creates a PutIncidentsBadRequest with default headers values
func NewPutIncidentsBadRequest() *PutIncidentsBadRequest {
	return &PutIncidentsBadRequest{}
}

/*PutIncidentsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutIncidentsBadRequest struct {
	Payload *models.Error
}

func (o *PutIncidentsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] putIncidentsBadRequest  %+v", 400, o.Payload)
}

func (o *PutIncidentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsUnauthorized creates a PutIncidentsUnauthorized with default headers values
func NewPutIncidentsUnauthorized() *PutIncidentsUnauthorized {
	return &PutIncidentsUnauthorized{}
}

/*PutIncidentsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutIncidentsUnauthorized struct {
	Payload *models.Error
}

func (o *PutIncidentsUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] putIncidentsUnauthorized  %+v", 401, o.Payload)
}

func (o *PutIncidentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsForbidden creates a PutIncidentsForbidden with default headers values
func NewPutIncidentsForbidden() *PutIncidentsForbidden {
	return &PutIncidentsForbidden{}
}

/*PutIncidentsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutIncidentsForbidden struct {
	Payload *models.Error
}

func (o *PutIncidentsForbidden) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] putIncidentsForbidden  %+v", 403, o.Payload)
}

func (o *PutIncidentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutIncidentsTooManyRequests creates a PutIncidentsTooManyRequests with default headers values
func NewPutIncidentsTooManyRequests() *PutIncidentsTooManyRequests {
	return &PutIncidentsTooManyRequests{}
}

/*PutIncidentsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutIncidentsTooManyRequests struct {
	Payload *models.Error
}

func (o *PutIncidentsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /incidents][%d] putIncidentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutIncidentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
