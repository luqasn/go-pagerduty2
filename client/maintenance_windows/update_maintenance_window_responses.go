// Code generated by go-swagger; DO NOT EDIT.

package maintenance_windows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// UpdateMaintenanceWindowReader is a Reader for the UpdateMaintenanceWindow structure.
type UpdateMaintenanceWindowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMaintenanceWindowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateMaintenanceWindowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateMaintenanceWindowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateMaintenanceWindowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateMaintenanceWindowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateMaintenanceWindowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewUpdateMaintenanceWindowTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateMaintenanceWindowOK creates a UpdateMaintenanceWindowOK with default headers values
func NewUpdateMaintenanceWindowOK() *UpdateMaintenanceWindowOK {
	return &UpdateMaintenanceWindowOK{}
}

/*UpdateMaintenanceWindowOK handles this case with default header values.

The maintenance window that was updated.
*/
type UpdateMaintenanceWindowOK struct {
	Payload *models.UpdateMaintenanceWindowOKBody
}

func (o *UpdateMaintenanceWindowOK) Error() string {
	return fmt.Sprintf("[PUT /maintenance_windows/{id}][%d] updateMaintenanceWindowOK  %+v", 200, o.Payload)
}

func (o *UpdateMaintenanceWindowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateMaintenanceWindowOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaintenanceWindowBadRequest creates a UpdateMaintenanceWindowBadRequest with default headers values
func NewUpdateMaintenanceWindowBadRequest() *UpdateMaintenanceWindowBadRequest {
	return &UpdateMaintenanceWindowBadRequest{}
}

/*UpdateMaintenanceWindowBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type UpdateMaintenanceWindowBadRequest struct {
	Payload *models.Error
}

func (o *UpdateMaintenanceWindowBadRequest) Error() string {
	return fmt.Sprintf("[PUT /maintenance_windows/{id}][%d] updateMaintenanceWindowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateMaintenanceWindowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaintenanceWindowUnauthorized creates a UpdateMaintenanceWindowUnauthorized with default headers values
func NewUpdateMaintenanceWindowUnauthorized() *UpdateMaintenanceWindowUnauthorized {
	return &UpdateMaintenanceWindowUnauthorized{}
}

/*UpdateMaintenanceWindowUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type UpdateMaintenanceWindowUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateMaintenanceWindowUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /maintenance_windows/{id}][%d] updateMaintenanceWindowUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateMaintenanceWindowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaintenanceWindowForbidden creates a UpdateMaintenanceWindowForbidden with default headers values
func NewUpdateMaintenanceWindowForbidden() *UpdateMaintenanceWindowForbidden {
	return &UpdateMaintenanceWindowForbidden{}
}

/*UpdateMaintenanceWindowForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type UpdateMaintenanceWindowForbidden struct {
	Payload *models.Error
}

func (o *UpdateMaintenanceWindowForbidden) Error() string {
	return fmt.Sprintf("[PUT /maintenance_windows/{id}][%d] updateMaintenanceWindowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateMaintenanceWindowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaintenanceWindowNotFound creates a UpdateMaintenanceWindowNotFound with default headers values
func NewUpdateMaintenanceWindowNotFound() *UpdateMaintenanceWindowNotFound {
	return &UpdateMaintenanceWindowNotFound{}
}

/*UpdateMaintenanceWindowNotFound handles this case with default header values.

The requested resource was not found.
*/
type UpdateMaintenanceWindowNotFound struct {
	Payload *models.Error
}

func (o *UpdateMaintenanceWindowNotFound) Error() string {
	return fmt.Sprintf("[PUT /maintenance_windows/{id}][%d] updateMaintenanceWindowNotFound  %+v", 404, o.Payload)
}

func (o *UpdateMaintenanceWindowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMaintenanceWindowTooManyRequests creates a UpdateMaintenanceWindowTooManyRequests with default headers values
func NewUpdateMaintenanceWindowTooManyRequests() *UpdateMaintenanceWindowTooManyRequests {
	return &UpdateMaintenanceWindowTooManyRequests{}
}

/*UpdateMaintenanceWindowTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type UpdateMaintenanceWindowTooManyRequests struct {
	Payload *models.Error
}

func (o *UpdateMaintenanceWindowTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /maintenance_windows/{id}][%d] updateMaintenanceWindowTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateMaintenanceWindowTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
