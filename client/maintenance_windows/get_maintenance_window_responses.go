// Code generated by go-swagger; DO NOT EDIT.

package maintenance_windows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetMaintenanceWindowReader is a Reader for the GetMaintenanceWindow structure.
type GetMaintenanceWindowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMaintenanceWindowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMaintenanceWindowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewGetMaintenanceWindowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetMaintenanceWindowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetMaintenanceWindowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetMaintenanceWindowTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMaintenanceWindowOK creates a GetMaintenanceWindowOK with default headers values
func NewGetMaintenanceWindowOK() *GetMaintenanceWindowOK {
	return &GetMaintenanceWindowOK{}
}

/*GetMaintenanceWindowOK handles this case with default header values.

The maintenance window that was updated.
*/
type GetMaintenanceWindowOK struct {
	Payload *models.GetMaintenanceWindowOKBody
}

func (o *GetMaintenanceWindowOK) Error() string {
	return fmt.Sprintf("[GET /maintenance_windows/{id}][%d] getMaintenanceWindowOK  %+v", 200, o.Payload)
}

func (o *GetMaintenanceWindowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetMaintenanceWindowOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMaintenanceWindowUnauthorized creates a GetMaintenanceWindowUnauthorized with default headers values
func NewGetMaintenanceWindowUnauthorized() *GetMaintenanceWindowUnauthorized {
	return &GetMaintenanceWindowUnauthorized{}
}

/*GetMaintenanceWindowUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetMaintenanceWindowUnauthorized struct {
	Payload *models.Error
}

func (o *GetMaintenanceWindowUnauthorized) Error() string {
	return fmt.Sprintf("[GET /maintenance_windows/{id}][%d] getMaintenanceWindowUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMaintenanceWindowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMaintenanceWindowForbidden creates a GetMaintenanceWindowForbidden with default headers values
func NewGetMaintenanceWindowForbidden() *GetMaintenanceWindowForbidden {
	return &GetMaintenanceWindowForbidden{}
}

/*GetMaintenanceWindowForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetMaintenanceWindowForbidden struct {
	Payload *models.Error
}

func (o *GetMaintenanceWindowForbidden) Error() string {
	return fmt.Sprintf("[GET /maintenance_windows/{id}][%d] getMaintenanceWindowForbidden  %+v", 403, o.Payload)
}

func (o *GetMaintenanceWindowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMaintenanceWindowNotFound creates a GetMaintenanceWindowNotFound with default headers values
func NewGetMaintenanceWindowNotFound() *GetMaintenanceWindowNotFound {
	return &GetMaintenanceWindowNotFound{}
}

/*GetMaintenanceWindowNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetMaintenanceWindowNotFound struct {
	Payload *models.Error
}

func (o *GetMaintenanceWindowNotFound) Error() string {
	return fmt.Sprintf("[GET /maintenance_windows/{id}][%d] getMaintenanceWindowNotFound  %+v", 404, o.Payload)
}

func (o *GetMaintenanceWindowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMaintenanceWindowTooManyRequests creates a GetMaintenanceWindowTooManyRequests with default headers values
func NewGetMaintenanceWindowTooManyRequests() *GetMaintenanceWindowTooManyRequests {
	return &GetMaintenanceWindowTooManyRequests{}
}

/*GetMaintenanceWindowTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetMaintenanceWindowTooManyRequests struct {
	Payload *models.Error
}

func (o *GetMaintenanceWindowTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /maintenance_windows/{id}][%d] getMaintenanceWindowTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMaintenanceWindowTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
