// Code generated by go-swagger; DO NOT EDIT.

package maintenance_windows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new maintenance windows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for maintenance windows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateMaintenanceWindow creates a maintenance window

Create a new maintenance window for the specified services. No new incidents will be created for a service that is in maintenance.
*/
func (a *Client) CreateMaintenanceWindow(params *CreateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMaintenanceWindowCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMaintenanceWindow",
		Method:             "POST",
		PathPattern:        "/maintenance_windows",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMaintenanceWindowCreated), nil

}

/*
DeleteMaintenanceWindow deletes or end a maintenance window

Delete an existing maintenance window if it's in the future, or end it if it's currently on-going. If the maintenance window has already ended it cannot be deleted.
*/
func (a *Client) DeleteMaintenanceWindow(params *DeleteMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMaintenanceWindowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMaintenanceWindow",
		Method:             "DELETE",
		PathPattern:        "/maintenance_windows/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMaintenanceWindowNoContent), nil

}

/*
GetMaintenanceWindow gets a maintenance window

Get an existing maintenance window.
*/
func (a *Client) GetMaintenanceWindow(params *GetMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMaintenanceWindow",
		Method:             "GET",
		PathPattern:        "/maintenance_windows/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaintenanceWindowOK), nil

}

/*
ListMaintenanceWindows lists maintenance windows

List existing maintenance windows, optionally filtered by service and/or team, or whether they are from the past, present or future.
*/
func (a *Client) ListMaintenanceWindows(params *ListMaintenanceWindowsParams, authInfo runtime.ClientAuthInfoWriter) (*ListMaintenanceWindowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMaintenanceWindowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listMaintenanceWindows",
		Method:             "GET",
		PathPattern:        "/maintenance_windows",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListMaintenanceWindowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListMaintenanceWindowsOK), nil

}

/*
UpdateMaintenanceWindow updates a maintenance window

Update an existing maintenance window.
*/
func (a *Client) UpdateMaintenanceWindow(params *UpdateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMaintenanceWindowParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMaintenanceWindow",
		Method:             "PUT",
		PathPattern:        "/maintenance_windows/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMaintenanceWindowOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
