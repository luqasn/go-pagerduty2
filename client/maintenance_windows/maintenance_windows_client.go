// Code generated by go-swagger; DO NOT EDIT.

package maintenance_windows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new maintenance windows API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for maintenance windows API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteMaintenanceWindowsID deletes or end a maintenance window

Delete an existing maintenance window if it's in the future, or end it if it's currently on-going. If the maintenance window has already ended it cannot be deleted.
*/
func (a *Client) DeleteMaintenanceWindowsID(params *DeleteMaintenanceWindowsIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMaintenanceWindowsIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMaintenanceWindowsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMaintenanceWindowsID",
		Method:             "DELETE",
		PathPattern:        "/maintenance_windows/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMaintenanceWindowsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMaintenanceWindowsIDNoContent), nil

}

/*
GetMaintenanceWindows lists maintenance windows

List existing maintenance windows, optionally filtered by service and/or team, or whether they are from the past, present or future.
*/
func (a *Client) GetMaintenanceWindows(params *GetMaintenanceWindowsParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaintenanceWindowsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMaintenanceWindows",
		Method:             "GET",
		PathPattern:        "/maintenance_windows",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMaintenanceWindowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaintenanceWindowsOK), nil

}

/*
GetMaintenanceWindowsID gets a maintenance window

Get an existing maintenance window.
*/
func (a *Client) GetMaintenanceWindowsID(params *GetMaintenanceWindowsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMaintenanceWindowsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMaintenanceWindowsID",
		Method:             "GET",
		PathPattern:        "/maintenance_windows/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMaintenanceWindowsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMaintenanceWindowsIDOK), nil

}

/*
PostMaintenanceWindows creates a maintenance window

Create a new maintenance window for the specified services. No new incidents will be created for a service that is in maintenance.
*/
func (a *Client) PostMaintenanceWindows(params *PostMaintenanceWindowsParams, authInfo runtime.ClientAuthInfoWriter) (*PostMaintenanceWindowsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMaintenanceWindowsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMaintenanceWindows",
		Method:             "POST",
		PathPattern:        "/maintenance_windows",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMaintenanceWindowsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMaintenanceWindowsCreated), nil

}

/*
PutMaintenanceWindowsID updates a maintenance window

Update an existing maintenance window.
*/
func (a *Client) PutMaintenanceWindowsID(params *PutMaintenanceWindowsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutMaintenanceWindowsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMaintenanceWindowsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMaintenanceWindowsID",
		Method:             "PUT",
		PathPattern:        "/maintenance_windows/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMaintenanceWindowsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMaintenanceWindowsIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
