// Code generated by go-swagger; DO NOT EDIT.

package on_calls

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetOncallsReader is a Reader for the GetOncalls structure.
type GetOncallsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOncallsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetOncallsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetOncallsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetOncallsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetOncallsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetOncallsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetOncallsOK creates a GetOncallsOK with default headers values
func NewGetOncallsOK() *GetOncallsOK {
	return &GetOncallsOK{}
}

/*GetOncallsOK handles this case with default header values.

A paginated array of on-call objects.
*/
type GetOncallsOK struct {
	Payload *models.GetOncallsOKBody
}

func (o *GetOncallsOK) Error() string {
	return fmt.Sprintf("[GET /oncalls][%d] getOncallsOK  %+v", 200, o.Payload)
}

func (o *GetOncallsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetOncallsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOncallsBadRequest creates a GetOncallsBadRequest with default headers values
func NewGetOncallsBadRequest() *GetOncallsBadRequest {
	return &GetOncallsBadRequest{}
}

/*GetOncallsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetOncallsBadRequest struct {
	Payload *models.Error
}

func (o *GetOncallsBadRequest) Error() string {
	return fmt.Sprintf("[GET /oncalls][%d] getOncallsBadRequest  %+v", 400, o.Payload)
}

func (o *GetOncallsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOncallsUnauthorized creates a GetOncallsUnauthorized with default headers values
func NewGetOncallsUnauthorized() *GetOncallsUnauthorized {
	return &GetOncallsUnauthorized{}
}

/*GetOncallsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetOncallsUnauthorized struct {
	Payload *models.Error
}

func (o *GetOncallsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /oncalls][%d] getOncallsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOncallsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOncallsForbidden creates a GetOncallsForbidden with default headers values
func NewGetOncallsForbidden() *GetOncallsForbidden {
	return &GetOncallsForbidden{}
}

/*GetOncallsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetOncallsForbidden struct {
	Payload *models.Error
}

func (o *GetOncallsForbidden) Error() string {
	return fmt.Sprintf("[GET /oncalls][%d] getOncallsForbidden  %+v", 403, o.Payload)
}

func (o *GetOncallsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOncallsTooManyRequests creates a GetOncallsTooManyRequests with default headers values
func NewGetOncallsTooManyRequests() *GetOncallsTooManyRequests {
	return &GetOncallsTooManyRequests{}
}

/*GetOncallsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetOncallsTooManyRequests struct {
	Payload *models.Error
}

func (o *GetOncallsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /oncalls][%d] getOncallsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOncallsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
