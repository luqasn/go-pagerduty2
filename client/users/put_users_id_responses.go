// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutUsersIDReader is a Reader for the PutUsersID structure.
type PutUsersIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUsersIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutUsersIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutUsersIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutUsersIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewPutUsersIDPaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutUsersIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutUsersIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutUsersIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutUsersIDOK creates a PutUsersIDOK with default headers values
func NewPutUsersIDOK() *PutUsersIDOK {
	return &PutUsersIDOK{}
}

/*PutUsersIDOK handles this case with default header values.

The user that was updated.
*/
type PutUsersIDOK struct {
	Payload *models.PutUsersIDOKBody
}

func (o *PutUsersIDOK) Error() string {
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdOK  %+v", 200, o.Payload)
}

func (o *PutUsersIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutUsersIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDBadRequest creates a PutUsersIDBadRequest with default headers values
func NewPutUsersIDBadRequest() *PutUsersIDBadRequest {
	return &PutUsersIDBadRequest{}
}

/*PutUsersIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutUsersIDBadRequest struct {
	Payload *models.Error
}

func (o *PutUsersIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutUsersIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDUnauthorized creates a PutUsersIDUnauthorized with default headers values
func NewPutUsersIDUnauthorized() *PutUsersIDUnauthorized {
	return &PutUsersIDUnauthorized{}
}

/*PutUsersIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutUsersIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutUsersIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUsersIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDPaymentRequired creates a PutUsersIDPaymentRequired with default headers values
func NewPutUsersIDPaymentRequired() *PutUsersIDPaymentRequired {
	return &PutUsersIDPaymentRequired{}
}

/*PutUsersIDPaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type PutUsersIDPaymentRequired struct {
	Payload *models.Error
}

func (o *PutUsersIDPaymentRequired) Error() string {
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdPaymentRequired  %+v", 402, o.Payload)
}

func (o *PutUsersIDPaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDForbidden creates a PutUsersIDForbidden with default headers values
func NewPutUsersIDForbidden() *PutUsersIDForbidden {
	return &PutUsersIDForbidden{}
}

/*PutUsersIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutUsersIDForbidden struct {
	Payload *models.Error
}

func (o *PutUsersIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdForbidden  %+v", 403, o.Payload)
}

func (o *PutUsersIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDNotFound creates a PutUsersIDNotFound with default headers values
func NewPutUsersIDNotFound() *PutUsersIDNotFound {
	return &PutUsersIDNotFound{}
}

/*PutUsersIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutUsersIDNotFound struct {
	Payload *models.Error
}

func (o *PutUsersIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdNotFound  %+v", 404, o.Payload)
}

func (o *PutUsersIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDTooManyRequests creates a PutUsersIDTooManyRequests with default headers values
func NewPutUsersIDTooManyRequests() *PutUsersIDTooManyRequests {
	return &PutUsersIDTooManyRequests{}
}

/*PutUsersIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutUsersIDTooManyRequests struct {
	Payload *models.Error
}

func (o *PutUsersIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /users/{id}][%d] putUsersIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutUsersIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
