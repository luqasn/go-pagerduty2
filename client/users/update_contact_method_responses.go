// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// UpdateContactMethodReader is a Reader for the UpdateContactMethod structure.
type UpdateContactMethodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateContactMethodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateContactMethodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateContactMethodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateContactMethodUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewUpdateContactMethodForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateContactMethodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewUpdateContactMethodTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateContactMethodOK creates a UpdateContactMethodOK with default headers values
func NewUpdateContactMethodOK() *UpdateContactMethodOK {
	return &UpdateContactMethodOK{}
}

/*UpdateContactMethodOK handles this case with default header values.

The user's contact method that was updated.
*/
type UpdateContactMethodOK struct {
	Payload *models.UpdateContactMethodOKBody
}

func (o *UpdateContactMethodOK) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] updateContactMethodOK  %+v", 200, o.Payload)
}

func (o *UpdateContactMethodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UpdateContactMethodOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactMethodBadRequest creates a UpdateContactMethodBadRequest with default headers values
func NewUpdateContactMethodBadRequest() *UpdateContactMethodBadRequest {
	return &UpdateContactMethodBadRequest{}
}

/*UpdateContactMethodBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type UpdateContactMethodBadRequest struct {
	Payload *models.Error
}

func (o *UpdateContactMethodBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] updateContactMethodBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateContactMethodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactMethodUnauthorized creates a UpdateContactMethodUnauthorized with default headers values
func NewUpdateContactMethodUnauthorized() *UpdateContactMethodUnauthorized {
	return &UpdateContactMethodUnauthorized{}
}

/*UpdateContactMethodUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type UpdateContactMethodUnauthorized struct {
	Payload *models.Error
}

func (o *UpdateContactMethodUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] updateContactMethodUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateContactMethodUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactMethodForbidden creates a UpdateContactMethodForbidden with default headers values
func NewUpdateContactMethodForbidden() *UpdateContactMethodForbidden {
	return &UpdateContactMethodForbidden{}
}

/*UpdateContactMethodForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type UpdateContactMethodForbidden struct {
	Payload *models.Error
}

func (o *UpdateContactMethodForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] updateContactMethodForbidden  %+v", 403, o.Payload)
}

func (o *UpdateContactMethodForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactMethodNotFound creates a UpdateContactMethodNotFound with default headers values
func NewUpdateContactMethodNotFound() *UpdateContactMethodNotFound {
	return &UpdateContactMethodNotFound{}
}

/*UpdateContactMethodNotFound handles this case with default header values.

The requested resource was not found.
*/
type UpdateContactMethodNotFound struct {
	Payload *models.Error
}

func (o *UpdateContactMethodNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] updateContactMethodNotFound  %+v", 404, o.Payload)
}

func (o *UpdateContactMethodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContactMethodTooManyRequests creates a UpdateContactMethodTooManyRequests with default headers values
func NewUpdateContactMethodTooManyRequests() *UpdateContactMethodTooManyRequests {
	return &UpdateContactMethodTooManyRequests{}
}

/*UpdateContactMethodTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type UpdateContactMethodTooManyRequests struct {
	Payload *models.Error
}

func (o *UpdateContactMethodTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] updateContactMethodTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateContactMethodTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
