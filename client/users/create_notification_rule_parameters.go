// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// NewCreateNotificationRuleParams creates a new CreateNotificationRuleParams object
// with the default values initialized.
func NewCreateNotificationRuleParams() *CreateNotificationRuleParams {
	var ()
	return &CreateNotificationRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateNotificationRuleParamsWithTimeout creates a new CreateNotificationRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateNotificationRuleParamsWithTimeout(timeout time.Duration) *CreateNotificationRuleParams {
	var ()
	return &CreateNotificationRuleParams{

		timeout: timeout,
	}
}

// NewCreateNotificationRuleParamsWithContext creates a new CreateNotificationRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateNotificationRuleParamsWithContext(ctx context.Context) *CreateNotificationRuleParams {
	var ()
	return &CreateNotificationRuleParams{

		Context: ctx,
	}
}

// NewCreateNotificationRuleParamsWithHTTPClient creates a new CreateNotificationRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateNotificationRuleParamsWithHTTPClient(client *http.Client) *CreateNotificationRuleParams {
	var ()
	return &CreateNotificationRuleParams{
		HTTPClient: client,
	}
}

/*CreateNotificationRuleParams contains all the parameters to send to the API endpoint
for the create notification rule operation typically these are written to a http.Request
*/
type CreateNotificationRuleParams struct {

	/*ID*/
	ID string
	/*NotificationRule
	  The notification rule to be created.

	*/
	NotificationRule *models.CreateNotificationRuleParamsBody

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create notification rule params
func (o *CreateNotificationRuleParams) WithTimeout(timeout time.Duration) *CreateNotificationRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create notification rule params
func (o *CreateNotificationRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create notification rule params
func (o *CreateNotificationRuleParams) WithContext(ctx context.Context) *CreateNotificationRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create notification rule params
func (o *CreateNotificationRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create notification rule params
func (o *CreateNotificationRuleParams) WithHTTPClient(client *http.Client) *CreateNotificationRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create notification rule params
func (o *CreateNotificationRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the create notification rule params
func (o *CreateNotificationRuleParams) WithID(id string) *CreateNotificationRuleParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the create notification rule params
func (o *CreateNotificationRuleParams) SetID(id string) {
	o.ID = id
}

// WithNotificationRule adds the notificationRule to the create notification rule params
func (o *CreateNotificationRuleParams) WithNotificationRule(notificationRule *models.CreateNotificationRuleParamsBody) *CreateNotificationRuleParams {
	o.SetNotificationRule(notificationRule)
	return o
}

// SetNotificationRule adds the notificationRule to the create notification rule params
func (o *CreateNotificationRuleParams) SetNotificationRule(notificationRule *models.CreateNotificationRuleParamsBody) {
	o.NotificationRule = notificationRule
}

// WriteToRequest writes these params to a swagger request
func (o *CreateNotificationRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.NotificationRule != nil {
		if err := r.SetBodyParam(o.NotificationRule); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
