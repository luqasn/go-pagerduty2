// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// DeleteContactMethodReader is a Reader for the DeleteContactMethod structure.
type DeleteContactMethodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteContactMethodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteContactMethodNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteContactMethodUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteContactMethodForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteContactMethodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewDeleteContactMethodTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteContactMethodNoContent creates a DeleteContactMethodNoContent with default headers values
func NewDeleteContactMethodNoContent() *DeleteContactMethodNoContent {
	return &DeleteContactMethodNoContent{}
}

/*DeleteContactMethodNoContent handles this case with default header values.

The contact method was deleted successfully.
*/
type DeleteContactMethodNoContent struct {
}

func (o *DeleteContactMethodNoContent) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/contact_methods/{contact_method_id}][%d] deleteContactMethodNoContent ", 204)
}

func (o *DeleteContactMethodNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteContactMethodUnauthorized creates a DeleteContactMethodUnauthorized with default headers values
func NewDeleteContactMethodUnauthorized() *DeleteContactMethodUnauthorized {
	return &DeleteContactMethodUnauthorized{}
}

/*DeleteContactMethodUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type DeleteContactMethodUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteContactMethodUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/contact_methods/{contact_method_id}][%d] deleteContactMethodUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteContactMethodUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContactMethodForbidden creates a DeleteContactMethodForbidden with default headers values
func NewDeleteContactMethodForbidden() *DeleteContactMethodForbidden {
	return &DeleteContactMethodForbidden{}
}

/*DeleteContactMethodForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type DeleteContactMethodForbidden struct {
	Payload *models.Error
}

func (o *DeleteContactMethodForbidden) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/contact_methods/{contact_method_id}][%d] deleteContactMethodForbidden  %+v", 403, o.Payload)
}

func (o *DeleteContactMethodForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContactMethodNotFound creates a DeleteContactMethodNotFound with default headers values
func NewDeleteContactMethodNotFound() *DeleteContactMethodNotFound {
	return &DeleteContactMethodNotFound{}
}

/*DeleteContactMethodNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteContactMethodNotFound struct {
	Payload *models.Error
}

func (o *DeleteContactMethodNotFound) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/contact_methods/{contact_method_id}][%d] deleteContactMethodNotFound  %+v", 404, o.Payload)
}

func (o *DeleteContactMethodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteContactMethodTooManyRequests creates a DeleteContactMethodTooManyRequests with default headers values
func NewDeleteContactMethodTooManyRequests() *DeleteContactMethodTooManyRequests {
	return &DeleteContactMethodTooManyRequests{}
}

/*DeleteContactMethodTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type DeleteContactMethodTooManyRequests struct {
	Payload *models.Error
}

func (o *DeleteContactMethodTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/contact_methods/{contact_method_id}][%d] deleteContactMethodTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteContactMethodTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
