// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// DeleteNotificationRuleReader is a Reader for the DeleteNotificationRule structure.
type DeleteNotificationRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNotificationRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteNotificationRuleNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteNotificationRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewDeleteNotificationRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteNotificationRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewDeleteNotificationRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteNotificationRuleNoContent creates a DeleteNotificationRuleNoContent with default headers values
func NewDeleteNotificationRuleNoContent() *DeleteNotificationRuleNoContent {
	return &DeleteNotificationRuleNoContent{}
}

/*DeleteNotificationRuleNoContent handles this case with default header values.

The notification rule was deleted successfully.
*/
type DeleteNotificationRuleNoContent struct {
}

func (o *DeleteNotificationRuleNoContent) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/notification_rules/{notification_rule_id}][%d] deleteNotificationRuleNoContent ", 204)
}

func (o *DeleteNotificationRuleNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteNotificationRuleUnauthorized creates a DeleteNotificationRuleUnauthorized with default headers values
func NewDeleteNotificationRuleUnauthorized() *DeleteNotificationRuleUnauthorized {
	return &DeleteNotificationRuleUnauthorized{}
}

/*DeleteNotificationRuleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type DeleteNotificationRuleUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteNotificationRuleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/notification_rules/{notification_rule_id}][%d] deleteNotificationRuleUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteNotificationRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationRuleForbidden creates a DeleteNotificationRuleForbidden with default headers values
func NewDeleteNotificationRuleForbidden() *DeleteNotificationRuleForbidden {
	return &DeleteNotificationRuleForbidden{}
}

/*DeleteNotificationRuleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type DeleteNotificationRuleForbidden struct {
	Payload *models.Error
}

func (o *DeleteNotificationRuleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/notification_rules/{notification_rule_id}][%d] deleteNotificationRuleForbidden  %+v", 403, o.Payload)
}

func (o *DeleteNotificationRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationRuleNotFound creates a DeleteNotificationRuleNotFound with default headers values
func NewDeleteNotificationRuleNotFound() *DeleteNotificationRuleNotFound {
	return &DeleteNotificationRuleNotFound{}
}

/*DeleteNotificationRuleNotFound handles this case with default header values.

The requested resource was not found.
*/
type DeleteNotificationRuleNotFound struct {
	Payload *models.Error
}

func (o *DeleteNotificationRuleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/notification_rules/{notification_rule_id}][%d] deleteNotificationRuleNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNotificationRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationRuleTooManyRequests creates a DeleteNotificationRuleTooManyRequests with default headers values
func NewDeleteNotificationRuleTooManyRequests() *DeleteNotificationRuleTooManyRequests {
	return &DeleteNotificationRuleTooManyRequests{}
}

/*DeleteNotificationRuleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type DeleteNotificationRuleTooManyRequests struct {
	Payload *models.Error
}

func (o *DeleteNotificationRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /users/{id}/notification_rules/{notification_rule_id}][%d] deleteNotificationRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteNotificationRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
