// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetContactMethodReader is a Reader for the GetContactMethod structure.
type GetContactMethodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContactMethodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetContactMethodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetContactMethodBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetContactMethodUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetContactMethodForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetContactMethodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetContactMethodTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetContactMethodOK creates a GetContactMethodOK with default headers values
func NewGetContactMethodOK() *GetContactMethodOK {
	return &GetContactMethodOK{}
}

/*GetContactMethodOK handles this case with default header values.

The user's contact method requested.
*/
type GetContactMethodOK struct {
	Payload *models.GetContactMethodOKBody
}

func (o *GetContactMethodOK) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods/{contact_method_id}][%d] getContactMethodOK  %+v", 200, o.Payload)
}

func (o *GetContactMethodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetContactMethodOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContactMethodBadRequest creates a GetContactMethodBadRequest with default headers values
func NewGetContactMethodBadRequest() *GetContactMethodBadRequest {
	return &GetContactMethodBadRequest{}
}

/*GetContactMethodBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetContactMethodBadRequest struct {
	Payload *models.Error
}

func (o *GetContactMethodBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods/{contact_method_id}][%d] getContactMethodBadRequest  %+v", 400, o.Payload)
}

func (o *GetContactMethodBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContactMethodUnauthorized creates a GetContactMethodUnauthorized with default headers values
func NewGetContactMethodUnauthorized() *GetContactMethodUnauthorized {
	return &GetContactMethodUnauthorized{}
}

/*GetContactMethodUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetContactMethodUnauthorized struct {
	Payload *models.Error
}

func (o *GetContactMethodUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods/{contact_method_id}][%d] getContactMethodUnauthorized  %+v", 401, o.Payload)
}

func (o *GetContactMethodUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContactMethodForbidden creates a GetContactMethodForbidden with default headers values
func NewGetContactMethodForbidden() *GetContactMethodForbidden {
	return &GetContactMethodForbidden{}
}

/*GetContactMethodForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetContactMethodForbidden struct {
	Payload *models.Error
}

func (o *GetContactMethodForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods/{contact_method_id}][%d] getContactMethodForbidden  %+v", 403, o.Payload)
}

func (o *GetContactMethodForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContactMethodNotFound creates a GetContactMethodNotFound with default headers values
func NewGetContactMethodNotFound() *GetContactMethodNotFound {
	return &GetContactMethodNotFound{}
}

/*GetContactMethodNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetContactMethodNotFound struct {
	Payload *models.Error
}

func (o *GetContactMethodNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods/{contact_method_id}][%d] getContactMethodNotFound  %+v", 404, o.Payload)
}

func (o *GetContactMethodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContactMethodTooManyRequests creates a GetContactMethodTooManyRequests with default headers values
func NewGetContactMethodTooManyRequests() *GetContactMethodTooManyRequests {
	return &GetContactMethodTooManyRequests{}
}

/*GetContactMethodTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetContactMethodTooManyRequests struct {
	Payload *models.Error
}

func (o *GetContactMethodTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods/{contact_method_id}][%d] getContactMethodTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetContactMethodTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
