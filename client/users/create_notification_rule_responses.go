// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// CreateNotificationRuleReader is a Reader for the CreateNotificationRule structure.
type CreateNotificationRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNotificationRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewCreateNotificationRuleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateNotificationRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateNotificationRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 402:
		result := NewCreateNotificationRulePaymentRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewCreateNotificationRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewCreateNotificationRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateNotificationRuleCreated creates a CreateNotificationRuleCreated with default headers values
func NewCreateNotificationRuleCreated() *CreateNotificationRuleCreated {
	return &CreateNotificationRuleCreated{}
}

/*CreateNotificationRuleCreated handles this case with default header values.

The notification rule that was created.
*/
type CreateNotificationRuleCreated struct {
	Payload *models.CreateNotificationRuleCreatedBody
}

func (o *CreateNotificationRuleCreated) Error() string {
	return fmt.Sprintf("[POST /users/{id}/notification_rules][%d] createNotificationRuleCreated  %+v", 201, o.Payload)
}

func (o *CreateNotificationRuleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateNotificationRuleCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationRuleBadRequest creates a CreateNotificationRuleBadRequest with default headers values
func NewCreateNotificationRuleBadRequest() *CreateNotificationRuleBadRequest {
	return &CreateNotificationRuleBadRequest{}
}

/*CreateNotificationRuleBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type CreateNotificationRuleBadRequest struct {
	Payload *models.Error
}

func (o *CreateNotificationRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /users/{id}/notification_rules][%d] createNotificationRuleBadRequest  %+v", 400, o.Payload)
}

func (o *CreateNotificationRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationRuleUnauthorized creates a CreateNotificationRuleUnauthorized with default headers values
func NewCreateNotificationRuleUnauthorized() *CreateNotificationRuleUnauthorized {
	return &CreateNotificationRuleUnauthorized{}
}

/*CreateNotificationRuleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type CreateNotificationRuleUnauthorized struct {
	Payload *models.Error
}

func (o *CreateNotificationRuleUnauthorized) Error() string {
	return fmt.Sprintf("[POST /users/{id}/notification_rules][%d] createNotificationRuleUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateNotificationRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationRulePaymentRequired creates a CreateNotificationRulePaymentRequired with default headers values
func NewCreateNotificationRulePaymentRequired() *CreateNotificationRulePaymentRequired {
	return &CreateNotificationRulePaymentRequired{}
}

/*CreateNotificationRulePaymentRequired handles this case with default header values.

Account does not have the abilities to perform the action. Please review the response for the required abilities.
You can also use the [Abilities API](#resource_Abilities) to determine what features are available to your account.

*/
type CreateNotificationRulePaymentRequired struct {
	Payload *models.Error
}

func (o *CreateNotificationRulePaymentRequired) Error() string {
	return fmt.Sprintf("[POST /users/{id}/notification_rules][%d] createNotificationRulePaymentRequired  %+v", 402, o.Payload)
}

func (o *CreateNotificationRulePaymentRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationRuleForbidden creates a CreateNotificationRuleForbidden with default headers values
func NewCreateNotificationRuleForbidden() *CreateNotificationRuleForbidden {
	return &CreateNotificationRuleForbidden{}
}

/*CreateNotificationRuleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type CreateNotificationRuleForbidden struct {
	Payload *models.Error
}

func (o *CreateNotificationRuleForbidden) Error() string {
	return fmt.Sprintf("[POST /users/{id}/notification_rules][%d] createNotificationRuleForbidden  %+v", 403, o.Payload)
}

func (o *CreateNotificationRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationRuleTooManyRequests creates a CreateNotificationRuleTooManyRequests with default headers values
func NewCreateNotificationRuleTooManyRequests() *CreateNotificationRuleTooManyRequests {
	return &CreateNotificationRuleTooManyRequests{}
}

/*CreateNotificationRuleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type CreateNotificationRuleTooManyRequests struct {
	Payload *models.Error
}

func (o *CreateNotificationRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /users/{id}/notification_rules][%d] createNotificationRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateNotificationRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
