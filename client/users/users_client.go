// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteUsersID deletes a user

Remove an existing user.
*/
func (a *Client) DeleteUsersID(params *DeleteUsersIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUsersIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersID",
		Method:             "DELETE",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersIDNoContent), nil

}

/*
DeleteUsersIDContactMethodsContactMethodID deletes a user s contact method

Remove a user's contact method.
*/
func (a *Client) DeleteUsersIDContactMethodsContactMethodID(params *DeleteUsersIDContactMethodsContactMethodIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUsersIDContactMethodsContactMethodIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersIDContactMethodsContactMethodIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersIDContactMethodsContactMethodID",
		Method:             "DELETE",
		PathPattern:        "/users/{id}/contact_methods/{contact_method_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersIDContactMethodsContactMethodIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersIDContactMethodsContactMethodIDNoContent), nil

}

/*
DeleteUsersIDNotificationRulesNotificationRuleID deletes a user s notification rule

Remove a user's notification rule.
*/
func (a *Client) DeleteUsersIDNotificationRulesNotificationRuleID(params *DeleteUsersIDNotificationRulesNotificationRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUsersIDNotificationRulesNotificationRuleIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUsersIDNotificationRulesNotificationRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteUsersIDNotificationRulesNotificationRuleID",
		Method:             "DELETE",
		PathPattern:        "/users/{id}/notification_rules/{notification_rule_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUsersIDNotificationRulesNotificationRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUsersIDNotificationRulesNotificationRuleIDNoContent), nil

}

/*
GetUsers lists users

List users of your PagerDuty account, optionally filtered by a search query.
*/
func (a *Client) GetUsers(params *GetUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersOK), nil

}

/*
GetUsersID gets a user

Get details about an existing user.
*/
func (a *Client) GetUsersID(params *GetUsersIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersID",
		Method:             "GET",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDOK), nil

}

/*
GetUsersIDContactMethods lists a user s contact methods

List contact methods of your PagerDuty user.
*/
func (a *Client) GetUsersIDContactMethods(params *GetUsersIDContactMethodsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDContactMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDContactMethodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersIDContactMethods",
		Method:             "GET",
		PathPattern:        "/users/{id}/contact_methods",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersIDContactMethodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDContactMethodsOK), nil

}

/*
GetUsersIDContactMethodsContactMethodID gets a user s contact method

Get details about a user's contact method.
*/
func (a *Client) GetUsersIDContactMethodsContactMethodID(params *GetUsersIDContactMethodsContactMethodIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDContactMethodsContactMethodIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDContactMethodsContactMethodIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersIDContactMethodsContactMethodID",
		Method:             "GET",
		PathPattern:        "/users/{id}/contact_methods/{contact_method_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersIDContactMethodsContactMethodIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDContactMethodsContactMethodIDOK), nil

}

/*
GetUsersIDNotificationRules lists a user s notification rules

List notification rules of your PagerDuty user.
*/
func (a *Client) GetUsersIDNotificationRules(params *GetUsersIDNotificationRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDNotificationRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDNotificationRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersIDNotificationRules",
		Method:             "GET",
		PathPattern:        "/users/{id}/notification_rules",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersIDNotificationRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDNotificationRulesOK), nil

}

/*
GetUsersIDNotificationRulesNotificationRuleID gets a user s notification rule

Get details about a user's notification rule.
*/
func (a *Client) GetUsersIDNotificationRulesNotificationRuleID(params *GetUsersIDNotificationRulesNotificationRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersIDNotificationRulesNotificationRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersIDNotificationRulesNotificationRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUsersIDNotificationRulesNotificationRuleID",
		Method:             "GET",
		PathPattern:        "/users/{id}/notification_rules/{notification_rule_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersIDNotificationRulesNotificationRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUsersIDNotificationRulesNotificationRuleIDOK), nil

}

/*
PostUsers creates a user

Create a new user. Note that you must also supply a `password` property to create a user--it will not be returned by any API.
*/
func (a *Client) PostUsers(params *PostUsersParams, authInfo runtime.ClientAuthInfoWriter) (*PostUsersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsers",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersCreated), nil

}

/*
PostUsersIDContactMethods creates a user contact method

Create a new contact method.
*/
func (a *Client) PostUsersIDContactMethods(params *PostUsersIDContactMethodsParams, authInfo runtime.ClientAuthInfoWriter) (*PostUsersIDContactMethodsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersIDContactMethodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersIDContactMethods",
		Method:             "POST",
		PathPattern:        "/users/{id}/contact_methods",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersIDContactMethodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersIDContactMethodsCreated), nil

}

/*
PostUsersIDNotificationRules creates a user notification rule

Create a new notification rule.
*/
func (a *Client) PostUsersIDNotificationRules(params *PostUsersIDNotificationRulesParams, authInfo runtime.ClientAuthInfoWriter) (*PostUsersIDNotificationRulesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostUsersIDNotificationRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostUsersIDNotificationRules",
		Method:             "POST",
		PathPattern:        "/users/{id}/notification_rules",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostUsersIDNotificationRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostUsersIDNotificationRulesCreated), nil

}

/*
PutUsersID updates a user

Update an existing user. Note that you may also supply a `password` property--it will not be returned by any API.
*/
func (a *Client) PutUsersID(params *PutUsersIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutUsersIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUsersID",
		Method:             "PUT",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUsersIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUsersIDOK), nil

}

/*
PutUsersIDContactMethodsContactMethodID updates a user s contact method

Update a user's contact method.
*/
func (a *Client) PutUsersIDContactMethodsContactMethodID(params *PutUsersIDContactMethodsContactMethodIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutUsersIDContactMethodsContactMethodIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersIDContactMethodsContactMethodIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUsersIDContactMethodsContactMethodID",
		Method:             "PUT",
		PathPattern:        "/users/{id}/contact_methods/{contact_method_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUsersIDContactMethodsContactMethodIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUsersIDContactMethodsContactMethodIDOK), nil

}

/*
PutUsersIDNotificationRulesNotificationRuleID updates a user s notification rule

Update a user's notification rule.
*/
func (a *Client) PutUsersIDNotificationRulesNotificationRuleID(params *PutUsersIDNotificationRulesNotificationRuleIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutUsersIDNotificationRulesNotificationRuleIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsersIDNotificationRulesNotificationRuleIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutUsersIDNotificationRulesNotificationRuleID",
		Method:             "PUT",
		PathPattern:        "/users/{id}/notification_rules/{notification_rule_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutUsersIDNotificationRulesNotificationRuleIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutUsersIDNotificationRulesNotificationRuleIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
