// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateContactMethod creates a user contact method

Create a new contact method.
*/
func (a *Client) CreateContactMethod(params *CreateContactMethodParams, authInfo runtime.ClientAuthInfoWriter) (*CreateContactMethodCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContactMethodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createContactMethod",
		Method:             "POST",
		PathPattern:        "/users/{id}/contact_methods",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContactMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateContactMethodCreated), nil

}

/*
CreateNotificationRule creates a user notification rule

Create a new notification rule.
*/
func (a *Client) CreateNotificationRule(params *CreateNotificationRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNotificationRuleCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNotificationRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNotificationRule",
		Method:             "POST",
		PathPattern:        "/users/{id}/notification_rules",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNotificationRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNotificationRuleCreated), nil

}

/*
CreateUser creates a user

Create a new user. Note that you must also supply a `password` property to create a user--it will not be returned by any API.
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateUserCreated), nil

}

/*
DeleteContactMethod deletes a user s contact method

Remove a user's contact method.
*/
func (a *Client) DeleteContactMethod(params *DeleteContactMethodParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteContactMethodNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteContactMethodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteContactMethod",
		Method:             "DELETE",
		PathPattern:        "/users/{id}/contact_methods/{contact_method_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteContactMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteContactMethodNoContent), nil

}

/*
DeleteNotificationRule deletes a user s notification rule

Remove a user's notification rule.
*/
func (a *Client) DeleteNotificationRule(params *DeleteNotificationRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNotificationRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificationRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNotificationRule",
		Method:             "DELETE",
		PathPattern:        "/users/{id}/notification_rules/{notification_rule_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNotificationRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNotificationRuleNoContent), nil

}

/*
DeleteUser deletes a user

Remove an existing user.
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteUserNoContent), nil

}

/*
GetContactMethod gets a user s contact method

Get details about a user's contact method.
*/
func (a *Client) GetContactMethod(params *GetContactMethodParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactMethodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactMethodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContactMethod",
		Method:             "GET",
		PathPattern:        "/users/{id}/contact_methods/{contact_method_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContactMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContactMethodOK), nil

}

/*
GetNotificationRule gets a user s notification rule

Get details about a user's notification rule.
*/
func (a *Client) GetNotificationRule(params *GetNotificationRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetNotificationRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNotificationRule",
		Method:             "GET",
		PathPattern:        "/users/{id}/notification_rules/{notification_rule_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNotificationRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNotificationRuleOK), nil

}

/*
GetUser gets a user

Get details about an existing user.
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserOK), nil

}

/*
ListContactMethods lists a user s contact methods

List contact methods of your PagerDuty user.
*/
func (a *Client) ListContactMethods(params *ListContactMethodsParams, authInfo runtime.ClientAuthInfoWriter) (*ListContactMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListContactMethodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listContactMethods",
		Method:             "GET",
		PathPattern:        "/users/{id}/contact_methods",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListContactMethodsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListContactMethodsOK), nil

}

/*
ListNotificationRules lists a user s notification rules

List notification rules of your PagerDuty user.
*/
func (a *Client) ListNotificationRules(params *ListNotificationRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNotificationRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNotificationRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNotificationRules",
		Method:             "GET",
		PathPattern:        "/users/{id}/notification_rules",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNotificationRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNotificationRulesOK), nil

}

/*
ListUsers lists users

List users of your PagerDuty account, optionally filtered by a search query.
*/
func (a *Client) ListUsers(params *ListUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ListUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListUsersOK), nil

}

/*
UpdateContactMethod updates a user s contact method

Update a user's contact method.
*/
func (a *Client) UpdateContactMethod(params *UpdateContactMethodParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateContactMethodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContactMethodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateContactMethod",
		Method:             "PUT",
		PathPattern:        "/users/{id}/contact_methods/{contact_method_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContactMethodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateContactMethodOK), nil

}

/*
UpdateNotificationRule updates a user s notification rule

Update a user's notification rule.
*/
func (a *Client) UpdateNotificationRule(params *UpdateNotificationRuleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNotificationRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNotificationRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNotificationRule",
		Method:             "PUT",
		PathPattern:        "/users/{id}/notification_rules/{notification_rule_id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNotificationRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNotificationRuleOK), nil

}

/*
UpdateUser updates a user

Update an existing user. Note that you may also supply a `password` property--it will not be returned by any API.
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateUser",
		Method:             "PUT",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/vnd.pagerduty+json;version=2"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateUserOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
