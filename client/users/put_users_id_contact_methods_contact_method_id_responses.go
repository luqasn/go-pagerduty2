// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// PutUsersIDContactMethodsContactMethodIDReader is a Reader for the PutUsersIDContactMethodsContactMethodID structure.
type PutUsersIDContactMethodsContactMethodIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutUsersIDContactMethodsContactMethodIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutUsersIDContactMethodsContactMethodIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutUsersIDContactMethodsContactMethodIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutUsersIDContactMethodsContactMethodIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPutUsersIDContactMethodsContactMethodIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutUsersIDContactMethodsContactMethodIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewPutUsersIDContactMethodsContactMethodIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutUsersIDContactMethodsContactMethodIDOK creates a PutUsersIDContactMethodsContactMethodIDOK with default headers values
func NewPutUsersIDContactMethodsContactMethodIDOK() *PutUsersIDContactMethodsContactMethodIDOK {
	return &PutUsersIDContactMethodsContactMethodIDOK{}
}

/*PutUsersIDContactMethodsContactMethodIDOK handles this case with default header values.

The user's contact method that was updated.
*/
type PutUsersIDContactMethodsContactMethodIDOK struct {
	Payload *models.PutUsersIDContactMethodsContactMethodIDOKBody
}

func (o *PutUsersIDContactMethodsContactMethodIDOK) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] putUsersIdContactMethodsContactMethodIdOK  %+v", 200, o.Payload)
}

func (o *PutUsersIDContactMethodsContactMethodIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PutUsersIDContactMethodsContactMethodIDOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDContactMethodsContactMethodIDBadRequest creates a PutUsersIDContactMethodsContactMethodIDBadRequest with default headers values
func NewPutUsersIDContactMethodsContactMethodIDBadRequest() *PutUsersIDContactMethodsContactMethodIDBadRequest {
	return &PutUsersIDContactMethodsContactMethodIDBadRequest{}
}

/*PutUsersIDContactMethodsContactMethodIDBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type PutUsersIDContactMethodsContactMethodIDBadRequest struct {
	Payload *models.Error
}

func (o *PutUsersIDContactMethodsContactMethodIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] putUsersIdContactMethodsContactMethodIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutUsersIDContactMethodsContactMethodIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDContactMethodsContactMethodIDUnauthorized creates a PutUsersIDContactMethodsContactMethodIDUnauthorized with default headers values
func NewPutUsersIDContactMethodsContactMethodIDUnauthorized() *PutUsersIDContactMethodsContactMethodIDUnauthorized {
	return &PutUsersIDContactMethodsContactMethodIDUnauthorized{}
}

/*PutUsersIDContactMethodsContactMethodIDUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type PutUsersIDContactMethodsContactMethodIDUnauthorized struct {
	Payload *models.Error
}

func (o *PutUsersIDContactMethodsContactMethodIDUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] putUsersIdContactMethodsContactMethodIdUnauthorized  %+v", 401, o.Payload)
}

func (o *PutUsersIDContactMethodsContactMethodIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDContactMethodsContactMethodIDForbidden creates a PutUsersIDContactMethodsContactMethodIDForbidden with default headers values
func NewPutUsersIDContactMethodsContactMethodIDForbidden() *PutUsersIDContactMethodsContactMethodIDForbidden {
	return &PutUsersIDContactMethodsContactMethodIDForbidden{}
}

/*PutUsersIDContactMethodsContactMethodIDForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type PutUsersIDContactMethodsContactMethodIDForbidden struct {
	Payload *models.Error
}

func (o *PutUsersIDContactMethodsContactMethodIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] putUsersIdContactMethodsContactMethodIdForbidden  %+v", 403, o.Payload)
}

func (o *PutUsersIDContactMethodsContactMethodIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDContactMethodsContactMethodIDNotFound creates a PutUsersIDContactMethodsContactMethodIDNotFound with default headers values
func NewPutUsersIDContactMethodsContactMethodIDNotFound() *PutUsersIDContactMethodsContactMethodIDNotFound {
	return &PutUsersIDContactMethodsContactMethodIDNotFound{}
}

/*PutUsersIDContactMethodsContactMethodIDNotFound handles this case with default header values.

The requested resource was not found.
*/
type PutUsersIDContactMethodsContactMethodIDNotFound struct {
	Payload *models.Error
}

func (o *PutUsersIDContactMethodsContactMethodIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] putUsersIdContactMethodsContactMethodIdNotFound  %+v", 404, o.Payload)
}

func (o *PutUsersIDContactMethodsContactMethodIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutUsersIDContactMethodsContactMethodIDTooManyRequests creates a PutUsersIDContactMethodsContactMethodIDTooManyRequests with default headers values
func NewPutUsersIDContactMethodsContactMethodIDTooManyRequests() *PutUsersIDContactMethodsContactMethodIDTooManyRequests {
	return &PutUsersIDContactMethodsContactMethodIDTooManyRequests{}
}

/*PutUsersIDContactMethodsContactMethodIDTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type PutUsersIDContactMethodsContactMethodIDTooManyRequests struct {
	Payload *models.Error
}

func (o *PutUsersIDContactMethodsContactMethodIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /users/{id}/contact_methods/{contact_method_id}][%d] putUsersIdContactMethodsContactMethodIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *PutUsersIDContactMethodsContactMethodIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
