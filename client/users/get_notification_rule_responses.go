// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetNotificationRuleReader is a Reader for the GetNotificationRule structure.
type GetNotificationRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNotificationRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNotificationRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetNotificationRuleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetNotificationRuleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetNotificationRuleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetNotificationRuleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNotificationRuleOK creates a GetNotificationRuleOK with default headers values
func NewGetNotificationRuleOK() *GetNotificationRuleOK {
	return &GetNotificationRuleOK{}
}

/*GetNotificationRuleOK handles this case with default header values.

The user's notification rule requested.
*/
type GetNotificationRuleOK struct {
	Payload *models.GetNotificationRuleOKBody
}

func (o *GetNotificationRuleOK) Error() string {
	return fmt.Sprintf("[GET /users/{id}/notification_rules/{notification_rule_id}][%d] getNotificationRuleOK  %+v", 200, o.Payload)
}

func (o *GetNotificationRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetNotificationRuleOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationRuleBadRequest creates a GetNotificationRuleBadRequest with default headers values
func NewGetNotificationRuleBadRequest() *GetNotificationRuleBadRequest {
	return &GetNotificationRuleBadRequest{}
}

/*GetNotificationRuleBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetNotificationRuleBadRequest struct {
	Payload *models.Error
}

func (o *GetNotificationRuleBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{id}/notification_rules/{notification_rule_id}][%d] getNotificationRuleBadRequest  %+v", 400, o.Payload)
}

func (o *GetNotificationRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationRuleUnauthorized creates a GetNotificationRuleUnauthorized with default headers values
func NewGetNotificationRuleUnauthorized() *GetNotificationRuleUnauthorized {
	return &GetNotificationRuleUnauthorized{}
}

/*GetNotificationRuleUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetNotificationRuleUnauthorized struct {
	Payload *models.Error
}

func (o *GetNotificationRuleUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{id}/notification_rules/{notification_rule_id}][%d] getNotificationRuleUnauthorized  %+v", 401, o.Payload)
}

func (o *GetNotificationRuleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationRuleForbidden creates a GetNotificationRuleForbidden with default headers values
func NewGetNotificationRuleForbidden() *GetNotificationRuleForbidden {
	return &GetNotificationRuleForbidden{}
}

/*GetNotificationRuleForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetNotificationRuleForbidden struct {
	Payload *models.Error
}

func (o *GetNotificationRuleForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{id}/notification_rules/{notification_rule_id}][%d] getNotificationRuleForbidden  %+v", 403, o.Payload)
}

func (o *GetNotificationRuleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationRuleNotFound creates a GetNotificationRuleNotFound with default headers values
func NewGetNotificationRuleNotFound() *GetNotificationRuleNotFound {
	return &GetNotificationRuleNotFound{}
}

/*GetNotificationRuleNotFound handles this case with default header values.

The requested resource was not found.
*/
type GetNotificationRuleNotFound struct {
	Payload *models.Error
}

func (o *GetNotificationRuleNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{id}/notification_rules/{notification_rule_id}][%d] getNotificationRuleNotFound  %+v", 404, o.Payload)
}

func (o *GetNotificationRuleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationRuleTooManyRequests creates a GetNotificationRuleTooManyRequests with default headers values
func NewGetNotificationRuleTooManyRequests() *GetNotificationRuleTooManyRequests {
	return &GetNotificationRuleTooManyRequests{}
}

/*GetNotificationRuleTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetNotificationRuleTooManyRequests struct {
	Payload *models.Error
}

func (o *GetNotificationRuleTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /users/{id}/notification_rules/{notification_rule_id}][%d] getNotificationRuleTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetNotificationRuleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
