// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/luqasn/go-pagerduty2/models"
)

// GetUsersIDContactMethodsReader is a Reader for the GetUsersIDContactMethods structure.
type GetUsersIDContactMethodsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUsersIDContactMethodsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetUsersIDContactMethodsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetUsersIDContactMethodsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetUsersIDContactMethodsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewGetUsersIDContactMethodsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 429:
		result := NewGetUsersIDContactMethodsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetUsersIDContactMethodsOK creates a GetUsersIDContactMethodsOK with default headers values
func NewGetUsersIDContactMethodsOK() *GetUsersIDContactMethodsOK {
	return &GetUsersIDContactMethodsOK{}
}

/*GetUsersIDContactMethodsOK handles this case with default header values.

A list of contact methods.
*/
type GetUsersIDContactMethodsOK struct {
	Payload *models.GetUsersIDContactMethodsOKBody
}

func (o *GetUsersIDContactMethodsOK) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods][%d] getUsersIdContactMethodsOK  %+v", 200, o.Payload)
}

func (o *GetUsersIDContactMethodsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetUsersIDContactMethodsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersIDContactMethodsBadRequest creates a GetUsersIDContactMethodsBadRequest with default headers values
func NewGetUsersIDContactMethodsBadRequest() *GetUsersIDContactMethodsBadRequest {
	return &GetUsersIDContactMethodsBadRequest{}
}

/*GetUsersIDContactMethodsBadRequest handles this case with default header values.

Caller provided invalid arguments. Please review the response for error details. Retrying with the same arguments will *not* work.
*/
type GetUsersIDContactMethodsBadRequest struct {
	Payload *models.Error
}

func (o *GetUsersIDContactMethodsBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods][%d] getUsersIdContactMethodsBadRequest  %+v", 400, o.Payload)
}

func (o *GetUsersIDContactMethodsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersIDContactMethodsUnauthorized creates a GetUsersIDContactMethodsUnauthorized with default headers values
func NewGetUsersIDContactMethodsUnauthorized() *GetUsersIDContactMethodsUnauthorized {
	return &GetUsersIDContactMethodsUnauthorized{}
}

/*GetUsersIDContactMethodsUnauthorized handles this case with default header values.

Caller did not supply credentials or did not provide the correct credentials.
If you are using an API key, it may be invalid or your Authorization header may be malformed.

*/
type GetUsersIDContactMethodsUnauthorized struct {
	Payload *models.Error
}

func (o *GetUsersIDContactMethodsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods][%d] getUsersIdContactMethodsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetUsersIDContactMethodsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersIDContactMethodsForbidden creates a GetUsersIDContactMethodsForbidden with default headers values
func NewGetUsersIDContactMethodsForbidden() *GetUsersIDContactMethodsForbidden {
	return &GetUsersIDContactMethodsForbidden{}
}

/*GetUsersIDContactMethodsForbidden handles this case with default header values.

Caller is not authorized to view the requested resource.
While your authentication is valid, the authenticated user or token does not have permission to perform this action.

*/
type GetUsersIDContactMethodsForbidden struct {
	Payload *models.Error
}

func (o *GetUsersIDContactMethodsForbidden) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods][%d] getUsersIdContactMethodsForbidden  %+v", 403, o.Payload)
}

func (o *GetUsersIDContactMethodsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUsersIDContactMethodsTooManyRequests creates a GetUsersIDContactMethodsTooManyRequests with default headers values
func NewGetUsersIDContactMethodsTooManyRequests() *GetUsersIDContactMethodsTooManyRequests {
	return &GetUsersIDContactMethodsTooManyRequests{}
}

/*GetUsersIDContactMethodsTooManyRequests handles this case with default header values.

Too many requests have been made, the rate limit has been reached.
*/
type GetUsersIDContactMethodsTooManyRequests struct {
	Payload *models.Error
}

func (o *GetUsersIDContactMethodsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /users/{id}/contact_methods][%d] getUsersIdContactMethodsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetUsersIDContactMethodsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
