// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertAllOf1Body Body
//
// A JSON object containing data describing the alert.
// swagger:model alertAllOf1Body
type AlertAllOf1Body struct {
	contextsField []Context

	// An arbitrary JSON object containing any data explaining the nature of the alert.
	// Read Only: true
	Details interface{} `json:"details,omitempty"`

	// The type of the body.
	// Enum: [alert_body]
	Type string `json:"type,omitempty"`
}

// Contexts gets the contexts of this base type
func (m *AlertAllOf1Body) Contexts() []Context {
	return m.contextsField
}

// SetContexts sets the contexts of this base type
func (m *AlertAllOf1Body) SetContexts(val []Context) {
	m.contextsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AlertAllOf1Body) UnmarshalJSON(raw []byte) error {
	var data struct {
		Contexts json.RawMessage `json:"contexts,omitempty"`

		Details interface{} `json:"details,omitempty"`

		Type string `json:"type,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	contexts, err := UnmarshalContextSlice(bytes.NewBuffer(data.Contexts), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result AlertAllOf1Body

	// contexts
	result.contextsField = contexts

	// details
	result.Details = data.Details

	// type
	result.Type = data.Type

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AlertAllOf1Body) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Details interface{} `json:"details,omitempty"`

		Type string `json:"type,omitempty"`
	}{

		Details: m.Details,

		Type: m.Type,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Contexts []Context `json:"contexts,omitempty"`
	}{

		Contexts: m.contextsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this alert all of1 body
func (m *AlertAllOf1Body) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContexts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertAllOf1Body) validateContexts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contexts()) { // not required
		return nil
	}

	for i := 0; i < len(m.Contexts()); i++ {

		if err := m.contextsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contexts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

var alertAllOf1BodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["alert_body"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertAllOf1BodyTypeTypePropEnum = append(alertAllOf1BodyTypeTypePropEnum, v)
	}
}

const (

	// AlertAllOf1BodyTypeAlertBody captures enum value "alert_body"
	AlertAllOf1BodyTypeAlertBody string = "alert_body"
)

// prop value enum
func (m *AlertAllOf1Body) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, alertAllOf1BodyTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AlertAllOf1Body) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AlertAllOf1Body) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertAllOf1Body) UnmarshalBinary(b []byte) error {
	var res AlertAllOf1Body
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
