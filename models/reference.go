// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// Reference reference
// swagger:discriminator Reference type
type Reference interface {
	runtime.Validatable

	// a URL at which the entity is uniquely displayed in the Web app
	// Read Only: true
	HTMLURL() string
	SetHTMLURL(string)

	// id
	// Read Only: true
	ID() string
	SetID(string)

	// the API show URL at which the object is accessible
	// Read Only: true
	Self() string
	SetSelf(string)

	// A short-form, server-generated string that provides succinct, important information about an object suitable for primary labeling of an entity in a client. In many cases, this will be identical to `name`, though it is not intended to be an identifier.
	// Read Only: true
	Summary() string
	SetSummary(string)

	// A string that determines the schema of the object. This must be the standard name for the entity, suffixed by `_reference` if the object is a reference.
	// Required: true
	// Read Only: true
	Type() string
	SetType(string)
}

type reference struct {
	htmlUrlField string

	idField string

	selfField string

	summaryField string

	typeField string
}

// HTMLURL gets the html url of this polymorphic type
func (m *reference) HTMLURL() string {
	return m.htmlUrlField
}

// SetHTMLURL sets the html url of this polymorphic type
func (m *reference) SetHTMLURL(val string) {
	m.htmlUrlField = val
}

// ID gets the id of this polymorphic type
func (m *reference) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *reference) SetID(val string) {
	m.idField = val
}

// Self gets the self of this polymorphic type
func (m *reference) Self() string {
	return m.selfField
}

// SetSelf sets the self of this polymorphic type
func (m *reference) SetSelf(val string) {
	m.selfField = val
}

// Summary gets the summary of this polymorphic type
func (m *reference) Summary() string {
	return m.summaryField
}

// SetSummary sets the summary of this polymorphic type
func (m *reference) SetSummary(val string) {
	m.summaryField = val
}

// Type gets the type of this polymorphic type
func (m *reference) Type() string {
	return "Reference"
}

// SetType sets the type of this polymorphic type
func (m *reference) SetType(val string) {

}

// UnmarshalReferenceSlice unmarshals polymorphic slices of Reference
func UnmarshalReferenceSlice(reader io.Reader, consumer runtime.Consumer) ([]Reference, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Reference
	for _, element := range elements {
		obj, err := unmarshalReference(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalReference unmarshals polymorphic Reference
func UnmarshalReference(reader io.Reader, consumer runtime.Consumer) (Reference, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalReference(data, consumer)
}

func unmarshalReference(data []byte, consumer runtime.Consumer) (Reference, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "Acknowledger":
		var result Acknowledger
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "AddonReference":
		var result AddonReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "Agent":
		var result Agent
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "AlertReference":
		var result AlertReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ContactMethodReference":
		var result ContactMethodReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "EscalationPolicyReference":
		var result EscalationPolicyReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "EscalationTarget":
		var result EscalationTarget
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ExtensionReference":
		var result ExtensionReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ExtensionSchemaReference":
		var result ExtensionSchemaReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "IncidentReference":
		var result IncidentReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "IntegrationReference":
		var result IntegrationReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "LogEntryReference":
		var result LogEntryReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "MaintenanceWindowReference":
		var result MaintenanceWindowReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "NotificationRuleReference":
		var result NotificationRuleReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "PriorityReference":
		var result PriorityReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "Reference":
		var result reference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ScheduleReference":
		var result ScheduleReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ServiceReference":
		var result ServiceReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "TeamReference":
		var result TeamReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "UserReference":
		var result UserReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "VendorReference":
		var result VendorReference
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}

// Validate validates this reference
func (m *reference) Validate(formats strfmt.Registry) error {
	return nil
}
