// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubSchedule sub schedule
// swagger:model SubSchedule
type SubSchedule struct {

	// The name of the subschedule
	// Required: true
	// Read Only: true
	// Enum: [Final Schedule Overrides]
	Name string `json:"name"`

	// The percentage of the time range covered by this layer. Returns null unless since or until are set.
	// Read Only: true
	RenderedCoveragePercentage float64 `json:"rendered_coverage_percentage,omitempty"`

	// This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.
	// Read Only: true
	RenderedScheduleEntries []*ScheduleLayerEntry `json:"rendered_schedule_entries"`
}

// Validate validates this sub schedule
func (m *SubSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenderedScheduleEntries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subScheduleTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Final Schedule","Overrides"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subScheduleTypeNamePropEnum = append(subScheduleTypeNamePropEnum, v)
	}
}

const (

	// SubScheduleNameFinalSchedule captures enum value "Final Schedule"
	SubScheduleNameFinalSchedule string = "Final Schedule"

	// SubScheduleNameOverrides captures enum value "Overrides"
	SubScheduleNameOverrides string = "Overrides"
)

// prop value enum
func (m *SubSchedule) validateNameEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subScheduleTypeNamePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubSchedule) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SubSchedule) validateRenderedScheduleEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.RenderedScheduleEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.RenderedScheduleEntries); i++ {
		if swag.IsZero(m.RenderedScheduleEntries[i]) { // not required
			continue
		}

		if m.RenderedScheduleEntries[i] != nil {
			if err := m.RenderedScheduleEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rendered_schedule_entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubSchedule) UnmarshalBinary(b []byte) error {
	var res SubSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
