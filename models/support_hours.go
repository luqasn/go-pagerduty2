// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SupportHours support hours
// swagger:model SupportHours
type SupportHours struct {

	// days of week
	// Read Only: true
	DaysOfWeek []int64 `json:"days_of_week"`

	// The support hours' ending time of day (date portion is ignored)
	EndTime string `json:"end_time,omitempty"`

	// The support hours' starting time of day (date portion is ignored)
	StartTime string `json:"start_time,omitempty"`

	// The time zone for the support hours
	TimeZone string `json:"time_zone,omitempty"`

	// The type of support hours
	// Enum: [fixed_time_per_day]
	Type *string `json:"type,omitempty"`
}

// Validate validates this support hours
func (m *SupportHours) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var supportHoursTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fixed_time_per_day"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		supportHoursTypeTypePropEnum = append(supportHoursTypeTypePropEnum, v)
	}
}

const (

	// SupportHoursTypeFixedTimePerDay captures enum value "fixed_time_per_day"
	SupportHoursTypeFixedTimePerDay string = "fixed_time_per_day"
)

// prop value enum
func (m *SupportHours) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, supportHoursTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SupportHours) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupportHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupportHours) UnmarshalBinary(b []byte) error {
	var res SupportHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
