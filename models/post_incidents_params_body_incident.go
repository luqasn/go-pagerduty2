// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostIncidentsParamsBodyIncident Details of the incident to be created.
// swagger:model postIncidentsParamsBodyIncident
type PostIncidentsParamsBodyIncident struct {

	// Assign the incident to these assignees. Cannot be specified if an escalation policy is given.
	Assignments []*PostIncidentsParamsBodyIncidentAssignmentsItems `json:"assignments"`

	// A JSON object containing data describing the incident.
	Body *IncidentBody `json:"body,omitempty"`

	// Delegate this incident to the specified escalation policy. Cannot be specified if an assignee is given.
	EscalationPolicy *EscalationPolicyReference `json:"escalation_policy,omitempty"`

	// A string which identifies the incident. Sending subsequent requests referencing the same service and with the same incident_key will result in those requests being rejected if an open incident matches that incident_key.
	IncidentKey string `json:"incident_key,omitempty"`

	// The priority of this incident.
	Priority *PriorityReference `json:"priority,omitempty"`

	// The incident will be created on this service.
	// Required: true
	Service *ServiceReference `json:"service"`

	// A succinct description of the nature, symptoms, cause, or effect of the incident.
	// Required: true
	Title *string `json:"title"`

	// type
	// Required: true
	// Enum: [incident]
	Type *string `json:"type"`
}

// Validate validates this post incidents params body incident
func (m *PostIncidentsParamsBodyIncident) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEscalationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PostIncidentsParamsBodyIncident) validateAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignments) { // not required
		return nil
	}

	for i := 0; i < len(m.Assignments); i++ {
		if swag.IsZero(m.Assignments[i]) { // not required
			continue
		}

		if m.Assignments[i] != nil {
			if err := m.Assignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PostIncidentsParamsBodyIncident) validateBody(formats strfmt.Registry) error {

	if swag.IsZero(m.Body) { // not required
		return nil
	}

	if m.Body != nil {
		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *PostIncidentsParamsBodyIncident) validateEscalationPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.EscalationPolicy) { // not required
		return nil
	}

	if m.EscalationPolicy != nil {
		if err := m.EscalationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalation_policy")
			}
			return err
		}
	}

	return nil
}

func (m *PostIncidentsParamsBodyIncident) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if m.Priority != nil {
		if err := m.Priority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priority")
			}
			return err
		}
	}

	return nil
}

func (m *PostIncidentsParamsBodyIncident) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *PostIncidentsParamsBodyIncident) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

var postIncidentsParamsBodyIncidentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["incident"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		postIncidentsParamsBodyIncidentTypeTypePropEnum = append(postIncidentsParamsBodyIncidentTypeTypePropEnum, v)
	}
}

const (

	// PostIncidentsParamsBodyIncidentTypeIncident captures enum value "incident"
	PostIncidentsParamsBodyIncidentTypeIncident string = "incident"
)

// prop value enum
func (m *PostIncidentsParamsBodyIncident) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, postIncidentsParamsBodyIncidentTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PostIncidentsParamsBodyIncident) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PostIncidentsParamsBodyIncident) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PostIncidentsParamsBodyIncident) UnmarshalBinary(b []byte) error {
	var res PostIncidentsParamsBodyIncident
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
