// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceAllOf1 service all of1
// swagger:model serviceAllOf1
type ServiceAllOf1 struct {

	// Time in seconds that an incident changes to the Triggered State after being Acknowledged. Value is `null` if the feature is disabled.
	AcknowledgementTimeout *int64 `json:"acknowledgement_timeout,omitempty"`

	// The array of add-ons associated with this service.
	// Read Only: true
	Addons []*AddonReference `json:"addons"`

	// Whether a service creates only incidents, or both alerts and incidents. A service must create alerts in order to enable incident merging.
	// * "create_incidents" - The service will create one incident and zero alerts for each incoming event.
	// * "create_alerts_and_incidents" - The service will create one incident and one associated alert for each incoming event.
	//
	// Enum: [create_incidents create_alerts_and_incidents]
	AlertCreation string `json:"alert_creation,omitempty"`

	// Time in seconds that an incident is automatically resolved if left open for that long. Value is `null` if the feature is disabled.
	AutoResolveTimeout *int64 `json:"auto_resolve_timeout,omitempty"`

	// The date/time when this service was created
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The user-provided description of the service.
	Description string `json:"description,omitempty"`

	// The escalation policy used by this service.
	EscalationPolicy *EscalationPolicyReference `json:"escalation_policy,omitempty"`

	// The default urgency for new incidents. Account must have the `urgencies` ability to assign a incident urgency rule.
	IncidentUrgencyRule *IncidentUrgencyRule `json:"incident_urgency_rule,omitempty"`

	// An array containing Integration objects that belong to this service. If `integrations` is passed as an argument, these are full objects - otherwise, these are references.
	// Read Only: true
	Integrations []*IntegrationReference `json:"integrations"`

	// The date/time when the most recent incident was created for this service.
	// Read Only: true
	// Format: date-time
	LastIncidentTimestamp strfmt.DateTime `json:"last_incident_timestamp,omitempty"`

	// The name of the service.
	Name string `json:"name,omitempty"`

	// An array containing scheduled actions for the service.
	ScheduledActions []*ScheduledAction `json:"scheduled_actions"`

	// The current state of the Service. Valid statuses are:
	//
	// - `active`: The service is enabled and has no open incidents.
	// - `warning`: The service is enabled and has one or more acknowledged incidents.
	// - `critical`: The service is enabled and has one or more triggered incidents.
	// - `maintenance`: The service is under maintenance, no new incidents will be triggered during maintenance mode.
	// - `disabled`: The service is disabled and will not have any new triggered incidents.
	//
	// Enum: [active warning critical maintenance disabled]
	Status string `json:"status,omitempty"`

	// The support hours for the service. May be used to define the incidents' urgency. Account must have the `service_support_hours` ability to assign support hours.
	SupportHours *SupportHours `json:"support_hours,omitempty"`

	// The set of teams associated with this service.
	// Read Only: true
	Teams []*TeamReference `json:"teams"`
}

// Validate validates this service all of1
func (m *ServiceAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertCreation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEscalationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncidentUrgencyRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastIncidentTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceAllOf1) validateAddons(formats strfmt.Registry) error {

	if swag.IsZero(m.Addons) { // not required
		return nil
	}

	for i := 0; i < len(m.Addons); i++ {
		if swag.IsZero(m.Addons[i]) { // not required
			continue
		}

		if m.Addons[i] != nil {
			if err := m.Addons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var serviceAllOf1TypeAlertCreationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create_incidents","create_alerts_and_incidents"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceAllOf1TypeAlertCreationPropEnum = append(serviceAllOf1TypeAlertCreationPropEnum, v)
	}
}

const (

	// ServiceAllOf1AlertCreationCreateIncidents captures enum value "create_incidents"
	ServiceAllOf1AlertCreationCreateIncidents string = "create_incidents"

	// ServiceAllOf1AlertCreationCreateAlertsAndIncidents captures enum value "create_alerts_and_incidents"
	ServiceAllOf1AlertCreationCreateAlertsAndIncidents string = "create_alerts_and_incidents"
)

// prop value enum
func (m *ServiceAllOf1) validateAlertCreationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceAllOf1TypeAlertCreationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceAllOf1) validateAlertCreation(formats strfmt.Registry) error {

	if swag.IsZero(m.AlertCreation) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlertCreationEnum("alert_creation", "body", m.AlertCreation); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAllOf1) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAllOf1) validateEscalationPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.EscalationPolicy) { // not required
		return nil
	}

	if m.EscalationPolicy != nil {
		if err := m.EscalationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalation_policy")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceAllOf1) validateIncidentUrgencyRule(formats strfmt.Registry) error {

	if swag.IsZero(m.IncidentUrgencyRule) { // not required
		return nil
	}

	if m.IncidentUrgencyRule != nil {
		if err := m.IncidentUrgencyRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident_urgency_rule")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceAllOf1) validateIntegrations(formats strfmt.Registry) error {

	if swag.IsZero(m.Integrations) { // not required
		return nil
	}

	for i := 0; i < len(m.Integrations); i++ {
		if swag.IsZero(m.Integrations[i]) { // not required
			continue
		}

		if m.Integrations[i] != nil {
			if err := m.Integrations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("integrations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceAllOf1) validateLastIncidentTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LastIncidentTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("last_incident_timestamp", "body", "date-time", m.LastIncidentTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAllOf1) validateScheduledActions(formats strfmt.Registry) error {

	if swag.IsZero(m.ScheduledActions) { // not required
		return nil
	}

	for i := 0; i < len(m.ScheduledActions); i++ {
		if swag.IsZero(m.ScheduledActions[i]) { // not required
			continue
		}

		if m.ScheduledActions[i] != nil {
			if err := m.ScheduledActions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheduled_actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var serviceAllOf1TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","warning","critical","maintenance","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceAllOf1TypeStatusPropEnum = append(serviceAllOf1TypeStatusPropEnum, v)
	}
}

const (

	// ServiceAllOf1StatusActive captures enum value "active"
	ServiceAllOf1StatusActive string = "active"

	// ServiceAllOf1StatusWarning captures enum value "warning"
	ServiceAllOf1StatusWarning string = "warning"

	// ServiceAllOf1StatusCritical captures enum value "critical"
	ServiceAllOf1StatusCritical string = "critical"

	// ServiceAllOf1StatusMaintenance captures enum value "maintenance"
	ServiceAllOf1StatusMaintenance string = "maintenance"

	// ServiceAllOf1StatusDisabled captures enum value "disabled"
	ServiceAllOf1StatusDisabled string = "disabled"
)

// prop value enum
func (m *ServiceAllOf1) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, serviceAllOf1TypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ServiceAllOf1) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAllOf1) validateSupportHours(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportHours) { // not required
		return nil
	}

	if m.SupportHours != nil {
		if err := m.SupportHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("support_hours")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceAllOf1) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceAllOf1) UnmarshalBinary(b []byte) error {
	var res ServiceAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
