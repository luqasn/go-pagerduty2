// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleLayer schedule layer
// swagger:model ScheduleLayer
type ScheduleLayer struct {

	// The end time of this layer. If `null`, the layer does not end.
	// Format: date-time
	End strfmt.DateTime `json:"end,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// The name of the schedule layer.
	Name string `json:"name,omitempty"`

	// The percentage of the time range covered by this layer. Returns null unless since or until are set.
	// Read Only: true
	RenderedCoveragePercentage float64 `json:"rendered_coverage_percentage,omitempty"`

	// This is a list of entries on the computed layer for the current time range. Since or until must be set in order for this field to be populated.
	// Read Only: true
	RenderedScheduleEntries []*ScheduleLayerEntry `json:"rendered_schedule_entries"`

	restrictionsField []Restriction

	// The duration of each on-call shift in seconds.
	// Required: true
	RotationTurnLengthSeconds *int64 `json:"rotation_turn_length_seconds"`

	// The effective start time of the layer. This can be before the start time of the schedule.
	// Required: true
	// Format: date-time
	RotationVirtualStart *strfmt.DateTime `json:"rotation_virtual_start"`

	// The start time of this layer.
	// Required: true
	// Format: date-time
	Start *strfmt.DateTime `json:"start"`

	// The ordered list of users on this layer. The position of the user on the list determines their order in the layer.
	// Required: true
	Users []*UserReference `json:"users"`
}

// Restrictions gets the restrictions of this base type
func (m *ScheduleLayer) Restrictions() []Restriction {
	return m.restrictionsField
}

// SetRestrictions sets the restrictions of this base type
func (m *ScheduleLayer) SetRestrictions(val []Restriction) {
	m.restrictionsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ScheduleLayer) UnmarshalJSON(raw []byte) error {
	var data struct {
		End strfmt.DateTime `json:"end,omitempty"`

		ID string `json:"id,omitempty"`

		Name string `json:"name,omitempty"`

		RenderedCoveragePercentage float64 `json:"rendered_coverage_percentage,omitempty"`

		RenderedScheduleEntries []*ScheduleLayerEntry `json:"rendered_schedule_entries,omitempty"`

		Restrictions json.RawMessage `json:"restrictions,omitempty"`

		RotationTurnLengthSeconds *int64 `json:"rotation_turn_length_seconds"`

		RotationVirtualStart *strfmt.DateTime `json:"rotation_virtual_start"`

		Start *strfmt.DateTime `json:"start"`

		Users []*UserReference `json:"users"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	restrictions, err := UnmarshalRestrictionSlice(bytes.NewBuffer(data.Restrictions), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result ScheduleLayer

	// end
	result.End = data.End

	// id
	result.ID = data.ID

	// name
	result.Name = data.Name

	// rendered_coverage_percentage
	result.RenderedCoveragePercentage = data.RenderedCoveragePercentage

	// rendered_schedule_entries
	result.RenderedScheduleEntries = data.RenderedScheduleEntries

	// restrictions
	result.restrictionsField = restrictions

	// rotation_turn_length_seconds
	result.RotationTurnLengthSeconds = data.RotationTurnLengthSeconds

	// rotation_virtual_start
	result.RotationVirtualStart = data.RotationVirtualStart

	// start
	result.Start = data.Start

	// users
	result.Users = data.Users

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ScheduleLayer) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		End strfmt.DateTime `json:"end,omitempty"`

		ID string `json:"id,omitempty"`

		Name string `json:"name,omitempty"`

		RenderedCoveragePercentage float64 `json:"rendered_coverage_percentage,omitempty"`

		RenderedScheduleEntries []*ScheduleLayerEntry `json:"rendered_schedule_entries,omitempty"`

		RotationTurnLengthSeconds *int64 `json:"rotation_turn_length_seconds"`

		RotationVirtualStart *strfmt.DateTime `json:"rotation_virtual_start"`

		Start *strfmt.DateTime `json:"start"`

		Users []*UserReference `json:"users"`
	}{

		End: m.End,

		ID: m.ID,

		Name: m.Name,

		RenderedCoveragePercentage: m.RenderedCoveragePercentage,

		RenderedScheduleEntries: m.RenderedScheduleEntries,

		RotationTurnLengthSeconds: m.RotationTurnLengthSeconds,

		RotationVirtualStart: m.RotationVirtualStart,

		Start: m.Start,

		Users: m.Users,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Restrictions []Restriction `json:"restrictions,omitempty"`
	}{

		Restrictions: m.restrictionsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this schedule layer
func (m *ScheduleLayer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenderedScheduleEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRotationTurnLengthSeconds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRotationVirtualStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleLayer) validateEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.End) { // not required
		return nil
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleLayer) validateRenderedScheduleEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.RenderedScheduleEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.RenderedScheduleEntries); i++ {
		if swag.IsZero(m.RenderedScheduleEntries[i]) { // not required
			continue
		}

		if m.RenderedScheduleEntries[i] != nil {
			if err := m.RenderedScheduleEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rendered_schedule_entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleLayer) validateRestrictions(formats strfmt.Registry) error {

	if swag.IsZero(m.Restrictions()) { // not required
		return nil
	}

	for i := 0; i < len(m.Restrictions()); i++ {

		if err := m.restrictionsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("restrictions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ScheduleLayer) validateRotationTurnLengthSeconds(formats strfmt.Registry) error {

	if err := validate.Required("rotation_turn_length_seconds", "body", m.RotationTurnLengthSeconds); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleLayer) validateRotationVirtualStart(formats strfmt.Registry) error {

	if err := validate.Required("rotation_virtual_start", "body", m.RotationVirtualStart); err != nil {
		return err
	}

	if err := validate.FormatOf("rotation_virtual_start", "body", "date-time", m.RotationVirtualStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleLayer) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleLayer) validateUsers(formats strfmt.Registry) error {

	if err := validate.Required("users", "body", m.Users); err != nil {
		return err
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleLayer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleLayer) UnmarshalBinary(b []byte) error {
	var res ScheduleLayer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
