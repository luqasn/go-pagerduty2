// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentUrgencyType incident urgency type
// swagger:model IncidentUrgencyType
type IncidentUrgencyType struct {

	// The type of incident urgency: whether it's constant, or it's dependent on the support hours.
	// Enum: [constant use_support_hours]
	Type *string `json:"type,omitempty"`

	// The incidents' urgency, if type is constant.
	// Enum: [low high]
	Urgency *string `json:"urgency,omitempty"`
}

// Validate validates this incident urgency type
func (m *IncidentUrgencyType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrgency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var incidentUrgencyTypeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["constant","use_support_hours"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incidentUrgencyTypeTypeTypePropEnum = append(incidentUrgencyTypeTypeTypePropEnum, v)
	}
}

const (

	// IncidentUrgencyTypeTypeConstant captures enum value "constant"
	IncidentUrgencyTypeTypeConstant string = "constant"

	// IncidentUrgencyTypeTypeUseSupportHours captures enum value "use_support_hours"
	IncidentUrgencyTypeTypeUseSupportHours string = "use_support_hours"
)

// prop value enum
func (m *IncidentUrgencyType) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, incidentUrgencyTypeTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IncidentUrgencyType) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var incidentUrgencyTypeTypeUrgencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["low","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incidentUrgencyTypeTypeUrgencyPropEnum = append(incidentUrgencyTypeTypeUrgencyPropEnum, v)
	}
}

const (

	// IncidentUrgencyTypeUrgencyLow captures enum value "low"
	IncidentUrgencyTypeUrgencyLow string = "low"

	// IncidentUrgencyTypeUrgencyHigh captures enum value "high"
	IncidentUrgencyTypeUrgencyHigh string = "high"
)

// prop value enum
func (m *IncidentUrgencyType) validateUrgencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, incidentUrgencyTypeTypeUrgencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IncidentUrgencyType) validateUrgency(formats strfmt.Registry) error {

	if swag.IsZero(m.Urgency) { // not required
		return nil
	}

	// value enum
	if err := m.validateUrgencyEnum("urgency", "body", *m.Urgency); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentUrgencyType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentUrgencyType) UnmarshalBinary(b []byte) error {
	var res IncidentUrgencyType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
