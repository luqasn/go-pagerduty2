// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduledAction scheduled action
// swagger:model ScheduledAction
type ScheduledAction struct {

	// at
	// Required: true
	At *ScheduledActionAt `json:"at"`

	// Urgency level. Must be set to high.
	// Required: true
	// Enum: [high]
	ToUrgency *string `json:"to_urgency"`

	// The type of schedule action. Must be set to urgency_change.
	// Required: true
	// Enum: [urgency_change]
	Type *string `json:"type"`
}

// Validate validates this scheduled action
func (m *ScheduledAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToUrgency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledAction) validateAt(formats strfmt.Registry) error {

	if err := validate.Required("at", "body", m.At); err != nil {
		return err
	}

	if m.At != nil {
		if err := m.At.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("at")
			}
			return err
		}
	}

	return nil
}

var scheduledActionTypeToUrgencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduledActionTypeToUrgencyPropEnum = append(scheduledActionTypeToUrgencyPropEnum, v)
	}
}

const (

	// ScheduledActionToUrgencyHigh captures enum value "high"
	ScheduledActionToUrgencyHigh string = "high"
)

// prop value enum
func (m *ScheduledAction) validateToUrgencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, scheduledActionTypeToUrgencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ScheduledAction) validateToUrgency(formats strfmt.Registry) error {

	if err := validate.Required("to_urgency", "body", m.ToUrgency); err != nil {
		return err
	}

	// value enum
	if err := m.validateToUrgencyEnum("to_urgency", "body", *m.ToUrgency); err != nil {
		return err
	}

	return nil
}

var scheduledActionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["urgency_change"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduledActionTypeTypePropEnum = append(scheduledActionTypeTypePropEnum, v)
	}
}

const (

	// ScheduledActionTypeUrgencyChange captures enum value "urgency_change"
	ScheduledActionTypeUrgencyChange string = "urgency_change"
)

// prop value enum
func (m *ScheduledAction) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, scheduledActionTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ScheduledAction) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledAction) UnmarshalBinary(b []byte) error {
	var res ScheduledAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
