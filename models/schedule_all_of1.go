// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleAllOf1 schedule all of1
// swagger:model scheduleAllOf1
type ScheduleAllOf1 struct {

	// The description of the schedule
	Description string `json:"description,omitempty"`

	// An array of all of the escalation policies that uses this schedule.
	// Read Only: true
	EscalationPolicies []*EscalationPolicyReference `json:"escalation_policies"`

	// The final layer is a special layer that contains the result of all of the previous layers put together. This layer cannot be edited.
	// Read Only: true
	FinalSchedule *SubSchedule `json:"final_schedule,omitempty"`

	// The name of the schedule
	Name string `json:"name,omitempty"`

	// The override layer is a special layer where all of the override entries are stored.
	// Read Only: true
	OverridesSubschedule *SubSchedule `json:"overrides_subschedule,omitempty"`

	// A list of schedule layers.
	// Required: true
	ScheduleLayers []*ScheduleLayer `json:"schedule_layers"`

	// The time zone of the schedule.
	// Required: true
	TimeZone *string `json:"time_zone"`

	// An array of all of the users on the schedule.
	// Read Only: true
	Users []*UserReference `json:"users"`
}

// Validate validates this schedule all of1
func (m *ScheduleAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEscalationPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinalSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverridesSubschedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduleLayers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleAllOf1) validateEscalationPolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.EscalationPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.EscalationPolicies); i++ {
		if swag.IsZero(m.EscalationPolicies[i]) { // not required
			continue
		}

		if m.EscalationPolicies[i] != nil {
			if err := m.EscalationPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("escalation_policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleAllOf1) validateFinalSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.FinalSchedule) { // not required
		return nil
	}

	if m.FinalSchedule != nil {
		if err := m.FinalSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("final_schedule")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduleAllOf1) validateOverridesSubschedule(formats strfmt.Registry) error {

	if swag.IsZero(m.OverridesSubschedule) { // not required
		return nil
	}

	if m.OverridesSubschedule != nil {
		if err := m.OverridesSubschedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrides_subschedule")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduleAllOf1) validateScheduleLayers(formats strfmt.Registry) error {

	if err := validate.Required("schedule_layers", "body", m.ScheduleLayers); err != nil {
		return err
	}

	for i := 0; i < len(m.ScheduleLayers); i++ {
		if swag.IsZero(m.ScheduleLayers[i]) { // not required
			continue
		}

		if m.ScheduleLayers[i] != nil {
			if err := m.ScheduleLayers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("schedule_layers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleAllOf1) validateTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("time_zone", "body", m.TimeZone); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleAllOf1) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	for i := 0; i < len(m.Users); i++ {
		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {
			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleAllOf1) UnmarshalBinary(b []byte) error {
	var res ScheduleAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
