// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ImageContext image context
// swagger:model ImageContext
type ImageContext struct {
	hrefField string

	srcField string

	textField string

	ImageContextAllOf1
}

// Href gets the href of this subtype
func (m *ImageContext) Href() string {
	return m.hrefField
}

// SetHref sets the href of this subtype
func (m *ImageContext) SetHref(val string) {
	m.hrefField = val
}

// Src gets the src of this subtype
func (m *ImageContext) Src() string {
	return m.srcField
}

// SetSrc sets the src of this subtype
func (m *ImageContext) SetSrc(val string) {
	m.srcField = val
}

// Text gets the text of this subtype
func (m *ImageContext) Text() string {
	return m.textField
}

// SetText sets the text of this subtype
func (m *ImageContext) SetText(val string) {
	m.textField = val
}

// Type gets the type of this subtype
func (m *ImageContext) Type() string {
	return "ImageContext"
}

// SetType sets the type of this subtype
func (m *ImageContext) SetType(val string) {

}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ImageContext) UnmarshalJSON(raw []byte) error {
	var data struct {
		ImageContextAllOf1
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Href string `json:"href,omitempty"`

		Src string `json:"src,omitempty"`

		Text string `json:"text,omitempty"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result ImageContext

	result.hrefField = base.Href

	result.srcField = base.Src

	result.textField = base.Text

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.ImageContextAllOf1 = data.ImageContextAllOf1

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ImageContext) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		ImageContextAllOf1
	}{

		ImageContextAllOf1: m.ImageContextAllOf1,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Href string `json:"href,omitempty"`

		Src string `json:"src,omitempty"`

		Text string `json:"text,omitempty"`

		Type string `json:"type"`
	}{

		Href: m.Href(),

		Src: m.Src(),

		Text: m.Text(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this image context
func (m *ImageContext) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ImageContextAllOf1
	if err := m.ImageContextAllOf1.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ImageContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageContext) UnmarshalBinary(b []byte) error {
	var res ImageContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
