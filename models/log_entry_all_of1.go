// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogEntryAllOf1 log entry all of1
// swagger:model logEntryAllOf1
type LogEntryAllOf1 struct {

	// agent
	// Read Only: true
	Agent *Agent `json:"agent,omitempty"`

	// The channel field represents the means by which the action was carried out.
	// Read Only: true
	Channel *Channel `json:"channel,omitempty"`

	contextsField []Context

	// Time at which the log entry was created.
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// event details
	EventDetails *LogEntryAllOf1EventDetails `json:"event_details,omitempty"`

	// Will be a reference unless included
	// Read Only: true
	Incident *IncidentReference `json:"incident,omitempty"`

	// Optional field containing a note, if one was included with the log entry.
	// Read Only: true
	Note string `json:"note,omitempty"`

	// Will be a reference unless included
	// Read Only: true
	Service *ServiceReference `json:"service,omitempty"`

	// Will consist of references unless included
	// Read Only: true
	Teams []*TeamReference `json:"teams"`
}

// Contexts gets the contexts of this base type
func (m *LogEntryAllOf1) Contexts() []Context {
	return m.contextsField
}

// SetContexts sets the contexts of this base type
func (m *LogEntryAllOf1) SetContexts(val []Context) {
	m.contextsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *LogEntryAllOf1) UnmarshalJSON(raw []byte) error {
	var data struct {
		Agent *Agent `json:"agent,omitempty"`

		Channel *Channel `json:"channel,omitempty"`

		Contexts json.RawMessage `json:"contexts,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		EventDetails *LogEntryAllOf1EventDetails `json:"event_details,omitempty"`

		Incident *IncidentReference `json:"incident,omitempty"`

		Note string `json:"note,omitempty"`

		Service *ServiceReference `json:"service,omitempty"`

		Teams []*TeamReference `json:"teams,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	contexts, err := UnmarshalContextSlice(bytes.NewBuffer(data.Contexts), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result LogEntryAllOf1

	// agent
	result.Agent = data.Agent

	// channel
	result.Channel = data.Channel

	// contexts
	result.contextsField = contexts

	// created_at
	result.CreatedAt = data.CreatedAt

	// event_details
	result.EventDetails = data.EventDetails

	// incident
	result.Incident = data.Incident

	// note
	result.Note = data.Note

	// service
	result.Service = data.Service

	// teams
	result.Teams = data.Teams

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m LogEntryAllOf1) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Agent *Agent `json:"agent,omitempty"`

		Channel *Channel `json:"channel,omitempty"`

		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		EventDetails *LogEntryAllOf1EventDetails `json:"event_details,omitempty"`

		Incident *IncidentReference `json:"incident,omitempty"`

		Note string `json:"note,omitempty"`

		Service *ServiceReference `json:"service,omitempty"`

		Teams []*TeamReference `json:"teams,omitempty"`
	}{

		Agent: m.Agent,

		Channel: m.Channel,

		CreatedAt: m.CreatedAt,

		EventDetails: m.EventDetails,

		Incident: m.Incident,

		Note: m.Note,

		Service: m.Service,

		Teams: m.Teams,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Contexts []Context `json:"contexts,omitempty"`
	}{

		Contexts: m.contextsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this log entry all of1
func (m *LogEntryAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContexts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncident(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogEntryAllOf1) validateAgent(formats strfmt.Registry) error {

	if swag.IsZero(m.Agent) { // not required
		return nil
	}

	if m.Agent != nil {
		if err := m.Agent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agent")
			}
			return err
		}
	}

	return nil
}

func (m *LogEntryAllOf1) validateChannel(formats strfmt.Registry) error {

	if swag.IsZero(m.Channel) { // not required
		return nil
	}

	if m.Channel != nil {
		if err := m.Channel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channel")
			}
			return err
		}
	}

	return nil
}

func (m *LogEntryAllOf1) validateContexts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contexts()) { // not required
		return nil
	}

	for i := 0; i < len(m.Contexts()); i++ {

		if err := m.contextsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contexts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *LogEntryAllOf1) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LogEntryAllOf1) validateEventDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.EventDetails) { // not required
		return nil
	}

	if m.EventDetails != nil {
		if err := m.EventDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_details")
			}
			return err
		}
	}

	return nil
}

func (m *LogEntryAllOf1) validateIncident(formats strfmt.Registry) error {

	if swag.IsZero(m.Incident) { // not required
		return nil
	}

	if m.Incident != nil {
		if err := m.Incident.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incident")
			}
			return err
		}
	}

	return nil
}

func (m *LogEntryAllOf1) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *LogEntryAllOf1) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogEntryAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogEntryAllOf1) UnmarshalBinary(b []byte) error {
	var res LogEntryAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
