// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PhoneContactMethodAllOf1 phone contact method all of1
// swagger:model phoneContactMethodAllOf1
type PhoneContactMethodAllOf1 struct {

	// If true, this phone has been blacklisted by PagerDuty and no messages will be sent to it.
	// Read Only: true
	Blacklisted *bool `json:"blacklisted,omitempty"`

	// The 1-to-3 digit country calling code.
	// Required: true
	// Maximum: 1999
	// Minimum: 1
	CountryCode *int64 `json:"country_code"`

	// If true, this phone is capable of receiving SMS messages.
	// Read Only: true
	Enabled *bool `json:"enabled,omitempty"`

	// type
	// Enum: [phone_contact_method sms_contact_method]
	Type string `json:"type,omitempty"`
}

// Validate validates this phone contact method all of1
func (m *PhoneContactMethodAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PhoneContactMethodAllOf1) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("country_code", "body", m.CountryCode); err != nil {
		return err
	}

	if err := validate.MinimumInt("country_code", "body", int64(*m.CountryCode), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("country_code", "body", int64(*m.CountryCode), 1999, false); err != nil {
		return err
	}

	return nil
}

var phoneContactMethodAllOf1TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["phone_contact_method","sms_contact_method"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		phoneContactMethodAllOf1TypeTypePropEnum = append(phoneContactMethodAllOf1TypeTypePropEnum, v)
	}
}

const (

	// PhoneContactMethodAllOf1TypePhoneContactMethod captures enum value "phone_contact_method"
	PhoneContactMethodAllOf1TypePhoneContactMethod string = "phone_contact_method"

	// PhoneContactMethodAllOf1TypeSmsContactMethod captures enum value "sms_contact_method"
	PhoneContactMethodAllOf1TypeSmsContactMethod string = "sms_contact_method"
)

// prop value enum
func (m *PhoneContactMethodAllOf1) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, phoneContactMethodAllOf1TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PhoneContactMethodAllOf1) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PhoneContactMethodAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PhoneContactMethodAllOf1) UnmarshalBinary(b []byte) error {
	var res PhoneContactMethodAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
