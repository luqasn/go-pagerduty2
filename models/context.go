// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// Context context
// swagger:discriminator Context type
type Context interface {
	runtime.Validatable

	// The link's target url
	Href() string
	SetHref(string)

	// The image's source url
	Src() string
	SetSrc(string)

	// The alternate display for an image
	Text() string
	SetText(string)

	// The type of context being attached to the incident.
	// Required: true
	// Enum: [link image]
	Type() string
	SetType(string)
}

type context struct {
	hrefField string

	srcField string

	textField string

	typeField string
}

// Href gets the href of this polymorphic type
func (m *context) Href() string {
	return m.hrefField
}

// SetHref sets the href of this polymorphic type
func (m *context) SetHref(val string) {
	m.hrefField = val
}

// Src gets the src of this polymorphic type
func (m *context) Src() string {
	return m.srcField
}

// SetSrc sets the src of this polymorphic type
func (m *context) SetSrc(val string) {
	m.srcField = val
}

// Text gets the text of this polymorphic type
func (m *context) Text() string {
	return m.textField
}

// SetText sets the text of this polymorphic type
func (m *context) SetText(val string) {
	m.textField = val
}

// Type gets the type of this polymorphic type
func (m *context) Type() string {
	return "Context"
}

// SetType sets the type of this polymorphic type
func (m *context) SetType(val string) {

}

// UnmarshalContextSlice unmarshals polymorphic slices of Context
func UnmarshalContextSlice(reader io.Reader, consumer runtime.Consumer) ([]Context, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Context
	for _, element := range elements {
		obj, err := unmarshalContext(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalContext unmarshals polymorphic Context
func UnmarshalContext(reader io.Reader, consumer runtime.Consumer) (Context, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalContext(data, consumer)
}

func unmarshalContext(data []byte, consumer runtime.Consumer) (Context, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "Context":
		var result context
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "ImageContext":
		var result ImageContext
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "LinkContext":
		var result LinkContext
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}

// Validate validates this context
func (m *context) Validate(formats strfmt.Registry) error {
	return nil
}
