// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserAllOf1 user all of1
// swagger:model userAllOf1
type UserAllOf1 struct {

	// The URL of the user's avatar.
	// Read Only: true
	AvatarURL string `json:"avatar_url,omitempty"`

	// The schedule color.
	Color string `json:"color,omitempty"`

	// The list of contact methods for the user.
	// Read Only: true
	ContactMethods []*ContactMethodReference `json:"contact_methods"`

	// The user's bio.
	Description string `json:"description,omitempty"`

	// The user's email address.
	// Required: true
	// Max Length: 100
	// Min Length: 6
	// Format: email
	Email *strfmt.Email `json:"email"`

	// If true, the user has an outstanding invitation.
	// Read Only: true
	InvitationSent *bool `json:"invitation_sent,omitempty"`

	// The user's title.
	// Max Length: 100
	JobTitle string `json:"job_title,omitempty"`

	// The name of the user.
	// Required: true
	// Max Length: 100
	Name *string `json:"name"`

	// The list of notification rules for the user.
	// Read Only: true
	NotificationRules []*NotificationRule `json:"notification_rules"`

	// The user role. Account must have the `read_only_users` ability to set a user as a `read_only_user`, and must have the `permissions_service` ability to set a user as `observer` or `restricted_access`.
	// Enum: [admin limited_user observer owner read_only_user restricted_access team_responder user]
	Role string `json:"role,omitempty"`

	// The list of teams to which the user belongs. Account must have the `teams` ability to set this.
	// Read Only: true
	Teams []*TeamReference `json:"teams"`

	// The preferred time zone name. If null, the account's time zone will be used.
	TimeZone string `json:"time_zone,omitempty"`
}

// Validate validates this user all of1
func (m *UserAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactMethods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserAllOf1) validateContactMethods(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactMethods) { // not required
		return nil
	}

	for i := 0; i < len(m.ContactMethods); i++ {
		if swag.IsZero(m.ContactMethods[i]) { // not required
			continue
		}

		if m.ContactMethods[i] != nil {
			if err := m.ContactMethods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contact_methods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserAllOf1) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.MinLength("email", "body", string(*m.Email), 6); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", string(*m.Email), 100); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserAllOf1) validateJobTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.JobTitle) { // not required
		return nil
	}

	if err := validate.MaxLength("job_title", "body", string(m.JobTitle), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserAllOf1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	return nil
}

func (m *UserAllOf1) validateNotificationRules(formats strfmt.Registry) error {

	if swag.IsZero(m.NotificationRules) { // not required
		return nil
	}

	for i := 0; i < len(m.NotificationRules); i++ {
		if swag.IsZero(m.NotificationRules[i]) { // not required
			continue
		}

		if m.NotificationRules[i] != nil {
			if err := m.NotificationRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notification_rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var userAllOf1TypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["admin","limited_user","observer","owner","read_only_user","restricted_access","team_responder","user"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userAllOf1TypeRolePropEnum = append(userAllOf1TypeRolePropEnum, v)
	}
}

const (

	// UserAllOf1RoleAdmin captures enum value "admin"
	UserAllOf1RoleAdmin string = "admin"

	// UserAllOf1RoleLimitedUser captures enum value "limited_user"
	UserAllOf1RoleLimitedUser string = "limited_user"

	// UserAllOf1RoleObserver captures enum value "observer"
	UserAllOf1RoleObserver string = "observer"

	// UserAllOf1RoleOwner captures enum value "owner"
	UserAllOf1RoleOwner string = "owner"

	// UserAllOf1RoleReadOnlyUser captures enum value "read_only_user"
	UserAllOf1RoleReadOnlyUser string = "read_only_user"

	// UserAllOf1RoleRestrictedAccess captures enum value "restricted_access"
	UserAllOf1RoleRestrictedAccess string = "restricted_access"

	// UserAllOf1RoleTeamResponder captures enum value "team_responder"
	UserAllOf1RoleTeamResponder string = "team_responder"

	// UserAllOf1RoleUser captures enum value "user"
	UserAllOf1RoleUser string = "user"
)

// prop value enum
func (m *UserAllOf1) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userAllOf1TypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserAllOf1) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *UserAllOf1) validateTeams(formats strfmt.Registry) error {

	if swag.IsZero(m.Teams) { // not required
		return nil
	}

	for i := 0; i < len(m.Teams); i++ {
		if swag.IsZero(m.Teams[i]) { // not required
			continue
		}

		if m.Teams[i] != nil {
			if err := m.Teams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("teams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserAllOf1) UnmarshalBinary(b []byte) error {
	var res UserAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
