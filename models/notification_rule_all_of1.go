// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationRuleAllOf1 A rule for contacting the user.
// swagger:model notificationRuleAllOf1
type NotificationRuleAllOf1 struct {

	// The contact method invoked by the rule.
	// Required: true
	ContactMethod *ContactMethodReference `json:"contact_method"`

	// The delay before firing the rule, in minutes.
	// Required: true
	// Minimum: 0
	StartDelayInMinutes *int64 `json:"start_delay_in_minutes"`

	// Which incident urgency this rule is used for. Account must have the `urgencies` ability to have a low urgency notification rule.
	// Required: true
	// Enum: [high low]
	Urgency *string `json:"urgency"`
}

// Validate validates this notification rule all of1
func (m *NotificationRuleAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDelayInMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrgency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationRuleAllOf1) validateContactMethod(formats strfmt.Registry) error {

	if err := validate.Required("contact_method", "body", m.ContactMethod); err != nil {
		return err
	}

	if m.ContactMethod != nil {
		if err := m.ContactMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact_method")
			}
			return err
		}
	}

	return nil
}

func (m *NotificationRuleAllOf1) validateStartDelayInMinutes(formats strfmt.Registry) error {

	if err := validate.Required("start_delay_in_minutes", "body", m.StartDelayInMinutes); err != nil {
		return err
	}

	if err := validate.MinimumInt("start_delay_in_minutes", "body", int64(*m.StartDelayInMinutes), 0, false); err != nil {
		return err
	}

	return nil
}

var notificationRuleAllOf1TypeUrgencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["high","low"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationRuleAllOf1TypeUrgencyPropEnum = append(notificationRuleAllOf1TypeUrgencyPropEnum, v)
	}
}

const (

	// NotificationRuleAllOf1UrgencyHigh captures enum value "high"
	NotificationRuleAllOf1UrgencyHigh string = "high"

	// NotificationRuleAllOf1UrgencyLow captures enum value "low"
	NotificationRuleAllOf1UrgencyLow string = "low"
)

// prop value enum
func (m *NotificationRuleAllOf1) validateUrgencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, notificationRuleAllOf1TypeUrgencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NotificationRuleAllOf1) validateUrgency(formats strfmt.Registry) error {

	if err := validate.Required("urgency", "body", m.Urgency); err != nil {
		return err
	}

	// value enum
	if err := m.validateUrgencyEnum("urgency", "body", *m.Urgency); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationRuleAllOf1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationRuleAllOf1) UnmarshalBinary(b []byte) error {
	var res NotificationRuleAllOf1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
