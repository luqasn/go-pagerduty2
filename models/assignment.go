// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Assignment assignment
// swagger:model Assignment
type Assignment struct {

	// User that was assigned.
	// Required: true
	Assignee *UserReference `json:"assignee"`

	// Time at which the assignment was created.
	// Required: true
	// Format: date-time
	At *strfmt.DateTime `json:"at"`
}

// Validate validates this assignment
func (m *Assignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Assignment) validateAssignee(formats strfmt.Registry) error {

	if err := validate.Required("assignee", "body", m.Assignee); err != nil {
		return err
	}

	if m.Assignee != nil {
		if err := m.Assignee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assignee")
			}
			return err
		}
	}

	return nil
}

func (m *Assignment) validateAt(formats strfmt.Registry) error {

	if err := validate.Required("at", "body", m.At); err != nil {
		return err
	}

	if err := validate.FormatOf("at", "body", "date-time", m.At.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Assignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Assignment) UnmarshalBinary(b []byte) error {
	var res Assignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
