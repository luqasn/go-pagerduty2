// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ContactMethodAllOf1 The method to contact a user.
// swagger:discriminator contactMethodAllOf1 type
type ContactMethodAllOf1 interface {
	runtime.Validatable

	// The "address" to deliver to: email, phone number, etc., depending on the type.
	// Required: true
	Address() *string
	SetAddress(*string)

	// The label (e.g., "Work", "Mobile", etc.).
	// Required: true
	Label() *string
	SetLabel(*string)
}

type contactMethodAllOf1 struct {
	addressField *string

	labelField *string
}

// Address gets the address of this polymorphic type
func (m *contactMethodAllOf1) Address() *string {
	return m.addressField
}

// SetAddress sets the address of this polymorphic type
func (m *contactMethodAllOf1) SetAddress(val *string) {
	m.addressField = val
}

// Label gets the label of this polymorphic type
func (m *contactMethodAllOf1) Label() *string {
	return m.labelField
}

// SetLabel sets the label of this polymorphic type
func (m *contactMethodAllOf1) SetLabel(val *string) {
	m.labelField = val
}

// UnmarshalContactMethodAllOf1Slice unmarshals polymorphic slices of ContactMethodAllOf1
func UnmarshalContactMethodAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]ContactMethodAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ContactMethodAllOf1
	for _, element := range elements {
		obj, err := unmarshalContactMethodAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalContactMethodAllOf1 unmarshals polymorphic ContactMethodAllOf1
func UnmarshalContactMethodAllOf1(reader io.Reader, consumer runtime.Consumer) (ContactMethodAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalContactMethodAllOf1(data, consumer)
}

func unmarshalContactMethodAllOf1(data []byte, consumer runtime.Consumer) (ContactMethodAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "ContactMethod":
		var result ContactMethod
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "contactMethodAllOf1":
		var result contactMethodAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}

// Validate validates this contact method all of1
func (m *contactMethodAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *contactMethodAllOf1) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address()); err != nil {
		return err
	}

	return nil
}

func (m *contactMethodAllOf1) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label()); err != nil {
		return err
	}

	return nil
}
