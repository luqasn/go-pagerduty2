// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateIncidentParamsBodyIncident The parameters of the incident to update.
// swagger:model updateIncidentParamsBodyIncident
type UpdateIncidentParamsBodyIncident struct {

	// Assign the incident to these assignees.
	Assignments []*UpdateIncidentParamsBodyIncidentAssignmentsItems `json:"assignments"`

	// Escalate the incident to this level in the escalation policy.
	EscalationLevel int64 `json:"escalation_level,omitempty"`

	// Delegate this incident to the specified escalation policy. This restarts the incident's escalation following the new policy.
	EscalationPolicy *EscalationPolicyReference `json:"escalation_policy,omitempty"`

	// The priority of this incident.
	Priority *PriorityReference `json:"priority,omitempty"`

	// The resolution for this incident if status is set to resolved.
	Resolution string `json:"resolution,omitempty"`

	// The new status of the incident.
	// Enum: [resolved acknowledged]
	Status string `json:"status,omitempty"`

	// The new title of the incident.
	Title string `json:"title,omitempty"`

	// The incident type.
	// Required: true
	// Enum: [incident incident_reference]
	Type *string `json:"type"`
}

// Validate validates this update incident params body incident
func (m *UpdateIncidentParamsBodyIncident) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEscalationPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIncidentParamsBodyIncident) validateAssignments(formats strfmt.Registry) error {

	if swag.IsZero(m.Assignments) { // not required
		return nil
	}

	for i := 0; i < len(m.Assignments); i++ {
		if swag.IsZero(m.Assignments[i]) { // not required
			continue
		}

		if m.Assignments[i] != nil {
			if err := m.Assignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateIncidentParamsBodyIncident) validateEscalationPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.EscalationPolicy) { // not required
		return nil
	}

	if m.EscalationPolicy != nil {
		if err := m.EscalationPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("escalation_policy")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateIncidentParamsBodyIncident) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if m.Priority != nil {
		if err := m.Priority.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("priority")
			}
			return err
		}
	}

	return nil
}

var updateIncidentParamsBodyIncidentTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["resolved","acknowledged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateIncidentParamsBodyIncidentTypeStatusPropEnum = append(updateIncidentParamsBodyIncidentTypeStatusPropEnum, v)
	}
}

const (

	// UpdateIncidentParamsBodyIncidentStatusResolved captures enum value "resolved"
	UpdateIncidentParamsBodyIncidentStatusResolved string = "resolved"

	// UpdateIncidentParamsBodyIncidentStatusAcknowledged captures enum value "acknowledged"
	UpdateIncidentParamsBodyIncidentStatusAcknowledged string = "acknowledged"
)

// prop value enum
func (m *UpdateIncidentParamsBodyIncident) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateIncidentParamsBodyIncidentTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateIncidentParamsBodyIncident) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var updateIncidentParamsBodyIncidentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["incident","incident_reference"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateIncidentParamsBodyIncidentTypeTypePropEnum = append(updateIncidentParamsBodyIncidentTypeTypePropEnum, v)
	}
}

const (

	// UpdateIncidentParamsBodyIncidentTypeIncident captures enum value "incident"
	UpdateIncidentParamsBodyIncidentTypeIncident string = "incident"

	// UpdateIncidentParamsBodyIncidentTypeIncidentReference captures enum value "incident_reference"
	UpdateIncidentParamsBodyIncidentTypeIncidentReference string = "incident_reference"
)

// prop value enum
func (m *UpdateIncidentParamsBodyIncident) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateIncidentParamsBodyIncidentTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateIncidentParamsBodyIncident) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateIncidentParamsBodyIncident) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateIncidentParamsBodyIncident) UnmarshalBinary(b []byte) error {
	var res UpdateIncidentParamsBodyIncident
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
