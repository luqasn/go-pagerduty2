// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactMethod contact method
// swagger:model ContactMethod
type ContactMethod struct {
	ContactMethodReference

	addressField *string

	labelField *string
}

// Address gets the address of this subtype
func (m *ContactMethod) Address() *string {
	return m.addressField
}

// SetAddress sets the address of this subtype
func (m *ContactMethod) SetAddress(val *string) {
	m.addressField = val
}

// Label gets the label of this subtype
func (m *ContactMethod) Label() *string {
	return m.labelField
}

// SetLabel sets the label of this subtype
func (m *ContactMethod) SetLabel(val *string) {
	m.labelField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ContactMethod) UnmarshalJSON(raw []byte) error {
	var data struct {
		ContactMethodReference
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Address *string `json:"address"`

		Label *string `json:"label"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result ContactMethod

	result.ContactMethodReference = data.ContactMethodReference

	result.addressField = base.Address

	result.labelField = base.Label

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ContactMethod) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		ContactMethodReference
	}{

		ContactMethodReference: m.ContactMethodReference,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Address *string `json:"address"`

		Label *string `json:"label"`
	}{

		Address: m.Address(),

		Label: m.Label(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this contact method
func (m *ContactMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ContactMethodReference
	if err := m.ContactMethodReference.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactMethod) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address()); err != nil {
		return err
	}

	return nil
}

func (m *ContactMethod) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactMethod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactMethod) UnmarshalBinary(b []byte) error {
	var res ContactMethod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
